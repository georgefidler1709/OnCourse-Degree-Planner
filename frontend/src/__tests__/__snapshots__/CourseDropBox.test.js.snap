// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Render degree planning timeline view renders correctly 1`] = `
<DragDropContext>
  <ErrorBoundary>
    <App
      contextId="0"
      liftInstruction="Draggable item. Ensure your screen reader is not in browse mode and then press space bar to lift."
      setCallbacks={[Function]}
    >
      <Provider
        context={
          Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": Object {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <ConnectFunction
          direction="vertical"
          droppableId="droppable"
          getContainerForClone={[Function]}
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          mode="standard"
          renderClone={null}
          type="DEFAULT"
        >
          <Droppable
            direction="vertical"
            droppableId="droppable"
            getContainerForClone={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            mode="standard"
            placeholder={null}
            renderClone={null}
            shouldAnimatePlaceholder={false}
            snapshot={
              Object {
                "draggingFromThisWith": null,
                "draggingOverWith": null,
                "isDraggingOver": false,
                "isUsingPlaceholder": false,
              }
            }
            type="DEFAULT"
            updateViewportMaxScroll={[Function]}
            useClone={null}
          >
            <div
              data-rbd-droppable-context-id="0"
              data-rbd-droppable-id="droppable"
              innerRef={[Function]}
            >
              <CourseDropBox
                type="test"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": false,
                          "lastClassName": "kHKfLU",
                          "rules": Array [
                            "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-htpNat kHKfLU"
                    >
                      <styled.h5>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": false,
                                "lastClassName": "fZLCcU",
                                "rules": Array [
                                  "
  padding: 8px;
",
                                ],
                              },
                              "displayName": "styled.h5",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": "h5",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <h5
                            className="sc-bxivhb fZLCcU"
                          >
                            test
                          </h5>
                        </StyledComponent>
                      </styled.h5>
                      <ConnectFunction
                        direction="vertical"
                        droppableId="test"
                        getContainerForClone={[Function]}
                        ignoreContainerClipping={false}
                        isCombineEnabled={false}
                        isDropDisabled={false}
                        mode="standard"
                        renderClone={null}
                        type="DEFAULT"
                      >
                        <Droppable
                          direction="vertical"
                          droppableId="test"
                          getContainerForClone={[Function]}
                          ignoreContainerClipping={false}
                          isCombineEnabled={false}
                          isDropDisabled={false}
                          mode="standard"
                          placeholder={null}
                          renderClone={null}
                          shouldAnimatePlaceholder={false}
                          snapshot={
                            Object {
                              "draggingFromThisWith": null,
                              "draggingOverWith": null,
                              "isDraggingOver": false,
                              "isUsingPlaceholder": false,
                            }
                          }
                          type="DEFAULT"
                          updateViewportMaxScroll={[Function]}
                          useClone={null}
                        >
                          <styled.div
                            data-rbd-droppable-context-id="0"
                            data-rbd-droppable-id="test"
                          >
                            <StyledComponent
                              data-rbd-droppable-context-id="0"
                              data-rbd-droppable-id="test"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-ifAKCX",
                                    "isStatic": false,
                                    "lastClassName": "jmTjSZ",
                                    "rules": Array [
                                      "
  padding: 8px;
  flex-grow: 1;
  min-height: 50px;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-ifAKCX",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={[Function]}
                            >
                              <div
                                className="sc-ifAKCX jmTjSZ"
                                data-rbd-droppable-context-id="0"
                                data-rbd-droppable-id="test"
                              >
                                <AnimateInOut
                                  on={null}
                                  shouldAnimate={false}
                                />
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </Droppable>
                      </ConnectFunction>
                    </div>
                  </StyledComponent>
                </styled.div>
              </CourseDropBox>
              <AnimateInOut
                on={null}
                shouldAnimate={false}
              />
            </div>
          </Droppable>
        </ConnectFunction>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;
