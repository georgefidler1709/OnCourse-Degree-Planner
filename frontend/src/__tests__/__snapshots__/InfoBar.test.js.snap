// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Has collapsable sections can collapse a section 1`] = `
<DragDropContext>
  <ErrorBoundary>
    <App
      contextId="3"
      liftInstruction="Draggable item. Ensure your screen reader is not in browse mode and then press space bar to lift."
      setCallbacks={[Function]}
    >
      <Provider
        context={
          Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": Object {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <InfoBar
          add_event={[MockFunction]}
          degree_id="3778"
          degree_name="Computing"
          degree_reqs={
            Array [
              Object {
                "filter_type": "GenEd",
                "units": 12,
              },
              Object {
                "filter_type": "FreeElective",
                "units": 36,
              },
            ]
          }
          done_courses={Array []}
          remove_course={[MockFunction]}
          standby_courses={Array []}
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kkGfuU",
                    "isStatic": false,
                    "lastClassName": "dUkchd",
                    "rules": Array [
                      "
  &::-webkit-scrollbar {
    display: none;
  }

  padding-top: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 350px;
  max-height: 90vh;
  overflow-y: auto;
  box-sizing: content-box;
  text-align: center;
  background-color: #343a40;
  color: white;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kkGfuU",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-kkGfuU dUkchd"
              >
                <styled.h3>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iAyFgw",
                          "isStatic": false,
                          "lastClassName": "bsxapa",
                          "rules": Array [
                            "
  padding: 8px;
  margin: 0px;
  font-family: inherit;
  border-bottom: 1px solid lightgrey;
  color: inherit;
",
                          ],
                        },
                        "displayName": "styled.h3",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iAyFgw",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h3
                      className="sc-iAyFgw bsxapa"
                    >
                      Computing
                      <br />
                      3778
                    </h3>
                  </StyledComponent>
                </styled.h3>
                <InfoBarSection
                  open={false}
                  setOpen={[Function]}
                  title="Add a Course"
                >
                  <Styled(Card)
                    bg="dark"
                    text="white"
                  >
                    <StyledComponent
                      bg="dark"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Body": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardBody",
                            "render": [Function],
                          },
                          "Footer": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardFooter",
                            "render": [Function],
                          },
                          "Header": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardHeader",
                            "render": [Function],
                          },
                          "Img": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": Object {
                              "variant": null,
                            },
                            "displayName": "CardImg",
                            "render": [Function],
                          },
                          "ImgOverlay": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardImgOverlay",
                            "render": [Function],
                          },
                          "Link": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardLink",
                            "render": [Function],
                          },
                          "Subtitle": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardSubtitle",
                            "render": [Function],
                          },
                          "Text": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardText",
                            "render": [Function],
                          },
                          "Title": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardTitle",
                            "render": [Function],
                          },
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "hJxOZJ",
                            "rules": Array [
                              "
",
                            ],
                          },
                          "displayName": "Styled(Card)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-dnqmqq",
                          "target": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Body": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardBody",
                              "render": [Function],
                            },
                            "Footer": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardFooter",
                              "render": [Function],
                            },
                            "Header": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardHeader",
                              "render": [Function],
                            },
                            "Img": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "variant": null,
                              },
                              "displayName": "CardImg",
                              "render": [Function],
                            },
                            "ImgOverlay": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardImgOverlay",
                              "render": [Function],
                            },
                            "Link": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardLink",
                              "render": [Function],
                            },
                            "Subtitle": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardSubtitle",
                              "render": [Function],
                            },
                            "Text": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardText",
                              "render": [Function],
                            },
                            "Title": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardTitle",
                              "render": [Function],
                            },
                            "defaultProps": Object {
                              "body": false,
                            },
                            "displayName": "Card",
                            "render": [Function],
                          },
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      text="white"
                    >
                      <Card
                        bg="dark"
                        body={false}
                        className="sc-dnqmqq hJxOZJ"
                        text="white"
                      >
                        <div
                          className="sc-dnqmqq hJxOZJ card bg-dark text-white"
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={false}
                            onClick={[Function]}
                          >
                            <StyledComponent
                              aria-controls="collapse-add-course"
                              aria-expanded={false}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-iwsKbI",
                                    "isStatic": false,
                                    "lastClassName": "fypTFz",
                                    "rules": Array [
                                      "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                    ],
                                  },
                                  "displayName": "Styled(CardHeader)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-iwsKbI",
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": undefined,
                                    "displayName": "CardHeader",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <CardHeader
                                aria-controls="collapse-add-course"
                                aria-expanded={false}
                                className="sc-iwsKbI fypTFz"
                                onClick={[Function]}
                              >
                                <div
                                  aria-controls="collapse-add-course"
                                  aria-expanded={false}
                                  className="sc-iwsKbI fypTFz card-header"
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-right"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-right"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-gZMcBi",
                                            "isStatic": false,
                                            "lastClassName": "dKgYPz",
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-gZMcBi",
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
                                        className="sc-gZMcBi dKgYPz fa fa-chevron-right"
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-htoDjs",
                                            "isStatic": false,
                                            "lastClassName": "bNWaiC",
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-htoDjs",
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
                                        className="sc-htoDjs bNWaiC"
                                      >
                                        Add a Course
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
                                className="collapse"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse card-body"
                                >
                                  <p>
                                    Search for a course and click on it. Then drag the course into your timeline from the 
                                    <b>
                                      Add
                                    </b>
                                     box.
                                  </p>
                                  <CourseDropBox
                                    remove_course={[MockFunction]}
                                    type="Add"
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-EHOje",
                                              "isStatic": false,
                                              "lastClassName": "gIuBAP",
                                              "rules": Array [
                                                "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-EHOje",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-EHOje gIuBAP"
                                        >
                                          <styled.h5>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bZQynM",
                                                    "isStatic": false,
                                                    "lastClassName": "btxUkQ",
                                                    "rules": Array [
                                                      "
  padding: 8px;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.h5",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bZQynM",
                                                  "target": "h5",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <h5
                                                className="sc-bZQynM btxUkQ"
                                              >
                                                Add
                                              </h5>
                                            </StyledComponent>
                                          </styled.h5>
                                          <ConnectFunction
                                            direction="vertical"
                                            droppableId="Add"
                                            getContainerForClone={[Function]}
                                            ignoreContainerClipping={false}
                                            isCombineEnabled={false}
                                            isDropDisabled={false}
                                            mode="standard"
                                            renderClone={null}
                                            type="DEFAULT"
                                          >
                                            <Droppable
                                              direction="vertical"
                                              droppableId="Add"
                                              getContainerForClone={[Function]}
                                              ignoreContainerClipping={false}
                                              isCombineEnabled={false}
                                              isDropDisabled={false}
                                              mode="standard"
                                              placeholder={null}
                                              renderClone={null}
                                              shouldAnimatePlaceholder={false}
                                              snapshot={
                                                Object {
                                                  "draggingFromThisWith": null,
                                                  "draggingOverWith": null,
                                                  "isDraggingOver": false,
                                                  "isUsingPlaceholder": false,
                                                }
                                              }
                                              type="DEFAULT"
                                              updateViewportMaxScroll={[Function]}
                                              useClone={null}
                                            >
                                              <styled.div
                                                data-rbd-droppable-context-id="3"
                                                data-rbd-droppable-id="Add"
                                              >
                                                <StyledComponent
                                                  data-rbd-droppable-context-id="3"
                                                  data-rbd-droppable-id="Add"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-gzVnrw",
                                                        "isStatic": false,
                                                        "lastClassName": "hQQdYy",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  flex-grow: 1;
  min-height: 50px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-gzVnrw",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={[Function]}
                                                >
                                                  <div
                                                    className="sc-gzVnrw hQQdYy"
                                                    data-rbd-droppable-context-id="3"
                                                    data-rbd-droppable-id="Add"
                                                  >
                                                    <AnimateInOut
                                                      on={null}
                                                      shouldAnimate={false}
                                                    />
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Droppable>
                                          </ConnectFunction>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </CourseDropBox>
                                  <SearchCourses
                                    add_event={[MockFunction]}
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-jKJlTe",
                                              "isStatic": false,
                                              "lastClassName": "BsXjl",
                                              "rules": Array [
                                                "
  padding: 3px;
  margin: 0;
  text-align: center;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-jKJlTe",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-jKJlTe BsXjl"
                                        >
                                          <form>
                                            <Styled(styled.input)
                                              onChange={[Function]}
                                              placeholder="Search for a course..."
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-eNQAEJ",
                                                      "isStatic": false,
                                                      "lastClassName": "fmHDKE",
                                                      "rules": Array [
                                                        "

  &:focus {
    outline: none;
    &::placeholder {
      color: transparent;
    }
  }
  box-shadow: 10px 10px grey;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  padding: 1% 4%;
  margin-bottom: 2%;
  transition: background-colour .2s ease-in;
  font-size: 30px;
  line-height: 18px;
  background-color: transparent;
  background-image: url(\\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\");
  background-repeat: no-repeat;
  background-size: 40px 40px;
  background-position: 95% center;

  border-radius: 50px;
  border: 1px solid #575756;
",
                                                        "

&::placeholder {
  color: rgba(255, 255, 255, 0.75);
}
  width: 95%;
  padding: 12px 24px;
  margin-bottom: 1%;

  font-size: 14px;
  line-height: 18px;
  font-color: white;

  color: white;
  background-size: 18px 18px;
  background-position: 95% center;
  border: 1px solid white;

  box-shadow: 0px 0px;
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.input)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kpOJdX",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-eNQAEJ",
                                                    "target": "input",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={
                                                  Object {
                                                    "current": <input
                                                      class="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                      placeholder="Search for a course..."
                                                    />,
                                                  }
                                                }
                                                onChange={[Function]}
                                                placeholder="Search for a course..."
                                              >
                                                <input
                                                  className="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                  onChange={[Function]}
                                                  placeholder="Search for a course..."
                                                />
                                              </StyledComponent>
                                            </Styled(styled.input)>
                                          </form>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </SearchCourses>
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
                <InfoBarSection
<<<<<<< HEAD
<<<<<<< HEAD
                  open={false}
                  setOpen={[Function]}
                  title="Requirements"
=======
                  open={true}
=======
                  open={false}
>>>>>>> fix_remaining_reqs
                  setOpen={[Function]}
                  title="Courses Already Done"
>>>>>>> already_done
                >
                  <Styled(Card)
                    bg="dark"
                    text="white"
                  >
                    <StyledComponent
                      bg="dark"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Body": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardBody",
                            "render": [Function],
                          },
                          "Footer": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardFooter",
                            "render": [Function],
                          },
                          "Header": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardHeader",
                            "render": [Function],
                          },
                          "Img": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": Object {
                              "variant": null,
                            },
                            "displayName": "CardImg",
                            "render": [Function],
                          },
                          "ImgOverlay": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardImgOverlay",
                            "render": [Function],
                          },
                          "Link": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardLink",
                            "render": [Function],
                          },
                          "Subtitle": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardSubtitle",
                            "render": [Function],
                          },
                          "Text": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardText",
                            "render": [Function],
                          },
                          "Title": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardTitle",
                            "render": [Function],
                          },
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "hJxOZJ",
=======
                            "componentId": "sc-htoDjs",
                            "isStatic": false,
                            "lastClassName": "keqScR",
>>>>>>> already_done
                            "rules": Array [
                              "
",
                            ],
                          },
                          "displayName": "Styled(Card)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
<<<<<<< HEAD
                          "styledComponentId": "sc-dnqmqq",
=======
                          "styledComponentId": "sc-htoDjs",
>>>>>>> already_done
                          "target": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Body": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardBody",
                              "render": [Function],
                            },
                            "Footer": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardFooter",
                              "render": [Function],
                            },
                            "Header": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardHeader",
                              "render": [Function],
                            },
                            "Img": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "variant": null,
                              },
                              "displayName": "CardImg",
                              "render": [Function],
                            },
                            "ImgOverlay": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardImgOverlay",
                              "render": [Function],
                            },
                            "Link": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardLink",
                              "render": [Function],
                            },
                            "Subtitle": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardSubtitle",
                              "render": [Function],
                            },
                            "Text": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardText",
                              "render": [Function],
                            },
                            "Title": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardTitle",
                              "render": [Function],
                            },
                            "defaultProps": Object {
                              "body": false,
                            },
                            "displayName": "Card",
                            "render": [Function],
                          },
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      text="white"
                    >
                      <Card
                        bg="dark"
                        body={false}
<<<<<<< HEAD
                        className="sc-dnqmqq hJxOZJ"
                        text="white"
                      >
                        <div
                          className="sc-dnqmqq hJxOZJ card bg-dark text-white"
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={false}
=======
                        className="sc-htoDjs keqScR"
                        text="white"
                      >
                        <div
                          className="sc-htoDjs keqScR card bg-dark text-white"
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
<<<<<<< HEAD
                            aria-expanded={true}
>>>>>>> already_done
=======
                            aria-expanded={false}
>>>>>>> fix_remaining_reqs
                            onClick={[Function]}
                          >
                            <StyledComponent
                              aria-controls="collapse-add-course"
<<<<<<< HEAD
<<<<<<< HEAD
                              aria-expanded={false}
=======
                              aria-expanded={true}
>>>>>>> already_done
=======
                              aria-expanded={false}
>>>>>>> fix_remaining_reqs
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                    "componentId": "sc-iwsKbI",
                                    "isStatic": false,
                                    "lastClassName": "fypTFz",
=======
                                    "componentId": "sc-dnqmqq",
                                    "isStatic": false,
                                    "lastClassName": "fftazU",
>>>>>>> already_done
                                    "rules": Array [
                                      "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                    ],
                                  },
                                  "displayName": "Styled(CardHeader)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
<<<<<<< HEAD
                                  "styledComponentId": "sc-iwsKbI",
=======
                                  "styledComponentId": "sc-dnqmqq",
>>>>>>> already_done
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": undefined,
                                    "displayName": "CardHeader",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <CardHeader
                                aria-controls="collapse-add-course"
<<<<<<< HEAD
<<<<<<< HEAD
                                aria-expanded={false}
                                className="sc-iwsKbI fypTFz"
=======
                                aria-expanded={true}
=======
                                aria-expanded={false}
>>>>>>> fix_remaining_reqs
                                className="sc-dnqmqq fftazU"
>>>>>>> already_done
                                onClick={[Function]}
                              >
                                <div
                                  aria-controls="collapse-add-course"
<<<<<<< HEAD
<<<<<<< HEAD
                                  aria-expanded={false}
                                  className="sc-iwsKbI fypTFz card-header"
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-right"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-right"
=======
                                  aria-expanded={true}
=======
                                  aria-expanded={false}
>>>>>>> fix_remaining_reqs
                                  className="sc-dnqmqq fftazU card-header"
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-right"
                                  >
                                    <StyledComponent
<<<<<<< HEAD
                                      className="fa fa-chevron-down"
>>>>>>> already_done
=======
                                      className="fa fa-chevron-right"
>>>>>>> fix_remaining_reqs
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-gZMcBi",
                                            "isStatic": false,
                                            "lastClassName": "dKgYPz",
=======
                                            "componentId": "sc-iwsKbI",
                                            "isStatic": false,
                                            "lastClassName": "LdBUN",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-gZMcBi",
=======
                                          "styledComponentId": "sc-iwsKbI",
>>>>>>> already_done
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
<<<<<<< HEAD
<<<<<<< HEAD
                                        className="sc-gZMcBi dKgYPz fa fa-chevron-right"
=======
                                        className="sc-iwsKbI LdBUN fa fa-chevron-down"
>>>>>>> already_done
=======
                                        className="sc-iwsKbI LdBUN fa fa-chevron-right"
>>>>>>> fix_remaining_reqs
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-htoDjs",
                                            "isStatic": false,
                                            "lastClassName": "bNWaiC",
=======
                                            "componentId": "sc-gzVnrw",
                                            "isStatic": false,
                                            "lastClassName": "cvDevI",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-htoDjs",
=======
                                          "styledComponentId": "sc-gzVnrw",
>>>>>>> already_done
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
<<<<<<< HEAD
                                        className="sc-htoDjs bNWaiC"
                                      >
                                        Requirements
=======
                                        className="sc-gzVnrw cvDevI"
                                      >
                                        Courses Already Done
>>>>>>> already_done
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
<<<<<<< HEAD
<<<<<<< HEAD
                            in={false}
=======
                            in={true}
>>>>>>> already_done
=======
                            in={false}
>>>>>>> fix_remaining_reqs
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
<<<<<<< HEAD
<<<<<<< HEAD
                              in={false}
=======
                              in={true}
>>>>>>> already_done
=======
                              in={false}
>>>>>>> fix_remaining_reqs
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
<<<<<<< HEAD
<<<<<<< HEAD
                                className="collapse"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse card-body"
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-hSdWYo",
                                            "isStatic": false,
                                            "lastClassName": "beBuDI",
                                            "rules": Array [
                                              "
  padding: 4px;
  margin-bottom: 4px;
  font-family: inherit;
  text-align: left;
  color: inherit;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-hSdWYo",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-hSdWYo beBuDI"
                                      >
                                        <Requirements
                                          degree_reqs={
                                            Array [
                                              Object {
                                                "filter_type": "GenEd",
                                                "units": 12,
                                              },
                                              Object {
                                                "filter_type": "FreeElective",
                                                "units": 36,
                                              },
                                            ]
                                          }
                                        >
                                          <div>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-hMqMXs",
                                                      "isStatic": false,
                                                      "lastClassName": "dsQNry",
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-hMqMXs",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-hMqMXs dsQNry"
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-kEYyzF",
                                                            "isStatic": false,
                                                            "lastClassName": "bLxoCc",
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-kEYyzF",
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
                                                        className="sc-kEYyzF bLxoCc"
                                                      >
                                                        GenEd
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        12 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-hMqMXs",
                                                      "isStatic": false,
                                                      "lastClassName": "dsQNry",
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-hMqMXs",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-hMqMXs dsQNry"
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-kEYyzF",
                                                            "isStatic": false,
                                                            "lastClassName": "bLxoCc",
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-kEYyzF",
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
                                                        className="sc-kEYyzF bLxoCc"
                                                      >
                                                        FreeElective
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        36 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                          </div>
                                        </Requirements>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
=======
                                className="collapse show"
=======
                                className="collapse"
>>>>>>> fix_remaining_reqs
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse card-body"
                                >
                                  <p>
                                    Drop the courses you have already done into the box below
                                  </p>
                                  <Component
                                    courses={Array []}
                                    highlight={false}
                                    id="Done"
                                    name="Already Done"
                                    removeCourse={[MockFunction]}
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-EHOje",
                                              "isStatic": false,
                                              "lastClassName": "gIuBAP",
                                              "rules": Array [
                                                "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-EHOje",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-EHOje gIuBAP"
                                        >
                                          <styled.h5>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bZQynM",
                                                    "isStatic": false,
                                                    "lastClassName": "btxUkQ",
                                                    "rules": Array [
                                                      "
  padding: 8px;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.h5",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bZQynM",
                                                  "target": "h5",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <h5
                                                className="sc-bZQynM btxUkQ"
                                              >
                                                Already Done
                                              </h5>
                                            </StyledComponent>
                                          </styled.h5>
                                          <ConnectFunction
                                            direction="vertical"
                                            droppableId="Done"
                                            getContainerForClone={[Function]}
                                            ignoreContainerClipping={false}
                                            isCombineEnabled={false}
                                            isDropDisabled={false}
                                            mode="standard"
                                            renderClone={null}
                                            type="DEFAULT"
                                          >
                                            <Droppable
                                              direction="vertical"
                                              droppableId="Done"
                                              getContainerForClone={[Function]}
                                              ignoreContainerClipping={false}
                                              isCombineEnabled={false}
                                              isDropDisabled={false}
                                              mode="standard"
                                              placeholder={null}
                                              renderClone={null}
                                              shouldAnimatePlaceholder={false}
                                              snapshot={
                                                Object {
                                                  "draggingFromThisWith": null,
                                                  "draggingOverWith": null,
                                                  "isDraggingOver": false,
                                                  "isUsingPlaceholder": false,
                                                }
                                              }
                                              type="DEFAULT"
                                              updateViewportMaxScroll={[Function]}
                                              useClone={null}
                                            >
                                              <styled.div
                                                data-rbd-droppable-context-id="3"
                                                data-rbd-droppable-id="Done"
                                                highlight={false}
                                                isDraggingOver={false}
                                              >
                                                <StyledComponent
                                                  data-rbd-droppable-context-id="3"
                                                  data-rbd-droppable-id="Done"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-htpNat",
                                                        "isStatic": false,
                                                        "lastClassName": "jgdmCx",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                          [Function],
                                                          ";
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-htpNat",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={[Function]}
                                                  highlight={false}
                                                  isDraggingOver={false}
                                                >
                                                  <div
                                                    className="sc-htpNat jgdmCx"
                                                    data-rbd-droppable-context-id="3"
                                                    data-rbd-droppable-id="Done"
                                                  >
                                                    <AnimateInOut
                                                      on={null}
                                                      shouldAnimate={false}
                                                    />
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Droppable>
                                          </ConnectFunction>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </Component>
>>>>>>> already_done
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
<<<<<<< HEAD
              </div>
            </StyledComponent>
          </styled.div>
        </InfoBar>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`Has collapsable sections can expand a section 1`] = `
<DragDropContext>
  <ErrorBoundary>
    <App
      contextId="4"
      liftInstruction="Draggable item. Ensure your screen reader is not in browse mode and then press space bar to lift."
      setCallbacks={[Function]}
    >
      <Provider
        context={
          Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": Object {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <InfoBar
          add_event={[MockFunction]}
          degree_id="3778"
          degree_name="Computing"
          degree_reqs={
            Array [
              Object {
                "filter_type": "GenEd",
                "units": 12,
              },
              Object {
                "filter_type": "FreeElective",
                "units": 36,
              },
            ]
          }
          remove_course={[MockFunction]}
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kkGfuU",
                    "isStatic": false,
                    "lastClassName": "dUkchd",
                    "rules": Array [
                      "
  &::-webkit-scrollbar {
    display: none;
  }

  padding-top: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 350px;
  max-height: 90vh;
  overflow-y: auto;
  box-sizing: content-box;
  text-align: center;
  background-color: #343a40;
  color: white;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kkGfuU",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-kkGfuU dUkchd"
              >
                <styled.h3>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iAyFgw",
                          "isStatic": false,
                          "lastClassName": "bsxapa",
                          "rules": Array [
                            "
  padding: 8px;
  margin: 0px;
  font-family: inherit;
  border-bottom: 1px solid lightgrey;
  color: inherit;
",
                          ],
                        },
                        "displayName": "styled.h3",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iAyFgw",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h3
                      className="sc-iAyFgw bsxapa"
                    >
                      Computing
                      <br />
                      3778
                    </h3>
                  </StyledComponent>
                </styled.h3>
                <InfoBarSection
                  open={true}
                  setOpen={[Function]}
                  title="Add a Course"
=======
                <InfoBarSection
                  open={false}
                  setOpen={[Function]}
                  title="Requirements"
>>>>>>> already_done
                >
                  <Styled(Card)
                    bg="dark"
                    text="white"
                  >
                    <StyledComponent
                      bg="dark"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Body": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardBody",
                            "render": [Function],
                          },
                          "Footer": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardFooter",
                            "render": [Function],
                          },
                          "Header": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardHeader",
                            "render": [Function],
                          },
                          "Img": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": Object {
                              "variant": null,
                            },
                            "displayName": "CardImg",
                            "render": [Function],
                          },
                          "ImgOverlay": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardImgOverlay",
                            "render": [Function],
                          },
                          "Link": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardLink",
                            "render": [Function],
                          },
                          "Subtitle": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardSubtitle",
                            "render": [Function],
                          },
                          "Text": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardText",
                            "render": [Function],
                          },
                          "Title": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardTitle",
                            "render": [Function],
                          },
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "hJxOZJ",
=======
                            "componentId": "sc-htoDjs",
                            "isStatic": false,
                            "lastClassName": "keqScR",
>>>>>>> already_done
                            "rules": Array [
                              "
",
                            ],
                          },
                          "displayName": "Styled(Card)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
<<<<<<< HEAD
                          "styledComponentId": "sc-dnqmqq",
=======
                          "styledComponentId": "sc-htoDjs",
>>>>>>> already_done
                          "target": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Body": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardBody",
                              "render": [Function],
                            },
                            "Footer": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardFooter",
                              "render": [Function],
                            },
                            "Header": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardHeader",
                              "render": [Function],
                            },
                            "Img": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "variant": null,
                              },
                              "displayName": "CardImg",
                              "render": [Function],
                            },
                            "ImgOverlay": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardImgOverlay",
                              "render": [Function],
                            },
                            "Link": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardLink",
                              "render": [Function],
                            },
                            "Subtitle": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardSubtitle",
                              "render": [Function],
                            },
                            "Text": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardText",
                              "render": [Function],
                            },
                            "Title": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardTitle",
                              "render": [Function],
                            },
                            "defaultProps": Object {
                              "body": false,
                            },
                            "displayName": "Card",
                            "render": [Function],
                          },
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      text="white"
                    >
                      <Card
                        bg="dark"
                        body={false}
<<<<<<< HEAD
                        className="sc-dnqmqq hJxOZJ"
                        text="white"
                      >
                        <div
                          className="sc-dnqmqq hJxOZJ card bg-dark text-white"
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={true}
=======
                        className="sc-htoDjs keqScR"
                        text="white"
                      >
                        <div
                          className="sc-htoDjs keqScR card bg-dark text-white"
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={false}
>>>>>>> already_done
                            onClick={[Function]}
                          >
                            <StyledComponent
                              aria-controls="collapse-add-course"
<<<<<<< HEAD
                              aria-expanded={true}
=======
                              aria-expanded={false}
>>>>>>> already_done
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                    "componentId": "sc-iwsKbI",
                                    "isStatic": false,
                                    "lastClassName": "fypTFz",
=======
                                    "componentId": "sc-dnqmqq",
                                    "isStatic": false,
                                    "lastClassName": "fftazU",
>>>>>>> already_done
                                    "rules": Array [
                                      "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                    ],
                                  },
                                  "displayName": "Styled(CardHeader)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
<<<<<<< HEAD
                                  "styledComponentId": "sc-iwsKbI",
=======
                                  "styledComponentId": "sc-dnqmqq",
>>>>>>> already_done
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": undefined,
                                    "displayName": "CardHeader",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <CardHeader
                                aria-controls="collapse-add-course"
<<<<<<< HEAD
                                aria-expanded={true}
                                className="sc-iwsKbI fypTFz"
=======
                                aria-expanded={false}
                                className="sc-dnqmqq fftazU"
>>>>>>> already_done
                                onClick={[Function]}
                              >
                                <div
                                  aria-controls="collapse-add-course"
<<<<<<< HEAD
                                  aria-expanded={true}
                                  className="sc-iwsKbI fypTFz card-header"
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-down"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-down"
=======
                                  aria-expanded={false}
                                  className="sc-dnqmqq fftazU card-header"
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-right"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-right"
>>>>>>> already_done
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-gZMcBi",
                                            "isStatic": false,
                                            "lastClassName": "dKgYPz",
=======
                                            "componentId": "sc-iwsKbI",
                                            "isStatic": false,
                                            "lastClassName": "LdBUN",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-gZMcBi",
=======
                                          "styledComponentId": "sc-iwsKbI",
>>>>>>> already_done
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
<<<<<<< HEAD
                                        className="sc-gZMcBi dKgYPz fa fa-chevron-down"
=======
                                        className="sc-iwsKbI LdBUN fa fa-chevron-right"
>>>>>>> already_done
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-htoDjs",
                                            "isStatic": false,
                                            "lastClassName": "bNWaiC",
=======
                                            "componentId": "sc-gzVnrw",
                                            "isStatic": false,
                                            "lastClassName": "cvDevI",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-htoDjs",
=======
                                          "styledComponentId": "sc-gzVnrw",
>>>>>>> already_done
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
<<<<<<< HEAD
                                        className="sc-htoDjs bNWaiC"
                                      >
                                        Add a Course
=======
                                        className="sc-gzVnrw cvDevI"
                                      >
                                        Requirements
>>>>>>> already_done
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
<<<<<<< HEAD
                            in={true}
=======
                            in={false}
>>>>>>> already_done
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
<<<<<<< HEAD
                              in={true}
=======
                              in={false}
>>>>>>> already_done
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
<<<<<<< HEAD
                                className="collapse show"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse show card-body"
                                >
                                  <p>
                                    Search for a course and click on it. Then drag the course into your timeline from the 
                                    <b>
                                      Add
                                    </b>
                                     box.
                                  </p>
                                  <CourseDropBox
                                    remove_course={[MockFunction]}
                                    type="Add"
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-EHOje",
                                              "isStatic": false,
                                              "lastClassName": "gIuBAP",
                                              "rules": Array [
                                                "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-EHOje",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-EHOje gIuBAP"
                                        >
                                          <styled.h5>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bZQynM",
                                                    "isStatic": false,
                                                    "lastClassName": "btxUkQ",
                                                    "rules": Array [
                                                      "
  padding: 8px;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.h5",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bZQynM",
                                                  "target": "h5",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <h5
                                                className="sc-bZQynM btxUkQ"
                                              >
                                                Add
                                              </h5>
                                            </StyledComponent>
                                          </styled.h5>
                                          <ConnectFunction
                                            direction="vertical"
                                            droppableId="Add"
                                            getContainerForClone={[Function]}
                                            ignoreContainerClipping={false}
                                            isCombineEnabled={false}
                                            isDropDisabled={false}
                                            mode="standard"
                                            renderClone={null}
                                            type="DEFAULT"
                                          >
                                            <Droppable
                                              direction="vertical"
                                              droppableId="Add"
                                              getContainerForClone={[Function]}
                                              ignoreContainerClipping={false}
                                              isCombineEnabled={false}
                                              isDropDisabled={false}
                                              mode="standard"
                                              placeholder={null}
                                              renderClone={null}
                                              shouldAnimatePlaceholder={false}
                                              snapshot={
                                                Object {
                                                  "draggingFromThisWith": null,
                                                  "draggingOverWith": null,
                                                  "isDraggingOver": false,
                                                  "isUsingPlaceholder": false,
                                                }
                                              }
                                              type="DEFAULT"
                                              updateViewportMaxScroll={[Function]}
                                              useClone={null}
                                            >
                                              <styled.div
                                                data-rbd-droppable-context-id="4"
                                                data-rbd-droppable-id="Add"
                                              >
                                                <StyledComponent
                                                  data-rbd-droppable-context-id="4"
                                                  data-rbd-droppable-id="Add"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-gzVnrw",
                                                        "isStatic": false,
                                                        "lastClassName": "hQQdYy",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  flex-grow: 1;
  min-height: 50px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-gzVnrw",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={[Function]}
                                                >
                                                  <div
                                                    className="sc-gzVnrw hQQdYy"
                                                    data-rbd-droppable-context-id="4"
                                                    data-rbd-droppable-id="Add"
                                                  >
                                                    <AnimateInOut
                                                      on={null}
                                                      shouldAnimate={false}
                                                    />
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Droppable>
                                          </ConnectFunction>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </CourseDropBox>
                                  <SearchCourses
                                    add_event={[MockFunction]}
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-jKJlTe",
                                              "isStatic": false,
                                              "lastClassName": "BsXjl",
                                              "rules": Array [
                                                "
  padding: 3px;
  margin: 0;
  text-align: center;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-jKJlTe",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-jKJlTe BsXjl"
                                        >
                                          <form>
                                            <Styled(styled.input)
                                              onChange={[Function]}
                                              placeholder="Search for a course..."
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-eNQAEJ",
                                                      "isStatic": false,
                                                      "lastClassName": "fmHDKE",
                                                      "rules": Array [
                                                        "
=======
                                className="collapse"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse card-body"
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-iAyFgw",
                                            "isStatic": false,
                                            "lastClassName": "nKbrW",
                                            "rules": Array [
                                              "
  padding: 4px;
  margin-bottom: 4px;
  font-family: inherit;
  text-align: left;
  color: inherit;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-iAyFgw",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-iAyFgw nKbrW"
                                      >
                                        <Requirements
                                          degree_reqs={
                                            Array [
                                              Object {
                                                "filter_type": "GenEd",
                                                "units": 12,
                                              },
                                              Object {
                                                "filter_type": "FreeElective",
                                                "units": 36,
                                              },
                                            ]
                                          }
                                        >
                                          <div>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-eNQAEJ",
                                                      "isStatic": false,
                                                      "lastClassName": "jkKDHZ",
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-eNQAEJ",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-eNQAEJ jkKDHZ"
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-hMqMXs",
                                                            "isStatic": false,
                                                            "lastClassName": "kgHsvQ",
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-hMqMXs",
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
                                                        className="sc-hMqMXs kgHsvQ"
                                                      >
                                                        GenEd
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        12 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-eNQAEJ",
                                                      "isStatic": false,
                                                      "lastClassName": "jkKDHZ",
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-eNQAEJ",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-eNQAEJ jkKDHZ"
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-hMqMXs",
                                                            "isStatic": false,
                                                            "lastClassName": "kgHsvQ",
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-hMqMXs",
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
                                                        className="sc-hMqMXs kgHsvQ"
                                                      >
                                                        FreeElective
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        36 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                          </div>
                                        </Requirements>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
              </div>
            </StyledComponent>
          </styled.div>
        </InfoBar>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;
>>>>>>> already_done

exports[`Has collapsable sections can expand a section 1`] = `
<DragDropContext>
  <ErrorBoundary>
    <App
      contextId="4"
      liftInstruction="Draggable item. Ensure your screen reader is not in browse mode and then press space bar to lift."
      setCallbacks={[Function]}
    >
      <Provider
        context={
          Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": Object {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <InfoBar
          add_event={[MockFunction]}
          degree_id="3778"
          degree_name="Computing"
          degree_reqs={
            Array [
              Object {
                "filter_type": "GenEd",
                "units": 12,
              },
              Object {
                "filter_type": "FreeElective",
                "units": 36,
              },
            ]
          }
          done_courses={Array []}
          remove_course={[MockFunction]}
          standby_course={true}
          standby_courses={Array []}
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-kEYyzF",
                    "isStatic": false,
                    "lastClassName": "zzhEK",
                    "rules": Array [
                      "
  &::-webkit-scrollbar {
    display: none;
  }
<<<<<<< HEAD
  box-shadow: 10px 10px grey;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  padding: 1% 4%;
  margin-bottom: 2%;
  transition: background-colour .2s ease-in;
  font-size: 30px;
  line-height: 18px;
  background-color: transparent;
  background-image: url(\\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\");
  background-repeat: no-repeat;
  background-size: 40px 40px;
  background-position: 95% center;

  border-radius: 50px;
  border: 1px solid #575756;
",
                                                        "

&::placeholder {
  color: rgba(255, 255, 255, 0.75);
}
  width: 95%;
  padding: 12px 24px;
  margin-bottom: 1%;

  font-size: 14px;
  line-height: 18px;
  font-color: white;
=======
>>>>>>> already_done

  padding-top: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 350px;
  max-height: 90vh;
  overflow-y: auto;
  box-sizing: content-box;
  text-align: center;
  background-color: #343a40;
  color: white;
",
<<<<<<< HEAD
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.input)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kpOJdX",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-eNQAEJ",
                                                    "target": "input",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={
                                                  Object {
                                                    "current": <input
                                                      class="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                      placeholder="Search for a course..."
                                                    />,
                                                  }
                                                }
                                                onChange={[Function]}
                                                placeholder="Search for a course..."
                                              >
                                                <input
                                                  className="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                  onChange={[Function]}
                                                  placeholder="Search for a course..."
                                                />
                                              </StyledComponent>
                                            </Styled(styled.input)>
                                          </form>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </SearchCourses>
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
                <InfoBarSection
                  open={true}
                  setOpen={[Function]}
                  title="Requirements"
=======
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kEYyzF",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-kEYyzF zzhEK"
              >
                <styled.h3>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kkGfuU",
                          "isStatic": false,
                          "lastClassName": "jKNyZI",
                          "rules": Array [
                            "
  padding: 8px;
  margin: 0px;
  font-family: inherit;
  border-bottom: 1px solid lightgrey;
  color: inherit;
",
                          ],
                        },
                        "displayName": "styled.h3",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kkGfuU",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h3
                      className="sc-kkGfuU jKNyZI"
                    >
                      Computing
                      <br />
                      3778
                    </h3>
                  </StyledComponent>
                </styled.h3>
                <InfoBarSection
                  open={true}
                  setOpen={[Function]}
                  title="Add a Course"
>>>>>>> already_done
                >
                  <Styled(Card)
                    bg="dark"
                    text="white"
                  >
                    <StyledComponent
                      bg="dark"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Body": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardBody",
                            "render": [Function],
                          },
                          "Footer": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardFooter",
                            "render": [Function],
                          },
                          "Header": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardHeader",
                            "render": [Function],
                          },
                          "Img": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": Object {
                              "variant": null,
                            },
                            "displayName": "CardImg",
                            "render": [Function],
                          },
                          "ImgOverlay": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardImgOverlay",
                            "render": [Function],
                          },
                          "Link": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardLink",
                            "render": [Function],
                          },
                          "Subtitle": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardSubtitle",
                            "render": [Function],
                          },
                          "Text": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardText",
                            "render": [Function],
                          },
                          "Title": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardTitle",
                            "render": [Function],
                          },
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "hJxOZJ",
=======
                            "componentId": "sc-htoDjs",
                            "isStatic": false,
                            "lastClassName": "keqScR",
>>>>>>> already_done
                            "rules": Array [
                              "
",
                            ],
                          },
                          "displayName": "Styled(Card)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
<<<<<<< HEAD
                          "styledComponentId": "sc-dnqmqq",
=======
                          "styledComponentId": "sc-htoDjs",
>>>>>>> already_done
                          "target": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Body": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardBody",
                              "render": [Function],
                            },
                            "Footer": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardFooter",
                              "render": [Function],
                            },
                            "Header": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardHeader",
                              "render": [Function],
                            },
                            "Img": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "variant": null,
                              },
                              "displayName": "CardImg",
                              "render": [Function],
                            },
                            "ImgOverlay": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardImgOverlay",
                              "render": [Function],
                            },
                            "Link": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardLink",
                              "render": [Function],
                            },
                            "Subtitle": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardSubtitle",
                              "render": [Function],
                            },
                            "Text": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardText",
                              "render": [Function],
                            },
                            "Title": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardTitle",
                              "render": [Function],
                            },
                            "defaultProps": Object {
                              "body": false,
                            },
                            "displayName": "Card",
                            "render": [Function],
                          },
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      text="white"
                    >
                      <Card
                        bg="dark"
                        body={false}
<<<<<<< HEAD
                        className="sc-dnqmqq hJxOZJ"
                        text="white"
                      >
                        <div
                          className="sc-dnqmqq hJxOZJ card bg-dark text-white"
=======
                        className="sc-htoDjs keqScR"
                        text="white"
                      >
                        <div
                          className="sc-htoDjs keqScR card bg-dark text-white"
>>>>>>> already_done
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={true}
                            onClick={[Function]}
                          >
                            <StyledComponent
                              aria-controls="collapse-add-course"
                              aria-expanded={true}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                    "componentId": "sc-iwsKbI",
                                    "isStatic": false,
                                    "lastClassName": "fypTFz",
=======
                                    "componentId": "sc-dnqmqq",
                                    "isStatic": false,
                                    "lastClassName": "fftazU",
>>>>>>> already_done
                                    "rules": Array [
                                      "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                    ],
                                  },
                                  "displayName": "Styled(CardHeader)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
<<<<<<< HEAD
                                  "styledComponentId": "sc-iwsKbI",
=======
                                  "styledComponentId": "sc-dnqmqq",
>>>>>>> already_done
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": undefined,
                                    "displayName": "CardHeader",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <CardHeader
                                aria-controls="collapse-add-course"
                                aria-expanded={true}
<<<<<<< HEAD
                                className="sc-iwsKbI fypTFz"
=======
                                className="sc-dnqmqq fftazU"
>>>>>>> already_done
                                onClick={[Function]}
                              >
                                <div
                                  aria-controls="collapse-add-course"
                                  aria-expanded={true}
<<<<<<< HEAD
                                  className="sc-iwsKbI fypTFz card-header"
=======
                                  className="sc-dnqmqq fftazU card-header"
>>>>>>> already_done
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-down"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-down"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-gZMcBi",
                                            "isStatic": false,
                                            "lastClassName": "dKgYPz",
=======
                                            "componentId": "sc-iwsKbI",
                                            "isStatic": false,
                                            "lastClassName": "LdBUN",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-gZMcBi",
=======
                                          "styledComponentId": "sc-iwsKbI",
>>>>>>> already_done
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
<<<<<<< HEAD
                                        className="sc-gZMcBi dKgYPz fa fa-chevron-down"
=======
                                        className="sc-iwsKbI LdBUN fa fa-chevron-down"
>>>>>>> already_done
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-htoDjs",
                                            "isStatic": false,
                                            "lastClassName": "bNWaiC",
=======
                                            "componentId": "sc-gzVnrw",
                                            "isStatic": false,
                                            "lastClassName": "cvDevI",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-htoDjs",
=======
                                          "styledComponentId": "sc-gzVnrw",
>>>>>>> already_done
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
<<<<<<< HEAD
                                        className="sc-htoDjs bNWaiC"
                                      >
                                        Requirements
=======
                                        className="sc-gzVnrw cvDevI"
                                      >
                                        Add a Course
>>>>>>> already_done
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={true}
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={true}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
<<<<<<< HEAD
                                className="collapsing"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapsing card-body"
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-hSdWYo",
                                            "isStatic": false,
                                            "lastClassName": "beBuDI",
                                            "rules": Array [
                                              "
  padding: 4px;
  margin-bottom: 4px;
  font-family: inherit;
  text-align: left;
  color: inherit;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-hSdWYo",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-hSdWYo beBuDI"
                                      >
                                        <Requirements
                                          degree_reqs={
                                            Array [
                                              Object {
                                                "filter_type": "GenEd",
                                                "units": 12,
                                              },
                                              Object {
                                                "filter_type": "FreeElective",
                                                "units": 36,
                                              },
                                            ]
                                          }
                                        >
                                          <div>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-hMqMXs",
                                                      "isStatic": false,
                                                      "lastClassName": "dsQNry",
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-hMqMXs",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-hMqMXs dsQNry"
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-kEYyzF",
                                                            "isStatic": false,
                                                            "lastClassName": "bLxoCc",
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-kEYyzF",
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
                                                        className="sc-kEYyzF bLxoCc"
                                                      >
                                                        GenEd
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        12 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-hMqMXs",
                                                      "isStatic": false,
                                                      "lastClassName": "dsQNry",
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-hMqMXs",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-hMqMXs dsQNry"
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-kEYyzF",
                                                            "isStatic": false,
                                                            "lastClassName": "bLxoCc",
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-kEYyzF",
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
                                                        className="sc-kEYyzF bLxoCc"
                                                      >
                                                        FreeElective
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        36 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                          </div>
                                        </Requirements>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
              </div>
            </StyledComponent>
          </styled.div>
        </InfoBar>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;
=======
                                className="collapse show"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse show card-body"
                                >
                                  <p>
                                    Search for a course and click on it. Then drag the course into your timeline from the 
                                    <b>
                                      Tray
                                    </b>
                                    .
                                  </p>
                                  <Component
                                    courses={Array []}
                                    highlight={false}
                                    id="Add"
                                    name="Tray"
                                    removeCourse={[MockFunction]}
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-EHOje",
                                              "isStatic": false,
                                              "lastClassName": "gIuBAP",
                                              "rules": Array [
                                                "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-EHOje",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-EHOje gIuBAP"
                                        >
                                          <styled.h5>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bZQynM",
                                                    "isStatic": false,
                                                    "lastClassName": "btxUkQ",
                                                    "rules": Array [
                                                      "
  padding: 8px;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.h5",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bZQynM",
                                                  "target": "h5",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <h5
                                                className="sc-bZQynM btxUkQ"
                                              >
                                                Tray
                                              </h5>
                                            </StyledComponent>
                                          </styled.h5>
                                          <ConnectFunction
                                            direction="vertical"
                                            droppableId="Add"
                                            getContainerForClone={[Function]}
                                            ignoreContainerClipping={false}
                                            isCombineEnabled={false}
                                            isDropDisabled={false}
                                            mode="standard"
                                            renderClone={null}
                                            type="DEFAULT"
                                          >
                                            <Droppable
                                              direction="vertical"
                                              droppableId="Add"
                                              getContainerForClone={[Function]}
                                              ignoreContainerClipping={false}
                                              isCombineEnabled={false}
                                              isDropDisabled={false}
                                              mode="standard"
                                              placeholder={null}
                                              renderClone={null}
                                              shouldAnimatePlaceholder={false}
                                              snapshot={
                                                Object {
                                                  "draggingFromThisWith": null,
                                                  "draggingOverWith": null,
                                                  "isDraggingOver": false,
                                                  "isUsingPlaceholder": false,
                                                }
                                              }
                                              type="DEFAULT"
                                              updateViewportMaxScroll={[Function]}
                                              useClone={null}
                                            >
                                              <styled.div
                                                data-rbd-droppable-context-id="4"
                                                data-rbd-droppable-id="Add"
                                                highlight={false}
                                                isDraggingOver={false}
                                              >
                                                <StyledComponent
                                                  data-rbd-droppable-context-id="4"
                                                  data-rbd-droppable-id="Add"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-htpNat",
                                                        "isStatic": false,
                                                        "lastClassName": "jgdmCx",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                          [Function],
                                                          ";
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-htpNat",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={[Function]}
                                                  highlight={false}
                                                  isDraggingOver={false}
                                                >
                                                  <div
                                                    className="sc-htpNat jgdmCx"
                                                    data-rbd-droppable-context-id="4"
                                                    data-rbd-droppable-id="Add"
                                                  >
                                                    <AnimateInOut
                                                      on={null}
                                                      shouldAnimate={false}
                                                    />
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Droppable>
                                          </ConnectFunction>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </Component>
                                  <SearchCourses
                                    add_event={[MockFunction]}
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-ckVGcZ",
                                              "isStatic": false,
                                              "lastClassName": "fcibBt",
                                              "rules": Array [
                                                "
  padding: 3px;
  margin: 0;
  text-align: center;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-ckVGcZ",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-ckVGcZ fcibBt"
                                        >
                                          <form>
                                            <Styled(styled.input)
                                              onChange={[Function]}
                                              placeholder="Search for a course..."
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-jKJlTe",
                                                      "isStatic": false,
                                                      "lastClassName": "iZEjBx",
                                                      "rules": Array [
                                                        "
>>>>>>> already_done

  &:focus {
    outline: none;
    &::placeholder {
      color: transparent;
    }
  }
  box-shadow: 10px 10px grey;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  padding: 1% 4%;
  margin-bottom: 2%;
  transition: background-colour .2s ease-in;
  font-size: 30px;
  line-height: 18px;
  background-color: transparent;
  background-image: url(\\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\");
  background-repeat: no-repeat;
  background-size: 40px 40px;
  background-position: 95% center;

  border-radius: 50px;
  border: 1px solid #575756;
",
                                                        "

&::placeholder {
  color: rgba(255, 255, 255, 0.75);
}
  width: 95%;
  padding: 12px 24px;
  margin-bottom: 1%;

  font-size: 14px;
  line-height: 18px;
  font-color: white;

  color: white;
  background-size: 18px 18px;
  background-position: 95% center;
  border: 1px solid white;

  box-shadow: 0px 0px;
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.input)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kGXeez",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-jKJlTe",
                                                    "target": "input",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={
                                                  Object {
                                                    "current": <input
                                                      class="sc-kGXeez sc-jKJlTe iZEjBx"
                                                      placeholder="Search for a course..."
                                                    />,
                                                  }
                                                }
                                                onChange={[Function]}
                                                placeholder="Search for a course..."
                                              >
                                                <input
                                                  className="sc-kGXeez sc-jKJlTe iZEjBx"
                                                  onChange={[Function]}
                                                  placeholder="Search for a course..."
                                                />
                                              </StyledComponent>
                                            </Styled(styled.input)>
                                          </form>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </SearchCourses>
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
                <InfoBarSection
                  open={false}
                  setOpen={[Function]}
                  title="Courses Already Done"
                >
                  <Styled(Card)
                    bg="dark"
                    text="white"
                  >
                    <StyledComponent
                      bg="dark"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Body": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardBody",
                            "render": [Function],
                          },
                          "Footer": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardFooter",
                            "render": [Function],
                          },
                          "Header": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardHeader",
                            "render": [Function],
                          },
                          "Img": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": Object {
                              "variant": null,
                            },
                            "displayName": "CardImg",
                            "render": [Function],
                          },
                          "ImgOverlay": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardImgOverlay",
                            "render": [Function],
                          },
                          "Link": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardLink",
                            "render": [Function],
                          },
                          "Subtitle": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardSubtitle",
                            "render": [Function],
                          },
                          "Text": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardText",
                            "render": [Function],
                          },
                          "Title": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardTitle",
                            "render": [Function],
                          },
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-htoDjs",
                            "isStatic": false,
                            "lastClassName": "keqScR",
                            "rules": Array [
                              "
",
                            ],
                          },
                          "displayName": "Styled(Card)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-htoDjs",
                          "target": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Body": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardBody",
                              "render": [Function],
                            },
                            "Footer": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardFooter",
                              "render": [Function],
                            },
                            "Header": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardHeader",
                              "render": [Function],
                            },
                            "Img": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "variant": null,
                              },
                              "displayName": "CardImg",
                              "render": [Function],
                            },
                            "ImgOverlay": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardImgOverlay",
                              "render": [Function],
                            },
                            "Link": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardLink",
                              "render": [Function],
                            },
                            "Subtitle": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardSubtitle",
                              "render": [Function],
                            },
                            "Text": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardText",
                              "render": [Function],
                            },
                            "Title": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardTitle",
                              "render": [Function],
                            },
                            "defaultProps": Object {
                              "body": false,
                            },
                            "displayName": "Card",
                            "render": [Function],
                          },
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      text="white"
                    >
                      <Card
                        bg="dark"
                        body={false}
                        className="sc-htoDjs keqScR"
                        text="white"
                      >
                        <div
                          className="sc-htoDjs keqScR card bg-dark text-white"
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={false}
                            onClick={[Function]}
                          >
                            <StyledComponent
                              aria-controls="collapse-add-course"
                              aria-expanded={false}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-dnqmqq",
                                    "isStatic": false,
                                    "lastClassName": "fftazU",
                                    "rules": Array [
                                      "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                    ],
                                  },
                                  "displayName": "Styled(CardHeader)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-dnqmqq",
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": undefined,
                                    "displayName": "CardHeader",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <CardHeader
                                aria-controls="collapse-add-course"
                                aria-expanded={false}
                                className="sc-dnqmqq fftazU"
                                onClick={[Function]}
                              >
                                <div
                                  aria-controls="collapse-add-course"
                                  aria-expanded={false}
                                  className="sc-dnqmqq fftazU card-header"
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-right"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-right"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-iwsKbI",
                                            "isStatic": false,
                                            "lastClassName": "LdBUN",
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-iwsKbI",
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
                                        className="sc-iwsKbI LdBUN fa fa-chevron-right"
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-gzVnrw",
                                            "isStatic": false,
                                            "lastClassName": "cvDevI",
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-gzVnrw",
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
                                        className="sc-gzVnrw cvDevI"
                                      >
                                        Courses Already Done
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
                                className="collapse"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse card-body"
                                >
                                  <p>
                                    Drop the courses you have already done into the box below
                                  </p>
                                  <Component
                                    courses={Array []}
                                    highlight={false}
                                    id="Done"
                                    name="Already Done"
                                    removeCourse={[MockFunction]}
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-EHOje",
                                              "isStatic": false,
                                              "lastClassName": "gIuBAP",
                                              "rules": Array [
                                                "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-EHOje",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-EHOje gIuBAP"
                                        >
                                          <styled.h5>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bZQynM",
                                                    "isStatic": false,
                                                    "lastClassName": "btxUkQ",
                                                    "rules": Array [
                                                      "
  padding: 8px;
",
                                                    ],
                                                  },
                                                  "displayName": "styled.h5",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bZQynM",
                                                  "target": "h5",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <h5
                                                className="sc-bZQynM btxUkQ"
                                              >
                                                Already Done
                                              </h5>
                                            </StyledComponent>
                                          </styled.h5>
                                          <ConnectFunction
                                            direction="vertical"
                                            droppableId="Done"
                                            getContainerForClone={[Function]}
                                            ignoreContainerClipping={false}
                                            isCombineEnabled={false}
                                            isDropDisabled={false}
                                            mode="standard"
                                            renderClone={null}
                                            type="DEFAULT"
                                          >
                                            <Droppable
                                              direction="vertical"
                                              droppableId="Done"
                                              getContainerForClone={[Function]}
                                              ignoreContainerClipping={false}
                                              isCombineEnabled={false}
                                              isDropDisabled={false}
                                              mode="standard"
                                              placeholder={null}
                                              renderClone={null}
                                              shouldAnimatePlaceholder={false}
                                              snapshot={
                                                Object {
                                                  "draggingFromThisWith": null,
                                                  "draggingOverWith": null,
                                                  "isDraggingOver": false,
                                                  "isUsingPlaceholder": false,
                                                }
                                              }
                                              type="DEFAULT"
                                              updateViewportMaxScroll={[Function]}
                                              useClone={null}
                                            >
                                              <styled.div
                                                data-rbd-droppable-context-id="4"
                                                data-rbd-droppable-id="Done"
                                                highlight={false}
                                                isDraggingOver={false}
                                              >
                                                <StyledComponent
                                                  data-rbd-droppable-context-id="4"
                                                  data-rbd-droppable-id="Done"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-htpNat",
                                                        "isStatic": false,
                                                        "lastClassName": "jgdmCx",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                          [Function],
                                                          ";
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-htpNat",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={[Function]}
                                                  highlight={false}
                                                  isDraggingOver={false}
                                                >
                                                  <div
                                                    className="sc-htpNat jgdmCx"
                                                    data-rbd-droppable-context-id="4"
                                                    data-rbd-droppable-id="Done"
                                                  >
                                                    <AnimateInOut
                                                      on={null}
                                                      shouldAnimate={false}
                                                    />
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Droppable>
                                          </ConnectFunction>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </Component>
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
                <InfoBarSection
                  open={true}
                  setOpen={[Function]}
                  title="Requirements"
                >
                  <Styled(Card)
                    bg="dark"
                    text="white"
                  >
                    <StyledComponent
                      bg="dark"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Body": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardBody",
                            "render": [Function],
                          },
                          "Footer": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardFooter",
                            "render": [Function],
                          },
                          "Header": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardHeader",
                            "render": [Function],
                          },
                          "Img": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": Object {
                              "variant": null,
                            },
                            "displayName": "CardImg",
                            "render": [Function],
                          },
                          "ImgOverlay": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardImgOverlay",
                            "render": [Function],
                          },
                          "Link": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardLink",
                            "render": [Function],
                          },
                          "Subtitle": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardSubtitle",
                            "render": [Function],
                          },
                          "Text": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardText",
                            "render": [Function],
                          },
                          "Title": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardTitle",
                            "render": [Function],
                          },
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-htoDjs",
                            "isStatic": false,
                            "lastClassName": "keqScR",
                            "rules": Array [
                              "
",
                            ],
                          },
                          "displayName": "Styled(Card)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-htoDjs",
                          "target": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Body": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardBody",
                              "render": [Function],
                            },
                            "Footer": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardFooter",
                              "render": [Function],
                            },
                            "Header": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardHeader",
                              "render": [Function],
                            },
                            "Img": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "variant": null,
                              },
                              "displayName": "CardImg",
                              "render": [Function],
                            },
                            "ImgOverlay": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardImgOverlay",
                              "render": [Function],
                            },
                            "Link": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardLink",
                              "render": [Function],
                            },
                            "Subtitle": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardSubtitle",
                              "render": [Function],
                            },
                            "Text": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardText",
                              "render": [Function],
                            },
                            "Title": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardTitle",
                              "render": [Function],
                            },
                            "defaultProps": Object {
                              "body": false,
                            },
                            "displayName": "Card",
                            "render": [Function],
                          },
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      text="white"
                    >
                      <Card
                        bg="dark"
                        body={false}
                        className="sc-htoDjs keqScR"
                        text="white"
                      >
                        <div
                          className="sc-htoDjs keqScR card bg-dark text-white"
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={true}
                            onClick={[Function]}
                          >
                            <StyledComponent
                              aria-controls="collapse-add-course"
                              aria-expanded={true}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-dnqmqq",
                                    "isStatic": false,
                                    "lastClassName": "fftazU",
                                    "rules": Array [
                                      "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                    ],
                                  },
                                  "displayName": "Styled(CardHeader)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-dnqmqq",
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": undefined,
                                    "displayName": "CardHeader",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <CardHeader
                                aria-controls="collapse-add-course"
                                aria-expanded={true}
                                className="sc-dnqmqq fftazU"
                                onClick={[Function]}
                              >
                                <div
                                  aria-controls="collapse-add-course"
                                  aria-expanded={true}
                                  className="sc-dnqmqq fftazU card-header"
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-down"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-down"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-iwsKbI",
                                            "isStatic": false,
                                            "lastClassName": "LdBUN",
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-iwsKbI",
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
                                        className="sc-iwsKbI LdBUN fa fa-chevron-down"
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-gzVnrw",
                                            "isStatic": false,
                                            "lastClassName": "cvDevI",
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-gzVnrw",
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
                                        className="sc-gzVnrw cvDevI"
                                      >
                                        Requirements
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={true}
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={true}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
                                className="collapse show"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse show card-body"
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-iAyFgw",
                                            "isStatic": false,
                                            "lastClassName": "nKbrW",
                                            "rules": Array [
                                              "
  padding: 4px;
  margin-bottom: 4px;
  font-family: inherit;
  text-align: left;
  color: inherit;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-iAyFgw",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
                                        className="sc-iAyFgw nKbrW"
                                      >
                                        <Requirements
                                          degree_reqs={
                                            Array [
                                              Object {
                                                "filter_type": "GenEd",
                                                "units": 12,
                                              },
                                              Object {
                                                "filter_type": "FreeElective",
                                                "units": 36,
                                              },
                                            ]
                                          }
                                        >
                                          <div>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-eNQAEJ",
                                                      "isStatic": false,
                                                      "lastClassName": "jkKDHZ",
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-eNQAEJ",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-eNQAEJ jkKDHZ"
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-hMqMXs",
                                                            "isStatic": false,
                                                            "lastClassName": "kgHsvQ",
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-hMqMXs",
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
                                                        className="sc-hMqMXs kgHsvQ"
                                                      >
                                                        GenEd
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        12 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-eNQAEJ",
                                                      "isStatic": false,
                                                      "lastClassName": "jkKDHZ",
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-eNQAEJ",
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
                                                  className="sc-eNQAEJ jkKDHZ"
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-hMqMXs",
                                                            "isStatic": false,
                                                            "lastClassName": "kgHsvQ",
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-hMqMXs",
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
                                                        className="sc-hMqMXs kgHsvQ"
                                                      >
                                                        FreeElective
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        36 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                          </div>
                                        </Requirements>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
              </div>
            </StyledComponent>
          </styled.div>
        </InfoBar>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`Render degree planning timeline view adds a course to the Add box after search 1`] = `
<Timeline
  match={
    Object {
      "params": Object {
        "degree": "3778",
        "reqs": undefined,
      },
    }
  }
>
  <div>
    <Navbar
      bg="dark"
      collapseOnSelect={false}
      expand={true}
      id="navbar"
      variant="dark"
    >
      <nav
        className="navbar navbar-expand navbar-dark bg-dark"
        id="navbar"
      >
        <NavbarBrand
          href="/"
        >
          <a
            className="navbar-brand"
            href="/"
          >
            <span
              aria-label="book"
              role="img"
            >
              📖
            </span>
             OnCourse
          </a>
        </NavbarBrand>
        <Nav
          className="mr-auto"
          fill={false}
          justify={false}
        >
          <ForwardRef
            as="div"
            className="mr-auto navbar-nav"
            onSelect={[Function]}
          >
            <div
              className="mr-auto navbar-nav"
              onKeyDown={[Function]}
            />
          </ForwardRef>
        </Nav>
        <Styled(Button)
          id="save"
          onClick={[Function]}
          variant="outline-info"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-brqgnP",
                  "isStatic": false,
                  "lastClassName": "iBVtEW",
                  "rules": Array [
                    "
  margin: 0px 8px;
",
                  ],
                },
                "displayName": "Styled(Button)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-brqgnP",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "defaultProps": Object {
                    "active": false,
                    "disabled": false,
                    "type": "button",
                    "variant": "primary",
                  },
                  "displayName": "Button",
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="save"
            onClick={[Function]}
            variant="outline-info"
          >
            <Button
              active={false}
              className="sc-brqgnP iBVtEW"
              disabled={false}
              id="save"
              onClick={[Function]}
              type="button"
              variant="outline-info"
            >
              <button
                className="sc-brqgnP iBVtEW btn btn-outline-info"
                disabled={false}
                id="save"
                onClick={[Function]}
                type="button"
              >
                <i
                  className="fa fa-save"
                />
              </button>
            </Button>
          </StyledComponent>
        </Styled(Button)>
      </nav>
    </Navbar>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hSdWYo",
              "isStatic": false,
<<<<<<< HEAD
              "lastClassName": "cJAIbX",
=======
              "lastClassName": "dKlVwM",
>>>>>>> already_done
              "rules": Array [
                "
  display: flex;
  justify-content: center;
  margin: 0px;
  padding: 0px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-hSdWYo",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
<<<<<<< HEAD
          className="sc-eHgmQL cJAIbX"
=======
          className="sc-hSdWYo dKlVwM"
>>>>>>> already_done
        >
          <DragDropContext
            onDragEnd={[Function]}
            onDragStart={[Function]}
          >
            <ErrorBoundary>
              <App
                contextId="2"
                liftInstruction="Draggable item. Ensure your screen reader is not in browse mode and then press space bar to lift."
                onDragEnd={[Function]}
                onDragStart={[Function]}
                setCallbacks={[Function]}
              >
                <Provider
                  context={
                    Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": Object {
                        "$$typeof": Symbol(react.provider),
                        "_context": [Circular],
                      },
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    }
                  }
                  store={
                    Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(observable): [Function],
                    }
                  }
                >
                  <div>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-cvbbAY",
                              "isStatic": false,
                              "lastClassName": "cUnnLD",
                              "rules": Array [
                                "
  float: left;
  width: 70%;
  padding: 10px;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-cvbbAY",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-cvbbAY cUnnLD"
                        >
                          <div
                            id="timeline"
                          >
                            <div
                              key="2019"
                            >
                              <styled.div
                                key="2019"
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
<<<<<<< HEAD
                                        "lastClassName": "hBAvqE",
=======
                                        "lastClassName": "cBwivr",
>>>>>>> already_done
                                        "rules": Array [
                                          "
  display: flex;
  margin: 0px;
  padding: 0px;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
<<<<<<< HEAD
                                    className="sc-cvbbAY hBAvqE"
=======
                                    className="sc-eHgmQL cBwivr"
>>>>>>> already_done
                                  >
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "MATH1131",
                                            "coreqs": "",
                                            "equivalents": "DPST1013",
                                            "exclusions": "DPST1013
MATH1151
MATH1031
MATH1141
ECON2291
MATH1011
ECON1202",
                                            "name": "Mathematics 1A",
                                            "prereqs": "",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                          Object {
                                            "code": "MATH1081",
                                            "coreqs": "(DPST1013 OR MATH1131 OR MATH1141 OR MATH1151)",
                                            "equivalents": "",
                                            "exclusions": "MATH1090",
                                            "name": "Discrete Mathematics",
                                            "prereqs": "",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="1 2019"
                                      name="1 2019"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "MATH1131",
                                              "coreqs": "",
                                              "equivalents": "DPST1013",
                                              "exclusions": "DPST1013
MATH1151
MATH1031
MATH1141
ECON2291
MATH1011
ECON1202",
                                              "name": "Mathematics 1A",
                                              "prereqs": "",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                            Object {
                                              "code": "MATH1081",
                                              "coreqs": "(DPST1013 OR MATH1131 OR MATH1141 OR MATH1151)",
                                              "equivalents": "",
                                              "exclusions": "MATH1090",
                                              "name": "Discrete Mathematics",
                                              "prereqs": "",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="1 2019"
                                        name="T1 2019"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T1 2019
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="1 2019"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="1 2019"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="2"
                                                    data-rbd-droppable-id="1 2019"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="2"
                                                      data-rbd-droppable-id="1 2019"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="2"
                                                        data-rbd-droppable-id="1 2019"
                                                      >
                                                        <Course
                                                          code="MATH1131"
                                                          coreqs=""
                                                          equivalents="DPST1013"
                                                          exclusions="DPST1013
MATH1151
MATH1031
MATH1141
ECON2291
MATH1011
ECON1202"
                                                          index={0}
                                                          key="MATH1131"
                                                          name="Mathematics 1A"
                                                          prereqs=""
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="MATH1131"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="MATH1131"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="MATH1131"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="MATH1131"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                      data-rbd-drag-handle-context-id="2"
                                                                      data-rbd-drag-handle-draggable-id="MATH1131"
                                                                      data-rbd-draggable-context-id="2"
                                                                      data-rbd-draggable-id="MATH1131"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                        data-rbd-drag-handle-context-id="2"
                                                                        data-rbd-drag-handle-draggable-id="MATH1131"
                                                                        data-rbd-draggable-context-id="2"
                                                                        data-rbd-draggable-id="MATH1131"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-2"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="2"
                                                                          data-rbd-drag-handle-draggable-id="MATH1131"
                                                                          data-rbd-draggable-context-id="2"
                                                                          data-rbd-draggable-id="MATH1131"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          MATH1131
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="MATH1131"
                                                              coreqs=""
                                                              equivalents="DPST1013"
                                                              exclusions="DPST1013
MATH1151
MATH1031
MATH1141
ECON2291
MATH1011
ECON1202"
                                                              index={0}
                                                              name="Mathematics 1A"
                                                              onHide={[Function]}
                                                              prereqs=""
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <Course
                                                          code="MATH1081"
                                                          coreqs="(DPST1013 OR MATH1131 OR MATH1141 OR MATH1151)"
                                                          equivalents=""
                                                          exclusions="MATH1090"
                                                          index={1}
                                                          key="MATH1081"
                                                          name="Discrete Mathematics"
                                                          prereqs=""
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="MATH1081"
                                                              index={1}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="MATH1081"
                                                                index={1}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="MATH1081"
                                                                  index={1}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="MATH1081"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={1}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                      data-rbd-drag-handle-context-id="2"
                                                                      data-rbd-drag-handle-draggable-id="MATH1081"
                                                                      data-rbd-draggable-context-id="2"
                                                                      data-rbd-draggable-id="MATH1081"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                        data-rbd-drag-handle-context-id="2"
                                                                        data-rbd-drag-handle-draggable-id="MATH1081"
                                                                        data-rbd-draggable-context-id="2"
                                                                        data-rbd-draggable-id="MATH1081"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-2"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="2"
                                                                          data-rbd-drag-handle-draggable-id="MATH1081"
                                                                          data-rbd-draggable-context-id="2"
                                                                          data-rbd-draggable-id="MATH1081"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          MATH1081
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="MATH1081"
                                                              coreqs="(DPST1013 OR MATH1131 OR MATH1141 OR MATH1151)"
                                                              equivalents=""
                                                              exclusions="MATH1090"
                                                              index={1}
                                                              name="Discrete Mathematics"
                                                              onHide={[Function]}
                                                              prereqs=""
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "COMP1521",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "DPST1092",
                                            "name": "Computer Systems Fundamentals",
                                            "prereqs": "(COMP1911 OR COMP1917 OR COMP1511 OR DPST1091)",
                                            "terms": Array [
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                          Object {
                                            "code": "MATH1231",
                                            "coreqs": "",
                                            "equivalents": "DPST1014",
                                            "exclusions": "ECON1202
MATH1241
DPST1014",
                                            "name": "Mathematics 1B",
                                            "prereqs": "(DPST1013 OR MATH1131 OR MATH1141)",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="2 2019"
                                      name="2 2019"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "COMP1521",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "DPST1092",
                                              "name": "Computer Systems Fundamentals",
                                              "prereqs": "(COMP1911 OR COMP1917 OR COMP1511 OR DPST1091)",
                                              "terms": Array [
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                            Object {
                                              "code": "MATH1231",
                                              "coreqs": "",
                                              "equivalents": "DPST1014",
                                              "exclusions": "ECON1202
MATH1241
DPST1014",
                                              "name": "Mathematics 1B",
                                              "prereqs": "(DPST1013 OR MATH1131 OR MATH1141)",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="2 2019"
                                        name="T2 2019"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T2 2019
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="2 2019"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="2 2019"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="2"
                                                    data-rbd-droppable-id="2 2019"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="2"
                                                      data-rbd-droppable-id="2 2019"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="2"
                                                        data-rbd-droppable-id="2 2019"
                                                      >
                                                        <Course
                                                          code="COMP1521"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="DPST1092"
                                                          index={0}
                                                          key="COMP1521"
                                                          name="Computer Systems Fundamentals"
                                                          prereqs="(COMP1911 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP1521"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP1521"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP1521"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP1521"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                      data-rbd-drag-handle-context-id="2"
                                                                      data-rbd-drag-handle-draggable-id="COMP1521"
                                                                      data-rbd-draggable-context-id="2"
                                                                      data-rbd-draggable-id="COMP1521"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                        data-rbd-drag-handle-context-id="2"
                                                                        data-rbd-drag-handle-draggable-id="COMP1521"
                                                                        data-rbd-draggable-context-id="2"
                                                                        data-rbd-draggable-id="COMP1521"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-2"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="2"
                                                                          data-rbd-drag-handle-draggable-id="COMP1521"
                                                                          data-rbd-draggable-context-id="2"
                                                                          data-rbd-draggable-id="COMP1521"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP1521
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP1521"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="DPST1092"
                                                              index={0}
                                                              name="Computer Systems Fundamentals"
                                                              onHide={[Function]}
                                                              prereqs="(COMP1911 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <Course
                                                          code="MATH1231"
                                                          coreqs=""
                                                          equivalents="DPST1014"
                                                          exclusions="ECON1202
MATH1241
DPST1014"
                                                          index={1}
                                                          key="MATH1231"
                                                          name="Mathematics 1B"
                                                          prereqs="(DPST1013 OR MATH1131 OR MATH1141)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="MATH1231"
                                                              index={1}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="MATH1231"
                                                                index={1}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="MATH1231"
                                                                  index={1}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="MATH1231"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={1}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                      data-rbd-drag-handle-context-id="2"
                                                                      data-rbd-drag-handle-draggable-id="MATH1231"
                                                                      data-rbd-draggable-context-id="2"
                                                                      data-rbd-draggable-id="MATH1231"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                        data-rbd-drag-handle-context-id="2"
                                                                        data-rbd-drag-handle-draggable-id="MATH1231"
                                                                        data-rbd-draggable-context-id="2"
                                                                        data-rbd-draggable-id="MATH1231"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-2"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="2"
                                                                          data-rbd-drag-handle-draggable-id="MATH1231"
                                                                          data-rbd-draggable-context-id="2"
                                                                          data-rbd-draggable-id="MATH1231"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          MATH1231
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="MATH1231"
                                                              coreqs=""
                                                              equivalents="DPST1014"
                                                              exclusions="ECON1202
MATH1241
DPST1014"
                                                              index={1}
                                                              name="Mathematics 1B"
                                                              onHide={[Function]}
                                                              prereqs="(DPST1013 OR MATH1131 OR MATH1141)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "COMP1531",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "SENG1020
SENG1031
SENG1010",
                                            "name": "Software Engineering Fundamentals",
                                            "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                          Object {
                                            "code": "COMP2521",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "COMP1927",
                                            "name": "Data Structures and Algorithms",
                                            "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="3 2019"
                                      name="3 2019"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "COMP1531",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "SENG1020
SENG1031
SENG1010",
                                              "name": "Software Engineering Fundamentals",
                                              "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                            Object {
                                              "code": "COMP2521",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "COMP1927",
                                              "name": "Data Structures and Algorithms",
                                              "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="3 2019"
                                        name="T3 2019"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T3 2019
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="3 2019"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="3 2019"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="2"
                                                    data-rbd-droppable-id="3 2019"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="2"
                                                      data-rbd-droppable-id="3 2019"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="2"
                                                        data-rbd-droppable-id="3 2019"
                                                      >
                                                        <Course
                                                          code="COMP1531"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="SENG1020
SENG1031
SENG1010"
                                                          index={0}
                                                          key="COMP1531"
                                                          name="Software Engineering Fundamentals"
                                                          prereqs="(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP1531"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP1531"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP1531"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP1531"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                      data-rbd-drag-handle-context-id="2"
                                                                      data-rbd-drag-handle-draggable-id="COMP1531"
                                                                      data-rbd-draggable-context-id="2"
                                                                      data-rbd-draggable-id="COMP1531"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                        data-rbd-drag-handle-context-id="2"
                                                                        data-rbd-drag-handle-draggable-id="COMP1531"
                                                                        data-rbd-draggable-context-id="2"
                                                                        data-rbd-draggable-id="COMP1531"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-2"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="2"
                                                                          data-rbd-drag-handle-draggable-id="COMP1531"
                                                                          data-rbd-draggable-context-id="2"
                                                                          data-rbd-draggable-id="COMP1531"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP1531
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP1531"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="SENG1020
SENG1031
SENG1010"
                                                              index={0}
                                                              name="Software Engineering Fundamentals"
                                                              onHide={[Function]}
                                                              prereqs="(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <Course
                                                          code="COMP2521"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="COMP1927"
                                                          index={1}
                                                          key="COMP2521"
                                                          name="Data Structures and Algorithms"
                                                          prereqs="(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP2521"
                                                              index={1}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP2521"
                                                                index={1}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP2521"
                                                                  index={1}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP2521"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={1}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                      data-rbd-drag-handle-context-id="2"
                                                                      data-rbd-drag-handle-draggable-id="COMP2521"
                                                                      data-rbd-draggable-context-id="2"
                                                                      data-rbd-draggable-id="COMP2521"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                        data-rbd-drag-handle-context-id="2"
                                                                        data-rbd-drag-handle-draggable-id="COMP2521"
                                                                        data-rbd-draggable-context-id="2"
                                                                        data-rbd-draggable-id="COMP2521"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-2"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="2"
                                                                          data-rbd-drag-handle-draggable-id="COMP2521"
                                                                          data-rbd-draggable-context-id="2"
                                                                          data-rbd-draggable-id="COMP2521"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP2521
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP2521"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="COMP1927"
                                                              index={1}
                                                              name="Data Structures and Algorithms"
                                                              onHide={[Function]}
                                                              prereqs="(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </div>
                            <div
                              key="2020"
                            >
                              <styled.div
                                key="2020"
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
<<<<<<< HEAD
                                        "lastClassName": "hBAvqE",
=======
                                        "lastClassName": "cBwivr",
>>>>>>> already_done
                                        "rules": Array [
                                          "
  display: flex;
  margin: 0px;
  padding: 0px;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
<<<<<<< HEAD
                                    className="sc-cvbbAY hBAvqE"
=======
                                    className="sc-eHgmQL cBwivr"
>>>>>>> already_done
                                  >
                                    <Term
                                      courses={Array []}
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="1 2020"
                                      name="1 2020"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={Array []}
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="1 2020"
                                        name="T1 2020"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T1 2020
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="1 2020"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="1 2020"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="2"
                                                    data-rbd-droppable-id="1 2020"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="2"
                                                      data-rbd-droppable-id="1 2020"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="2"
                                                        data-rbd-droppable-id="1 2020"
                                                      >
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "COMP3121",
                                            "coreqs": "",
                                            "equivalents": "COMP3821
COMP9801
COMP3120
COMP9101",
                                            "exclusions": "",
                                            "name": "Algorithms and Programming Techniques",
                                            "prereqs": "(COMP1927 OR COMP2521)",
                                            "terms": Array [
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                          Object {
                                            "code": "COMP2511",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "COMP2911
COMP2011",
                                            "name": "Object-Oriented Design & Programming",
                                            "prereqs": "COMP1531
(COMP1927 OR COMP2521)",
                                            "terms": Array [
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="2 2020"
                                      name="2 2020"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "COMP3121",
                                              "coreqs": "",
                                              "equivalents": "COMP3821
COMP9801
COMP3120
COMP9101",
                                              "exclusions": "",
                                              "name": "Algorithms and Programming Techniques",
                                              "prereqs": "(COMP1927 OR COMP2521)",
                                              "terms": Array [
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                            Object {
                                              "code": "COMP2511",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "COMP2911
COMP2011",
                                              "name": "Object-Oriented Design & Programming",
                                              "prereqs": "COMP1531
(COMP1927 OR COMP2521)",
                                              "terms": Array [
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="2 2020"
                                        name="T2 2020"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T2 2020
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="2 2020"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="2 2020"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="2"
                                                    data-rbd-droppable-id="2 2020"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="2"
                                                      data-rbd-droppable-id="2 2020"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="2"
                                                        data-rbd-droppable-id="2 2020"
                                                      >
                                                        <Course
                                                          code="COMP3121"
                                                          coreqs=""
                                                          equivalents="COMP3821
COMP9801
COMP3120
COMP9101"
                                                          exclusions=""
                                                          index={0}
                                                          key="COMP3121"
                                                          name="Algorithms and Programming Techniques"
                                                          prereqs="(COMP1927 OR COMP2521)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP3121"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP3121"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP3121"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP3121"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                      data-rbd-drag-handle-context-id="2"
                                                                      data-rbd-drag-handle-draggable-id="COMP3121"
                                                                      data-rbd-draggable-context-id="2"
                                                                      data-rbd-draggable-id="COMP3121"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                        data-rbd-drag-handle-context-id="2"
                                                                        data-rbd-drag-handle-draggable-id="COMP3121"
                                                                        data-rbd-draggable-context-id="2"
                                                                        data-rbd-draggable-id="COMP3121"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-2"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="2"
                                                                          data-rbd-drag-handle-draggable-id="COMP3121"
                                                                          data-rbd-draggable-context-id="2"
                                                                          data-rbd-draggable-id="COMP3121"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP3121
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP3121"
                                                              coreqs=""
                                                              equivalents="COMP3821
COMP9801
COMP3120
COMP9101"
                                                              exclusions=""
                                                              index={0}
                                                              name="Algorithms and Programming Techniques"
                                                              onHide={[Function]}
                                                              prereqs="(COMP1927 OR COMP2521)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <Course
                                                          code="COMP2511"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="COMP2911
COMP2011"
                                                          index={1}
                                                          key="COMP2511"
                                                          name="Object-Oriented Design & Programming"
                                                          prereqs="COMP1531
(COMP1927 OR COMP2521)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP2511"
                                                              index={1}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP2511"
                                                                index={1}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP2511"
                                                                  index={1}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP2511"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={1}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                      data-rbd-drag-handle-context-id="2"
                                                                      data-rbd-drag-handle-draggable-id="COMP2511"
                                                                      data-rbd-draggable-context-id="2"
                                                                      data-rbd-draggable-id="COMP2511"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                        data-rbd-drag-handle-context-id="2"
                                                                        data-rbd-drag-handle-draggable-id="COMP2511"
                                                                        data-rbd-draggable-context-id="2"
                                                                        data-rbd-draggable-id="COMP2511"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-2"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="2"
                                                                          data-rbd-drag-handle-draggable-id="COMP2511"
                                                                          data-rbd-draggable-context-id="2"
                                                                          data-rbd-draggable-id="COMP2511"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP2511
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP2511"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="COMP2911
COMP2011"
                                                              index={1}
                                                              name="Object-Oriented Design & Programming"
                                                              onHide={[Function]}
                                                              prereqs="COMP1531
(COMP1927 OR COMP2521)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={Array []}
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="3 2020"
                                      name="3 2020"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={Array []}
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="3 2020"
                                        name="T3 2020"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T3 2020
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="3 2020"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="3 2020"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="2"
                                                    data-rbd-droppable-id="3 2020"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="2"
                                                      data-rbd-droppable-id="3 2020"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="2"
                                                        data-rbd-droppable-id="3 2020"
                                                      >
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </div>
                            <div
                              key="2021"
                            >
                              <styled.div
                                key="2021"
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
<<<<<<< HEAD
                                        "lastClassName": "hBAvqE",
=======
                                        "lastClassName": "cBwivr",
>>>>>>> already_done
                                        "rules": Array [
                                          "
  display: flex;
  margin: 0px;
  padding: 0px;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
<<<<<<< HEAD
                                    className="sc-cvbbAY hBAvqE"
=======
                                    className="sc-eHgmQL cBwivr"
>>>>>>> already_done
                                  >
                                    <Term
                                      courses={Array []}
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="1 2021"
                                      name="1 2021"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={Array []}
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="1 2021"
                                        name="T1 2021"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T1 2021
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="1 2021"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="1 2021"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="2"
                                                    data-rbd-droppable-id="1 2021"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="2"
                                                      data-rbd-droppable-id="1 2021"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="2"
                                                        data-rbd-droppable-id="1 2021"
                                                      >
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={Array []}
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="2 2021"
                                      name="2 2021"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={Array []}
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="2 2021"
                                        name="T2 2021"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T2 2021
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="2 2021"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="2 2021"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="2"
                                                    data-rbd-droppable-id="2 2021"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="2"
                                                      data-rbd-droppable-id="2 2021"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="2"
                                                        data-rbd-droppable-id="2 2021"
                                                      >
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "COMP4920",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "BINF4920
SENG4920
SENG4921
COMP2920",
                                            "name": "Management and Ethics",
                                            "prereqs": "Enrollment in Computer Science (3778)
Final year in your degree
(COMP2511 OR COMP2911)",
                                            "terms": Array [
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="3 2021"
                                      name="3 2021"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "COMP4920",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "BINF4920
SENG4920
SENG4921
COMP2920",
                                              "name": "Management and Ethics",
                                              "prereqs": "Enrollment in Computer Science (3778)
Final year in your degree
(COMP2511 OR COMP2911)",
                                              "terms": Array [
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="3 2021"
                                        name="T3 2021"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T3 2021
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="3 2021"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="3 2021"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="2"
                                                    data-rbd-droppable-id="3 2021"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="2"
                                                      data-rbd-droppable-id="3 2021"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="2"
                                                        data-rbd-droppable-id="3 2021"
                                                      >
                                                        <Course
                                                          code="COMP4920"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="BINF4920
SENG4920
SENG4921
COMP2920"
                                                          index={0}
                                                          key="COMP4920"
                                                          name="Management and Ethics"
                                                          prereqs="Enrollment in Computer Science (3778)
Final year in your degree
(COMP2511 OR COMP2911)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP4920"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP4920"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP4920"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP4920"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                      data-rbd-drag-handle-context-id="2"
                                                                      data-rbd-drag-handle-draggable-id="COMP4920"
                                                                      data-rbd-draggable-context-id="2"
                                                                      data-rbd-draggable-id="COMP4920"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                        data-rbd-drag-handle-context-id="2"
                                                                        data-rbd-drag-handle-draggable-id="COMP4920"
                                                                        data-rbd-draggable-context-id="2"
                                                                        data-rbd-draggable-id="COMP4920"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-2"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="2"
                                                                          data-rbd-drag-handle-draggable-id="COMP4920"
                                                                          data-rbd-draggable-context-id="2"
                                                                          data-rbd-draggable-id="COMP4920"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP4920
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP4920"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="BINF4920
SENG4920
SENG4921
COMP2920"
                                                              index={0}
                                                              name="Management and Ethics"
                                                              onHide={[Function]}
                                                              prereqs="Enrollment in Computer Science (3778)
Final year in your degree
(COMP2511 OR COMP2911)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </div>
                          </div>
                          <Styled(Button)
                            onClick={[Function]}
                            variant="info"
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cMljjf",
                                    "isStatic": false,
                                    "lastClassName": "gfjBxS",
                                    "rules": Array [
                                      "
&& {
  display: inline-block;
  font-weight: 400;
  font-size: 30px;
  padding: .375rem .75rem;
  border: 1px solid transparent;
  border-radius: .25rem;
  transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}
  min-width: 55px;
  margin: 6px;
  text-align: center;
  vertical-align: middle;
  padding: 0px;
",
                                    ],
                                  },
                                  "displayName": "Styled(Button)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cMljjf",
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": Object {
                                      "active": false,
                                      "disabled": false,
                                      "type": "button",
                                      "variant": "primary",
                                    },
                                    "displayName": "Button",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              variant="info"
                            >
                              <Button
                                active={false}
                                className="sc-cMljjf gfjBxS"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                                variant="info"
                              >
                                <button
                                  className="sc-cMljjf gfjBxS btn btn-info"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  +
                                </button>
                              </Button>
                            </StyledComponent>
                          </Styled(Button)>
                          <Styled(Button)
                            onClick={[Function]}
                            variant="info"
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cMljjf",
                                    "isStatic": false,
                                    "lastClassName": "gfjBxS",
                                    "rules": Array [
                                      "
&& {
  display: inline-block;
  font-weight: 400;
  font-size: 30px;
  padding: .375rem .75rem;
  border: 1px solid transparent;
  border-radius: .25rem;
  transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}
  min-width: 55px;
  margin: 6px;
  text-align: center;
  vertical-align: middle;
  padding: 0px;
",
                                    ],
                                  },
                                  "displayName": "Styled(Button)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cMljjf",
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": Object {
                                      "active": false,
                                      "disabled": false,
                                      "type": "button",
                                      "variant": "primary",
                                    },
                                    "displayName": "Button",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              variant="info"
                            >
                              <Button
                                active={false}
                                className="sc-cMljjf gfjBxS"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                                variant="info"
                              >
                                <button
                                  className="sc-cMljjf gfjBxS btn btn-info"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  -
                                </button>
                              </Button>
                            </StyledComponent>
                          </Styled(Button)>
                        </div>
                      </StyledComponent>
                    </styled.div>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-jWBwVP",
                              "isStatic": false,
<<<<<<< HEAD
                              "lastClassName": "fJaogs",
=======
                              "lastClassName": "dEnKGG",
>>>>>>> already_done
                              "rules": Array [
                                "
  display: flex;
  justify-content: flex-end;
  margin: 0px;
  padding: 0px;
  width: 30%;
  overflow: hidden;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-jWBwVP",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
<<<<<<< HEAD
                          className="sc-brqgnP fJaogs"
=======
                          className="sc-jWBwVP dEnKGG"
>>>>>>> already_done
                        >
                          <InfoBar
                            add_event={[Function]}
                            degree_id="3778"
                            degree_name="Computer Science"
                            degree_reqs={
                              Array [
                                Object {
                                  "filter_type": "Required courses",
                                  "info": "COMP3900",
                                  "units": 6,
                                },
                                Object {
                                  "filter_type": "Courses with options",
                                  "info": "[ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]",
                                  "units": 30,
                                },
                                Object {
                                  "filter_type": "General education",
                                  "info": "Any general education course",
                                  "units": 12,
                                },
                                Object {
                                  "filter_type": "Free electives",
                                  "info": "Any free elective",
                                  "units": 36,
                                },
                              ]
                            }
                            done_courses={Array []}
                            remove_course={[Function]}
                            standby_courses={
                              Array [
                                Object {
                                  "code": "COMP1511",
                                  "coreqs": "",
                                  "equivalents": "",
                                  "exclusions": "DPST1091",
                                  "name": "Programming Fundamentals",
                                  "prereqs": "",
                                  "terms": Array [
                                    Object {
                                      "term": 1,
                                      "year": 2019,
                                    },
                                    Object {
                                      "term": 2,
                                      "year": 2019,
                                    },
                                    Object {
                                      "term": 3,
                                      "year": 2019,
                                    },
                                    Object {
                                      "term": 1,
                                      "year": 2020,
                                    },
                                    Object {
                                      "term": 2,
                                      "year": 2020,
                                    },
                                    Object {
                                      "term": 3,
                                      "year": 2020,
                                    },
                                    Object {
                                      "term": 1,
                                      "year": 2021,
                                    },
                                    Object {
                                      "term": 2,
                                      "year": 2021,
                                    },
                                    Object {
                                      "term": 3,
                                      "year": 2021,
                                    },
                                    Object {
                                      "term": 1,
                                      "year": 2022,
                                    },
                                    Object {
                                      "term": 2,
                                      "year": 2022,
                                    },
                                    Object {
                                      "term": 3,
                                      "year": 2022,
                                    },
                                    Object {
                                      "term": 1,
                                      "year": 2023,
                                    },
                                    Object {
                                      "term": 2,
                                      "year": 2023,
                                    },
                                    Object {
                                      "term": 3,
                                      "year": 2023,
                                    },
                                    Object {
                                      "term": 1,
                                      "year": 2024,
                                    },
                                    Object {
                                      "term": 2,
                                      "year": 2024,
                                    },
                                    Object {
                                      "term": 3,
                                      "year": 2024,
                                    },
                                    Object {
                                      "term": 1,
                                      "year": 2025,
                                    },
                                    Object {
                                      "term": 2,
                                      "year": 2025,
                                    },
                                    Object {
                                      "term": 3,
                                      "year": 2025,
                                    },
                                  ],
                                  "units": 6,
                                },
                              ]
                            }
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                      "componentId": "sc-kkGfuU",
                                      "isStatic": false,
                                      "lastClassName": "dUkchd",
=======
                                      "componentId": "sc-kEYyzF",
                                      "isStatic": false,
                                      "lastClassName": "zzhEK",
>>>>>>> already_done
                                      "rules": Array [
                                        "
  &::-webkit-scrollbar {
    display: none;
  }

  padding-top: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 350px;
  max-height: 90vh;
  overflow-y: auto;
  box-sizing: content-box;
  text-align: center;
  background-color: #343a40;
  color: white;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
<<<<<<< HEAD
                                    "styledComponentId": "sc-kkGfuU",
=======
                                    "styledComponentId": "sc-kEYyzF",
>>>>>>> already_done
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
<<<<<<< HEAD
                                  className="sc-kkGfuU dUkchd"
=======
                                  className="sc-kEYyzF zzhEK"
>>>>>>> already_done
                                >
                                  <styled.h3>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-iAyFgw",
                                            "isStatic": false,
                                            "lastClassName": "bsxapa",
=======
                                            "componentId": "sc-kkGfuU",
                                            "isStatic": false,
                                            "lastClassName": "jKNyZI",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  padding: 8px;
  margin: 0px;
  font-family: inherit;
  border-bottom: 1px solid lightgrey;
  color: inherit;
",
                                            ],
                                          },
                                          "displayName": "styled.h3",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-iAyFgw",
=======
                                          "styledComponentId": "sc-kkGfuU",
>>>>>>> already_done
                                          "target": "h3",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h3
<<<<<<< HEAD
                                        className="sc-iAyFgw bsxapa"
=======
                                        className="sc-kkGfuU jKNyZI"
>>>>>>> already_done
                                      >
                                        Computer Science
                                        <br />
                                        3778
                                      </h3>
                                    </StyledComponent>
                                  </styled.h3>
                                  <InfoBarSection
                                    open={true}
                                    setOpen={[Function]}
                                    title="Add a Course"
                                  >
                                    <Styled(Card)
                                      bg="dark"
                                      text="white"
                                    >
                                      <StyledComponent
                                        bg="dark"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "Body": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardBody",
                                              "render": [Function],
                                            },
                                            "Footer": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardFooter",
                                              "render": [Function],
                                            },
                                            "Header": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardHeader",
                                              "render": [Function],
                                            },
                                            "Img": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": Object {
                                                "variant": null,
                                              },
                                              "displayName": "CardImg",
                                              "render": [Function],
                                            },
                                            "ImgOverlay": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardImgOverlay",
                                              "render": [Function],
                                            },
                                            "Link": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardLink",
                                              "render": [Function],
                                            },
                                            "Subtitle": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardSubtitle",
                                              "render": [Function],
                                            },
                                            "Text": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardText",
                                              "render": [Function],
                                            },
                                            "Title": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardTitle",
                                              "render": [Function],
                                            },
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                              "componentId": "sc-dnqmqq",
                                              "isStatic": false,
                                              "lastClassName": "hJxOZJ",
=======
                                              "componentId": "sc-htoDjs",
                                              "isStatic": false,
                                              "lastClassName": "keqScR",
>>>>>>> already_done
                                              "rules": Array [
                                                "
",
                                              ],
                                            },
                                            "displayName": "Styled(Card)",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
<<<<<<< HEAD
                                            "styledComponentId": "sc-dnqmqq",
=======
                                            "styledComponentId": "sc-htoDjs",
>>>>>>> already_done
                                            "target": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "Body": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardBody",
                                                "render": [Function],
                                              },
                                              "Footer": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardFooter",
                                                "render": [Function],
                                              },
                                              "Header": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardHeader",
                                                "render": [Function],
                                              },
                                              "Img": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": Object {
                                                  "variant": null,
                                                },
                                                "displayName": "CardImg",
                                                "render": [Function],
                                              },
                                              "ImgOverlay": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardImgOverlay",
                                                "render": [Function],
                                              },
                                              "Link": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardLink",
                                                "render": [Function],
                                              },
                                              "Subtitle": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardSubtitle",
                                                "render": [Function],
                                              },
                                              "Text": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardText",
                                                "render": [Function],
                                              },
                                              "Title": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardTitle",
                                                "render": [Function],
                                              },
                                              "defaultProps": Object {
                                                "body": false,
                                              },
                                              "displayName": "Card",
                                              "render": [Function],
                                            },
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        text="white"
                                      >
                                        <Card
                                          bg="dark"
                                          body={false}
<<<<<<< HEAD
                                          className="sc-dnqmqq hJxOZJ"
                                          text="white"
                                        >
                                          <div
                                            className="sc-dnqmqq hJxOZJ card bg-dark text-white"
=======
                                          className="sc-htoDjs keqScR"
                                          text="white"
                                        >
                                          <div
                                            className="sc-htoDjs keqScR card bg-dark text-white"
>>>>>>> already_done
                                          >
                                            <Styled(CardHeader)
                                              aria-controls="collapse-add-course"
                                              aria-expanded={true}
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                aria-controls="collapse-add-course"
                                                aria-expanded={true}
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                      "componentId": "sc-iwsKbI",
                                                      "isStatic": false,
                                                      "lastClassName": "fypTFz",
=======
                                                      "componentId": "sc-dnqmqq",
                                                      "isStatic": false,
                                                      "lastClassName": "fftazU",
>>>>>>> already_done
                                                      "rules": Array [
                                                        "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                                      ],
                                                    },
                                                    "displayName": "Styled(CardHeader)",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
<<<<<<< HEAD
                                                    "styledComponentId": "sc-iwsKbI",
=======
                                                    "styledComponentId": "sc-dnqmqq",
>>>>>>> already_done
                                                    "target": Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "defaultProps": undefined,
                                                      "displayName": "CardHeader",
                                                      "render": [Function],
                                                    },
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <CardHeader
                                                  aria-controls="collapse-add-course"
                                                  aria-expanded={true}
<<<<<<< HEAD
                                                  className="sc-iwsKbI fypTFz"
=======
                                                  className="sc-dnqmqq fftazU"
>>>>>>> already_done
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    aria-controls="collapse-add-course"
                                                    aria-expanded={true}
<<<<<<< HEAD
                                                    className="sc-iwsKbI fypTFz card-header"
=======
                                                    className="sc-dnqmqq fftazU card-header"
>>>>>>> already_done
                                                    onClick={[Function]}
                                                  >
                                                    <styled.i
                                                      className="fa fa-chevron-down"
                                                    >
                                                      <StyledComponent
                                                        className="fa fa-chevron-down"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                              "componentId": "sc-gZMcBi",
                                                              "isStatic": false,
                                                              "lastClassName": "dKgYPz",
=======
                                                              "componentId": "sc-iwsKbI",
                                                              "isStatic": false,
                                                              "lastClassName": "LdBUN",
>>>>>>> already_done
                                                              "rules": Array [
                                                                "
  float: left;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.i",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
<<<<<<< HEAD
                                                            "styledComponentId": "sc-gZMcBi",
=======
                                                            "styledComponentId": "sc-iwsKbI",
>>>>>>> already_done
                                                            "target": "i",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <i
<<<<<<< HEAD
                                                          className="sc-gZMcBi dKgYPz fa fa-chevron-down"
=======
                                                          className="sc-iwsKbI LdBUN fa fa-chevron-down"
>>>>>>> already_done
                                                        />
                                                      </StyledComponent>
                                                    </styled.i>
                                                    <styled.h5>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                              "componentId": "sc-htoDjs",
                                                              "isStatic": false,
                                                              "lastClassName": "bNWaiC",
=======
                                                              "componentId": "sc-gzVnrw",
                                                              "isStatic": false,
                                                              "lastClassName": "cvDevI",
>>>>>>> already_done
                                                              "rules": Array [
                                                                "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.h5",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
<<<<<<< HEAD
                                                            "styledComponentId": "sc-htoDjs",
=======
                                                            "styledComponentId": "sc-gzVnrw",
>>>>>>> already_done
                                                            "target": "h5",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <h5
<<<<<<< HEAD
                                                          className="sc-htoDjs bNWaiC"
=======
                                                          className="sc-gzVnrw cvDevI"
>>>>>>> already_done
                                                        >
                                                          Add a Course
                                                        </h5>
                                                      </StyledComponent>
                                                    </styled.h5>
                                                  </div>
                                                </CardHeader>
                                              </StyledComponent>
                                            </Styled(CardHeader)>
                                            <Collapse
                                              appear={false}
                                              dimension="height"
                                              getDimensionValue={[Function]}
                                              in={true}
                                              mountOnEnter={false}
                                              timeout={300}
                                              unmountOnExit={false}
                                            >
                                              <Transition
                                                addEndListener={[Function]}
                                                appear={false}
                                                aria-expanded={null}
                                                enter={true}
                                                exit={true}
                                                in={true}
                                                mountOnEnter={false}
                                                onEnter={[Function]}
                                                onEntered={[Function]}
                                                onEntering={[Function]}
                                                onExit={[Function]}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <CardBody
                                                  aria-expanded={null}
                                                  className="collapse show"
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse show card-body"
                                                  >
                                                    <p>
                                                      Search for a course and click on it. Then drag the course into your timeline from the 
                                                      <b>
<<<<<<< HEAD
                                                        Add
                                                      </b>
                                                       box.
                                                    </p>
                                                    <CourseDropBox
                                                      add_course={
                                                        Object {
                                                          "code": "COMP1511",
                                                          "coreqs": "",
                                                          "equivalents": "",
                                                          "exclusions": "DPST1091",
                                                          "name": "Programming Fundamentals",
                                                          "prereqs": "",
                                                          "terms": Array [
                                                            Object {
                                                              "term": 1,
                                                              "year": 2019,
                                                            },
                                                            Object {
                                                              "term": 2,
                                                              "year": 2019,
                                                            },
                                                            Object {
                                                              "term": 3,
                                                              "year": 2019,
                                                            },
                                                            Object {
                                                              "term": 1,
                                                              "year": 2020,
                                                            },
                                                            Object {
                                                              "term": 2,
                                                              "year": 2020,
                                                            },
                                                            Object {
                                                              "term": 3,
                                                              "year": 2020,
                                                            },
                                                            Object {
                                                              "term": 1,
                                                              "year": 2021,
                                                            },
                                                            Object {
                                                              "term": 2,
                                                              "year": 2021,
                                                            },
                                                            Object {
                                                              "term": 3,
                                                              "year": 2021,
                                                            },
                                                            Object {
                                                              "term": 1,
                                                              "year": 2022,
                                                            },
                                                            Object {
                                                              "term": 2,
                                                              "year": 2022,
                                                            },
                                                            Object {
                                                              "term": 3,
                                                              "year": 2022,
                                                            },
                                                            Object {
                                                              "term": 1,
                                                              "year": 2023,
                                                            },
                                                            Object {
                                                              "term": 2,
                                                              "year": 2023,
                                                            },
                                                            Object {
                                                              "term": 3,
                                                              "year": 2023,
                                                            },
                                                            Object {
                                                              "term": 1,
                                                              "year": 2024,
                                                            },
                                                            Object {
                                                              "term": 2,
                                                              "year": 2024,
                                                            },
                                                            Object {
                                                              "term": 3,
                                                              "year": 2024,
                                                            },
                                                            Object {
                                                              "term": 1,
                                                              "year": 2025,
                                                            },
                                                            Object {
                                                              "term": 2,
                                                              "year": 2025,
                                                            },
                                                            Object {
                                                              "term": 3,
                                                              "year": 2025,
                                                            },
                                                          ],
                                                          "units": 6,
                                                        }
                                                      }
                                                      remove_course={[Function]}
                                                      type="Add"
=======
                                                        Tray
                                                      </b>
                                                      .
                                                    </p>
                                                    <Component
                                                      courses={
                                                        Array [
                                                          Object {
                                                            "code": "COMP1511",
                                                            "coreqs": "",
                                                            "equivalents": "",
                                                            "exclusions": "DPST1091",
                                                            "name": "Programming Fundamentals",
                                                            "prereqs": "",
                                                            "terms": Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ],
                                                            "units": 6,
                                                          },
                                                        ]
                                                      }
                                                      highlight={false}
                                                      id="Add"
                                                      name="Tray"
                                                      removeCourse={[Function]}
>>>>>>> already_done
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-EHOje",
                                                                "isStatic": false,
                                                                "lastClassName": "gIuBAP",
                                                                "rules": Array [
                                                                  "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-EHOje",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
<<<<<<< HEAD
=======
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-EHOje gIuBAP"
                                                          >
                                                            <styled.h5>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-bZQynM",
                                                                      "isStatic": false,
                                                                      "lastClassName": "btxUkQ",
                                                                      "rules": Array [
                                                                        "
  padding: 8px;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.h5",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-bZQynM",
                                                                    "target": "h5",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <h5
                                                                  className="sc-bZQynM btxUkQ"
                                                                >
                                                                  Tray
                                                                </h5>
                                                              </StyledComponent>
                                                            </styled.h5>
                                                            <ConnectFunction
                                                              direction="vertical"
                                                              droppableId="Add"
                                                              getContainerForClone={[Function]}
                                                              ignoreContainerClipping={false}
                                                              isCombineEnabled={false}
                                                              isDropDisabled={false}
                                                              mode="standard"
                                                              renderClone={null}
                                                              type="DEFAULT"
                                                            >
                                                              <Droppable
                                                                direction="vertical"
                                                                droppableId="Add"
                                                                getContainerForClone={[Function]}
                                                                ignoreContainerClipping={false}
                                                                isCombineEnabled={false}
                                                                isDropDisabled={false}
                                                                mode="standard"
                                                                placeholder={null}
                                                                renderClone={null}
                                                                shouldAnimatePlaceholder={false}
                                                                snapshot={
                                                                  Object {
                                                                    "draggingFromThisWith": null,
                                                                    "draggingOverWith": null,
                                                                    "isDraggingOver": false,
                                                                    "isUsingPlaceholder": false,
                                                                  }
                                                                }
                                                                type="DEFAULT"
                                                                updateViewportMaxScroll={[Function]}
                                                                useClone={null}
                                                              >
                                                                <styled.div
                                                                  data-rbd-droppable-context-id="2"
                                                                  data-rbd-droppable-id="Add"
                                                                  highlight={false}
                                                                  isDraggingOver={false}
                                                                >
                                                                  <StyledComponent
                                                                    data-rbd-droppable-context-id="2"
                                                                    data-rbd-droppable-id="Add"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-htpNat",
                                                                          "isStatic": false,
                                                                          "lastClassName": "jgdmCx",
                                                                          "rules": Array [
                                                                            "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                                            [Function],
                                                                            ";
",
                                                                          ],
                                                                        },
                                                                        "displayName": "styled.div",
                                                                        "foldedComponentIds": Array [],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-htpNat",
                                                                        "target": "div",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={[Function]}
                                                                    highlight={false}
                                                                    isDraggingOver={false}
                                                                  >
                                                                    <div
                                                                      className="sc-htpNat jgdmCx"
                                                                      data-rbd-droppable-context-id="2"
                                                                      data-rbd-droppable-id="Add"
                                                                    >
                                                                      <Course
                                                                        code="COMP1511"
                                                                        coreqs=""
                                                                        equivalents=""
                                                                        exclusions="DPST1091"
                                                                        index={0}
                                                                        key="COMP1511"
                                                                        name="Programming Fundamentals"
                                                                        prereqs=""
                                                                        removeCourse={[Function]}
                                                                        terms={
                                                                          Array [
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2019,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2019,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2019,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2020,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2020,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2020,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2021,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2021,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2021,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2022,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2022,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2022,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2023,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2023,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2023,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2024,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2024,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2024,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2025,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2025,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2025,
                                                                            },
                                                                          ]
                                                                        }
                                                                        units={6}
                                                                      >
                                                                        <div>
                                                                          <PublicDraggable
                                                                            draggableId="COMP1511"
                                                                            index={0}
                                                                          >
                                                                            <PrivateDraggable
                                                                              canDragInteractiveElements={false}
                                                                              draggableId="COMP1511"
                                                                              index={0}
                                                                              isClone={false}
                                                                              isEnabled={true}
                                                                              shouldRespectForcePress={false}
                                                                            >
                                                                              <Connect(Draggable)
                                                                                canDragInteractiveElements={false}
                                                                                draggableId="COMP1511"
                                                                                index={0}
                                                                                isClone={false}
                                                                                isEnabled={true}
                                                                                shouldRespectForcePress={false}
                                                                              >
                                                                                <Draggable
                                                                                  canDragInteractiveElements={false}
                                                                                  draggableId="COMP1511"
                                                                                  dropAnimationFinished={[Function]}
                                                                                  index={0}
                                                                                  isClone={false}
                                                                                  isEnabled={true}
                                                                                  mapped={
                                                                                    Object {
                                                                                      "combineTargetFor": null,
                                                                                      "offset": Object {
                                                                                        "x": 0,
                                                                                        "y": 0,
                                                                                      },
                                                                                      "shouldAnimateDisplacement": true,
                                                                                      "snapshot": Object {
                                                                                        "combineTargetFor": null,
                                                                                        "combineWith": null,
                                                                                        "draggingOver": null,
                                                                                        "dropAnimation": null,
                                                                                        "isClone": false,
                                                                                        "isDragging": false,
                                                                                        "isDropAnimating": false,
                                                                                        "mode": null,
                                                                                      },
                                                                                      "type": "SECONDARY",
                                                                                    }
                                                                                  }
                                                                                  shouldRespectForcePress={false}
                                                                                >
                                                                                  <styled.div
                                                                                    aria-labelledby="rbd-lift-instruction-2"
                                                                                    data-rbd-drag-handle-context-id="2"
                                                                                    data-rbd-drag-handle-draggable-id="COMP1511"
                                                                                    data-rbd-draggable-context-id="2"
                                                                                    data-rbd-draggable-id="COMP1511"
                                                                                    draggable={false}
                                                                                    hasError={false}
                                                                                    hasWarning={false}
                                                                                    isDragging={false}
                                                                                    onClick={[Function]}
                                                                                    onDragStart={[Function]}
                                                                                    onTransitionEnd={null}
                                                                                    style={
                                                                                      Object {
                                                                                        "transform": null,
                                                                                        "transition": null,
                                                                                      }
                                                                                    }
                                                                                    tabIndex={0}
                                                                                  >
                                                                                    <StyledComponent
                                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                                      data-rbd-drag-handle-context-id="2"
                                                                                      data-rbd-drag-handle-draggable-id="COMP1511"
                                                                                      data-rbd-draggable-context-id="2"
                                                                                      data-rbd-draggable-id="COMP1511"
                                                                                      draggable={false}
                                                                                      forwardedComponent={
                                                                                        Object {
                                                                                          "$$typeof": Symbol(react.forward_ref),
                                                                                          "attrs": Array [],
                                                                                          "componentStyle": ComponentStyle {
                                                                                            "componentId": "sc-bwzfXH",
                                                                                            "isStatic": false,
                                                                                            "lastClassName": "bBrTaZ",
                                                                                            "rules": Array [
                                                                                              "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                              [Function],
                                                                                              ";

  &:hover {
    background-color: ",
                                                                                              [Function],
                                                                                              ";
  }
",
                                                                                            ],
                                                                                          },
                                                                                          "displayName": "styled.div",
                                                                                          "foldedComponentIds": Array [],
                                                                                          "render": [Function],
                                                                                          "styledComponentId": "sc-bwzfXH",
                                                                                          "target": "div",
                                                                                          "toString": [Function],
                                                                                          "warnTooManyClasses": [Function],
                                                                                          "withComponent": [Function],
                                                                                        }
                                                                                      }
                                                                                      forwardedRef={[Function]}
                                                                                      hasError={false}
                                                                                      hasWarning={false}
                                                                                      isDragging={false}
                                                                                      onClick={[Function]}
                                                                                      onDragStart={[Function]}
                                                                                      onTransitionEnd={null}
                                                                                      style={
                                                                                        Object {
                                                                                          "transform": null,
                                                                                          "transition": null,
                                                                                        }
                                                                                      }
                                                                                      tabIndex={0}
                                                                                    >
                                                                                      <div
                                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                                        className="sc-bwzfXH bBrTaZ"
                                                                                        data-rbd-drag-handle-context-id="2"
                                                                                        data-rbd-drag-handle-draggable-id="COMP1511"
                                                                                        data-rbd-draggable-context-id="2"
                                                                                        data-rbd-draggable-id="COMP1511"
                                                                                        draggable={false}
                                                                                        onClick={[Function]}
                                                                                        onDragStart={[Function]}
                                                                                        onTransitionEnd={null}
                                                                                        style={
                                                                                          Object {
                                                                                            "transform": null,
                                                                                            "transition": null,
                                                                                          }
                                                                                        }
                                                                                        tabIndex={0}
                                                                                      >
                                                                                        COMP1511
                                                                                      </div>
                                                                                    </StyledComponent>
                                                                                  </styled.div>
                                                                                </Draggable>
                                                                              </Connect(Draggable)>
                                                                            </PrivateDraggable>
                                                                          </PublicDraggable>
                                                                          <CourseInfoModal
                                                                            code="COMP1511"
                                                                            coreqs=""
                                                                            equivalents=""
                                                                            exclusions="DPST1091"
                                                                            index={0}
                                                                            name="Programming Fundamentals"
                                                                            onHide={[Function]}
                                                                            prereqs=""
                                                                            removeCourse={[Function]}
                                                                            show={false}
                                                                            terms={
                                                                              Array [
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2019,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2019,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2019,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2020,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2020,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2020,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2021,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2021,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2021,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2022,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2022,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2022,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2023,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2023,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2023,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2024,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2024,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2024,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2025,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2025,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2025,
                                                                                },
                                                                              ]
                                                                            }
                                                                            units={6}
                                                                          >
                                                                            <Bootstrap(Modal)
                                                                              aria-labelledby="contained-modal-title-vcenter"
                                                                              centered={true}
                                                                              onHide={[Function]}
                                                                              show={false}
                                                                              size="lg"
                                                                            >
                                                                              <Modal
                                                                                animation={true}
                                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                                autoFocus={true}
                                                                                backdrop={true}
                                                                                bsPrefix="modal"
                                                                                centered={true}
                                                                                dialogAs={
                                                                                  Object {
                                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                                    "displayName": "ModalDialog",
                                                                                    "render": [Function],
                                                                                  }
                                                                                }
                                                                                enforceFocus={true}
                                                                                keyboard={true}
                                                                                manager={
                                                                                  BootstrapModalManager {
                                                                                    "adjustAndStore": [Function],
                                                                                    "containers": Array [],
                                                                                    "data": Array [],
                                                                                    "handleContainerOverflow": true,
                                                                                    "hideSiblingNodes": true,
                                                                                    "modals": Array [],
                                                                                    "restore": [Function],
                                                                                    "scrollbarSize": 0,
                                                                                  }
                                                                                }
                                                                                onHide={[Function]}
                                                                                restoreFocus={true}
                                                                                show={false}
                                                                                size="lg"
                                                                              >
                                                                                <Modal
                                                                                  autoFocus={true}
                                                                                  backdrop={true}
                                                                                  backdropTransition={[Function]}
                                                                                  className="modal"
                                                                                  containerClassName="modal-open"
                                                                                  enforceFocus={true}
                                                                                  keyboard={true}
                                                                                  manager={
                                                                                    BootstrapModalManager {
                                                                                      "adjustAndStore": [Function],
                                                                                      "containers": Array [],
                                                                                      "data": Array [],
                                                                                      "handleContainerOverflow": true,
                                                                                      "hideSiblingNodes": true,
                                                                                      "modals": Array [],
                                                                                      "restore": [Function],
                                                                                      "scrollbarSize": 0,
                                                                                    }
                                                                                  }
                                                                                  onClick={[Function]}
                                                                                  onEnter={[Function]}
                                                                                  onEntering={[Function]}
                                                                                  onExited={[Function]}
                                                                                  onHide={[Function]}
                                                                                  onMouseUp={[Function]}
                                                                                  renderBackdrop={[Function]}
                                                                                  restoreFocus={true}
                                                                                  role="dialog"
                                                                                  show={false}
                                                                                  style={Object {}}
                                                                                  transition={[Function]}
                                                                                />
                                                                              </Modal>
                                                                            </Bootstrap(Modal)>
                                                                          </CourseInfoModal>
                                                                        </div>
                                                                      </Course>
                                                                      <AnimateInOut
                                                                        on={null}
                                                                        shouldAnimate={false}
                                                                      />
                                                                    </div>
                                                                  </StyledComponent>
                                                                </styled.div>
                                                              </Droppable>
                                                            </ConnectFunction>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </Component>
                                                    <SearchCourses
                                                      add_event={[Function]}
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-ckVGcZ",
                                                                "isStatic": false,
                                                                "lastClassName": "fcibBt",
                                                                "rules": Array [
                                                                  "
  padding: 3px;
  margin: 0;
  text-align: center;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-ckVGcZ",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
>>>>>>> already_done
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
<<<<<<< HEAD
                                                            className="sc-EHOje gIuBAP"
                                                          >
                                                            <styled.h5>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-bZQynM",
                                                                      "isStatic": false,
                                                                      "lastClassName": "btxUkQ",
                                                                      "rules": Array [
                                                                        "
  padding: 8px;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.h5",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-bZQynM",
                                                                    "target": "h5",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <h5
                                                                  className="sc-bZQynM btxUkQ"
                                                                >
                                                                  Add
                                                                </h5>
                                                              </StyledComponent>
                                                            </styled.h5>
                                                            <ConnectFunction
                                                              direction="vertical"
                                                              droppableId="Add"
                                                              getContainerForClone={[Function]}
                                                              ignoreContainerClipping={false}
                                                              isCombineEnabled={false}
                                                              isDropDisabled={false}
                                                              mode="standard"
                                                              renderClone={null}
                                                              type="DEFAULT"
                                                            >
                                                              <Droppable
                                                                direction="vertical"
                                                                droppableId="Add"
                                                                getContainerForClone={[Function]}
                                                                ignoreContainerClipping={false}
                                                                isCombineEnabled={false}
                                                                isDropDisabled={false}
                                                                mode="standard"
                                                                placeholder={null}
                                                                renderClone={null}
                                                                shouldAnimatePlaceholder={false}
                                                                snapshot={
                                                                  Object {
                                                                    "draggingFromThisWith": null,
                                                                    "draggingOverWith": null,
                                                                    "isDraggingOver": false,
                                                                    "isUsingPlaceholder": false,
                                                                  }
                                                                }
                                                                type="DEFAULT"
                                                                updateViewportMaxScroll={[Function]}
                                                                useClone={null}
                                                              >
                                                                <styled.div
                                                                  data-rbd-droppable-context-id="2"
                                                                  data-rbd-droppable-id="Add"
                                                                >
                                                                  <StyledComponent
                                                                    data-rbd-droppable-context-id="2"
                                                                    data-rbd-droppable-id="Add"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-gzVnrw",
                                                                          "isStatic": false,
                                                                          "lastClassName": "hQQdYy",
                                                                          "rules": Array [
                                                                            "
  padding: 8px;
  flex-grow: 1;
  min-height: 50px;
",
                                                                          ],
                                                                        },
                                                                        "displayName": "styled.div",
                                                                        "foldedComponentIds": Array [],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-gzVnrw",
                                                                        "target": "div",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={[Function]}
                                                                  >
                                                                    <div
                                                                      className="sc-gzVnrw hQQdYy"
                                                                      data-rbd-droppable-context-id="2"
                                                                      data-rbd-droppable-id="Add"
                                                                    >
                                                                      <Course
                                                                        code="COMP1511"
                                                                        coreqs=""
                                                                        equivalents=""
                                                                        exclusions="DPST1091"
                                                                        index={0}
                                                                        key="COMP1511"
                                                                        name="Programming Fundamentals"
                                                                        prereqs=""
                                                                        removeCourse={[Function]}
                                                                        terms={
                                                                          Array [
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2019,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2019,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2019,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2020,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2020,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2020,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2021,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2021,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2021,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2022,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2022,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2022,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2023,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2023,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2023,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2024,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2024,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2024,
                                                                            },
                                                                            Object {
                                                                              "term": 1,
                                                                              "year": 2025,
                                                                            },
                                                                            Object {
                                                                              "term": 2,
                                                                              "year": 2025,
                                                                            },
                                                                            Object {
                                                                              "term": 3,
                                                                              "year": 2025,
                                                                            },
                                                                          ]
                                                                        }
                                                                        units={6}
                                                                      >
                                                                        <div>
                                                                          <PublicDraggable
                                                                            draggableId="COMP1511"
                                                                            index={0}
                                                                          >
                                                                            <PrivateDraggable
                                                                              canDragInteractiveElements={false}
                                                                              draggableId="COMP1511"
                                                                              index={0}
                                                                              isClone={false}
                                                                              isEnabled={true}
                                                                              shouldRespectForcePress={false}
                                                                            >
                                                                              <Connect(Draggable)
                                                                                canDragInteractiveElements={false}
                                                                                draggableId="COMP1511"
                                                                                index={0}
                                                                                isClone={false}
                                                                                isEnabled={true}
                                                                                shouldRespectForcePress={false}
                                                                              >
                                                                                <Draggable
                                                                                  canDragInteractiveElements={false}
                                                                                  draggableId="COMP1511"
                                                                                  dropAnimationFinished={[Function]}
                                                                                  index={0}
                                                                                  isClone={false}
                                                                                  isEnabled={true}
                                                                                  mapped={
                                                                                    Object {
                                                                                      "combineTargetFor": null,
                                                                                      "offset": Object {
                                                                                        "x": 0,
                                                                                        "y": 0,
                                                                                      },
                                                                                      "shouldAnimateDisplacement": true,
                                                                                      "snapshot": Object {
                                                                                        "combineTargetFor": null,
                                                                                        "combineWith": null,
                                                                                        "draggingOver": null,
                                                                                        "dropAnimation": null,
                                                                                        "isClone": false,
                                                                                        "isDragging": false,
                                                                                        "isDropAnimating": false,
                                                                                        "mode": null,
                                                                                      },
                                                                                      "type": "SECONDARY",
                                                                                    }
                                                                                  }
                                                                                  shouldRespectForcePress={false}
                                                                                >
                                                                                  <styled.div
                                                                                    aria-labelledby="rbd-lift-instruction-2"
                                                                                    data-rbd-drag-handle-context-id="2"
                                                                                    data-rbd-drag-handle-draggable-id="COMP1511"
                                                                                    data-rbd-draggable-context-id="2"
                                                                                    data-rbd-draggable-id="COMP1511"
                                                                                    draggable={false}
                                                                                    hasError={false}
                                                                                    hasWarning={false}
                                                                                    isDragging={false}
                                                                                    onClick={[Function]}
                                                                                    onDragStart={[Function]}
                                                                                    onTransitionEnd={null}
                                                                                    style={
                                                                                      Object {
                                                                                        "transform": null,
                                                                                        "transition": null,
                                                                                      }
                                                                                    }
                                                                                    tabIndex={0}
                                                                                  >
                                                                                    <StyledComponent
                                                                                      aria-labelledby="rbd-lift-instruction-2"
                                                                                      data-rbd-drag-handle-context-id="2"
                                                                                      data-rbd-drag-handle-draggable-id="COMP1511"
                                                                                      data-rbd-draggable-context-id="2"
                                                                                      data-rbd-draggable-id="COMP1511"
                                                                                      draggable={false}
                                                                                      forwardedComponent={
                                                                                        Object {
                                                                                          "$$typeof": Symbol(react.forward_ref),
                                                                                          "attrs": Array [],
                                                                                          "componentStyle": ComponentStyle {
                                                                                            "componentId": "sc-bwzfXH",
                                                                                            "isStatic": false,
                                                                                            "lastClassName": "bBrTaZ",
                                                                                            "rules": Array [
                                                                                              "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                              [Function],
                                                                                              ";

  &:hover {
    background-color: ",
                                                                                              [Function],
                                                                                              ";
  }
",
                                                                                            ],
                                                                                          },
                                                                                          "displayName": "styled.div",
                                                                                          "foldedComponentIds": Array [],
                                                                                          "render": [Function],
                                                                                          "styledComponentId": "sc-bwzfXH",
                                                                                          "target": "div",
                                                                                          "toString": [Function],
                                                                                          "warnTooManyClasses": [Function],
                                                                                          "withComponent": [Function],
                                                                                        }
                                                                                      }
                                                                                      forwardedRef={[Function]}
                                                                                      hasError={false}
                                                                                      hasWarning={false}
                                                                                      isDragging={false}
                                                                                      onClick={[Function]}
                                                                                      onDragStart={[Function]}
                                                                                      onTransitionEnd={null}
                                                                                      style={
                                                                                        Object {
                                                                                          "transform": null,
                                                                                          "transition": null,
                                                                                        }
                                                                                      }
                                                                                      tabIndex={0}
                                                                                    >
                                                                                      <div
                                                                                        aria-labelledby="rbd-lift-instruction-2"
                                                                                        className="sc-bwzfXH bBrTaZ"
                                                                                        data-rbd-drag-handle-context-id="2"
                                                                                        data-rbd-drag-handle-draggable-id="COMP1511"
                                                                                        data-rbd-draggable-context-id="2"
                                                                                        data-rbd-draggable-id="COMP1511"
                                                                                        draggable={false}
                                                                                        onClick={[Function]}
                                                                                        onDragStart={[Function]}
                                                                                        onTransitionEnd={null}
                                                                                        style={
                                                                                          Object {
                                                                                            "transform": null,
                                                                                            "transition": null,
                                                                                          }
                                                                                        }
                                                                                        tabIndex={0}
                                                                                      >
                                                                                        COMP1511
                                                                                      </div>
                                                                                    </StyledComponent>
                                                                                  </styled.div>
                                                                                </Draggable>
                                                                              </Connect(Draggable)>
                                                                            </PrivateDraggable>
                                                                          </PublicDraggable>
                                                                          <CourseInfoModal
                                                                            code="COMP1511"
                                                                            coreqs=""
                                                                            equivalents=""
                                                                            exclusions="DPST1091"
                                                                            index={0}
                                                                            name="Programming Fundamentals"
                                                                            onHide={[Function]}
                                                                            prereqs=""
                                                                            removeCourse={[Function]}
                                                                            show={false}
                                                                            terms={
                                                                              Array [
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2019,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2019,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2019,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2020,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2020,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2020,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2021,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2021,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2021,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2022,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2022,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2022,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2023,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2023,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2023,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2024,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2024,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2024,
                                                                                },
                                                                                Object {
                                                                                  "term": 1,
                                                                                  "year": 2025,
                                                                                },
                                                                                Object {
                                                                                  "term": 2,
                                                                                  "year": 2025,
                                                                                },
                                                                                Object {
                                                                                  "term": 3,
                                                                                  "year": 2025,
                                                                                },
                                                                              ]
                                                                            }
                                                                            units={6}
                                                                          >
                                                                            <Bootstrap(Modal)
                                                                              aria-labelledby="contained-modal-title-vcenter"
                                                                              centered={true}
                                                                              onHide={[Function]}
                                                                              show={false}
                                                                              size="lg"
                                                                            >
                                                                              <Modal
                                                                                animation={true}
                                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                                autoFocus={true}
                                                                                backdrop={true}
                                                                                bsPrefix="modal"
                                                                                centered={true}
                                                                                dialogAs={
                                                                                  Object {
                                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                                    "displayName": "ModalDialog",
                                                                                    "render": [Function],
                                                                                  }
                                                                                }
                                                                                enforceFocus={true}
                                                                                keyboard={true}
                                                                                manager={
                                                                                  BootstrapModalManager {
                                                                                    "adjustAndStore": [Function],
                                                                                    "containers": Array [],
                                                                                    "data": Array [],
                                                                                    "handleContainerOverflow": true,
                                                                                    "hideSiblingNodes": true,
                                                                                    "modals": Array [],
                                                                                    "restore": [Function],
                                                                                    "scrollbarSize": 0,
                                                                                  }
                                                                                }
                                                                                onHide={[Function]}
                                                                                restoreFocus={true}
                                                                                show={false}
                                                                                size="lg"
                                                                              >
                                                                                <Modal
                                                                                  autoFocus={true}
                                                                                  backdrop={true}
                                                                                  backdropTransition={[Function]}
                                                                                  className="modal"
                                                                                  containerClassName="modal-open"
                                                                                  enforceFocus={true}
                                                                                  keyboard={true}
                                                                                  manager={
                                                                                    BootstrapModalManager {
                                                                                      "adjustAndStore": [Function],
                                                                                      "containers": Array [],
                                                                                      "data": Array [],
                                                                                      "handleContainerOverflow": true,
                                                                                      "hideSiblingNodes": true,
                                                                                      "modals": Array [],
                                                                                      "restore": [Function],
                                                                                      "scrollbarSize": 0,
                                                                                    }
                                                                                  }
                                                                                  onClick={[Function]}
                                                                                  onEnter={[Function]}
                                                                                  onEntering={[Function]}
                                                                                  onExited={[Function]}
                                                                                  onHide={[Function]}
                                                                                  onMouseUp={[Function]}
                                                                                  renderBackdrop={[Function]}
                                                                                  restoreFocus={true}
                                                                                  role="dialog"
                                                                                  show={false}
                                                                                  style={Object {}}
                                                                                  transition={[Function]}
                                                                                />
                                                                              </Modal>
                                                                            </Bootstrap(Modal)>
                                                                          </CourseInfoModal>
                                                                        </div>
                                                                      </Course>
                                                                      <AnimateInOut
                                                                        on={null}
                                                                        shouldAnimate={false}
                                                                      />
                                                                    </div>
                                                                  </StyledComponent>
                                                                </styled.div>
                                                              </Droppable>
                                                            </ConnectFunction>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </CourseDropBox>
                                                    <SearchCourses
                                                      add_event={[Function]}
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-jKJlTe",
                                                                "isStatic": false,
                                                                "lastClassName": "BsXjl",
                                                                "rules": Array [
                                                                  "
  padding: 3px;
  margin: 0;
=======
                                                            className="sc-ckVGcZ fcibBt"
                                                          >
                                                            <form>
                                                              <Styled(styled.input)
                                                                onChange={[Function]}
                                                                placeholder="Search for a course..."
                                                              >
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
                                                                        "componentId": "sc-jKJlTe",
                                                                        "isStatic": false,
                                                                        "lastClassName": "iZEjBx",
                                                                        "rules": Array [
                                                                          "

  &:focus {
    outline: none;
    &::placeholder {
      color: transparent;
    }
  }
  box-shadow: 10px 10px grey;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  padding: 1% 4%;
  margin-bottom: 2%;
  transition: background-colour .2s ease-in;
  font-size: 30px;
  line-height: 18px;
  background-color: transparent;
  background-image: url(\\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\");
  background-repeat: no-repeat;
  background-size: 40px 40px;
  background-position: 95% center;

  border-radius: 50px;
  border: 1px solid #575756;
",
                                                                          "

&::placeholder {
  color: rgba(255, 255, 255, 0.75);
}
  width: 95%;
  padding: 12px 24px;
  margin-bottom: 1%;

  font-size: 14px;
  line-height: 18px;
  font-color: white;

  color: white;
  background-size: 18px 18px;
  background-position: 95% center;
  border: 1px solid white;

  box-shadow: 0px 0px;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "Styled(styled.input)",
                                                                      "foldedComponentIds": Array [
                                                                        "sc-kGXeez",
                                                                      ],
                                                                      "render": [Function],
                                                                      "styledComponentId": "sc-jKJlTe",
                                                                      "target": "input",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={
                                                                    Object {
                                                                      "current": <input
                                                                        class="sc-kGXeez sc-jKJlTe iZEjBx"
                                                                        placeholder="Search for a course..."
                                                                      />,
                                                                    }
                                                                  }
                                                                  onChange={[Function]}
                                                                  placeholder="Search for a course..."
                                                                >
                                                                  <input
                                                                    className="sc-kGXeez sc-jKJlTe iZEjBx"
                                                                    onChange={[Function]}
                                                                    placeholder="Search for a course..."
                                                                  />
                                                                </StyledComponent>
                                                              </Styled(styled.input)>
                                                            </form>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </SearchCourses>
                                                  </div>
                                                </CardBody>
                                              </Transition>
                                            </Collapse>
                                          </div>
                                        </Card>
                                      </StyledComponent>
                                    </Styled(Card)>
                                  </InfoBarSection>
                                  <InfoBarSection
                                    open={false}
                                    setOpen={[Function]}
                                    title="Courses Already Done"
                                  >
                                    <Styled(Card)
                                      bg="dark"
                                      text="white"
                                    >
                                      <StyledComponent
                                        bg="dark"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "Body": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardBody",
                                              "render": [Function],
                                            },
                                            "Footer": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardFooter",
                                              "render": [Function],
                                            },
                                            "Header": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardHeader",
                                              "render": [Function],
                                            },
                                            "Img": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": Object {
                                                "variant": null,
                                              },
                                              "displayName": "CardImg",
                                              "render": [Function],
                                            },
                                            "ImgOverlay": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardImgOverlay",
                                              "render": [Function],
                                            },
                                            "Link": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardLink",
                                              "render": [Function],
                                            },
                                            "Subtitle": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardSubtitle",
                                              "render": [Function],
                                            },
                                            "Text": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardText",
                                              "render": [Function],
                                            },
                                            "Title": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardTitle",
                                              "render": [Function],
                                            },
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-htoDjs",
                                              "isStatic": false,
                                              "lastClassName": "keqScR",
                                              "rules": Array [
                                                "
",
                                              ],
                                            },
                                            "displayName": "Styled(Card)",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-htoDjs",
                                            "target": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "Body": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardBody",
                                                "render": [Function],
                                              },
                                              "Footer": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardFooter",
                                                "render": [Function],
                                              },
                                              "Header": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardHeader",
                                                "render": [Function],
                                              },
                                              "Img": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": Object {
                                                  "variant": null,
                                                },
                                                "displayName": "CardImg",
                                                "render": [Function],
                                              },
                                              "ImgOverlay": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardImgOverlay",
                                                "render": [Function],
                                              },
                                              "Link": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardLink",
                                                "render": [Function],
                                              },
                                              "Subtitle": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardSubtitle",
                                                "render": [Function],
                                              },
                                              "Text": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardText",
                                                "render": [Function],
                                              },
                                              "Title": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardTitle",
                                                "render": [Function],
                                              },
                                              "defaultProps": Object {
                                                "body": false,
                                              },
                                              "displayName": "Card",
                                              "render": [Function],
                                            },
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        text="white"
                                      >
                                        <Card
                                          bg="dark"
                                          body={false}
                                          className="sc-htoDjs keqScR"
                                          text="white"
                                        >
                                          <div
                                            className="sc-htoDjs keqScR card bg-dark text-white"
                                          >
                                            <Styled(CardHeader)
                                              aria-controls="collapse-add-course"
                                              aria-expanded={false}
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                aria-controls="collapse-add-course"
                                                aria-expanded={false}
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-dnqmqq",
                                                      "isStatic": false,
                                                      "lastClassName": "fftazU",
                                                      "rules": Array [
                                                        "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                                      ],
                                                    },
                                                    "displayName": "Styled(CardHeader)",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-dnqmqq",
                                                    "target": Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "defaultProps": undefined,
                                                      "displayName": "CardHeader",
                                                      "render": [Function],
                                                    },
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <CardHeader
                                                  aria-controls="collapse-add-course"
                                                  aria-expanded={false}
                                                  className="sc-dnqmqq fftazU"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    aria-controls="collapse-add-course"
                                                    aria-expanded={false}
                                                    className="sc-dnqmqq fftazU card-header"
                                                    onClick={[Function]}
                                                  >
                                                    <styled.i
                                                      className="fa fa-chevron-right"
                                                    >
                                                      <StyledComponent
                                                        className="fa fa-chevron-right"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-iwsKbI",
                                                              "isStatic": false,
                                                              "lastClassName": "LdBUN",
                                                              "rules": Array [
                                                                "
  float: left;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.i",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-iwsKbI",
                                                            "target": "i",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <i
                                                          className="sc-iwsKbI LdBUN fa fa-chevron-right"
                                                        />
                                                      </StyledComponent>
                                                    </styled.i>
                                                    <styled.h5>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-gzVnrw",
                                                              "isStatic": false,
                                                              "lastClassName": "cvDevI",
                                                              "rules": Array [
                                                                "
  padding: 4px;
>>>>>>> already_done
  text-align: center;
  width: 100%;
",
<<<<<<< HEAD
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-jKJlTe",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-jKJlTe BsXjl"
                                                          >
                                                            <form>
                                                              <Styled(styled.input)
                                                                onChange={[Function]}
                                                                placeholder="Search for a course..."
                                                              >
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "fmHDKE",
                                                                        "rules": Array [
                                                                          "

  &:focus {
    outline: none;
    &::placeholder {
      color: transparent;
    }
  }
  box-shadow: 10px 10px grey;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  padding: 1% 4%;
  margin-bottom: 2%;
  transition: background-colour .2s ease-in;
  font-size: 30px;
  line-height: 18px;
  background-color: transparent;
  background-image: url(\\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\");
  background-repeat: no-repeat;
  background-size: 40px 40px;
  background-position: 95% center;

  border-radius: 50px;
  border: 1px solid #575756;
",
                                                                          "

&::placeholder {
  color: rgba(255, 255, 255, 0.75);
}
  width: 95%;
  padding: 12px 24px;
  margin-bottom: 1%;

  font-size: 14px;
  line-height: 18px;
  font-color: white;

  color: white;
  background-size: 18px 18px;
  background-position: 95% center;
  border: 1px solid white;

  box-shadow: 0px 0px;
=======
                                                              ],
                                                            },
                                                            "displayName": "styled.h5",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-gzVnrw",
                                                            "target": "h5",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <h5
                                                          className="sc-gzVnrw cvDevI"
                                                        >
                                                          Courses Already Done
                                                        </h5>
                                                      </StyledComponent>
                                                    </styled.h5>
                                                  </div>
                                                </CardHeader>
                                              </StyledComponent>
                                            </Styled(CardHeader)>
                                            <Collapse
                                              appear={false}
                                              dimension="height"
                                              getDimensionValue={[Function]}
                                              in={false}
                                              mountOnEnter={false}
                                              timeout={300}
                                              unmountOnExit={false}
                                            >
                                              <Transition
                                                addEndListener={[Function]}
                                                appear={false}
                                                aria-expanded={null}
                                                enter={true}
                                                exit={true}
                                                in={false}
                                                mountOnEnter={false}
                                                onEnter={[Function]}
                                                onEntered={[Function]}
                                                onEntering={[Function]}
                                                onExit={[Function]}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <CardBody
                                                  aria-expanded={null}
                                                  className="collapse"
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse card-body"
                                                  >
                                                    <p>
                                                      Drop the courses you have already done into the box below
                                                    </p>
                                                    <Component
                                                      courses={Array []}
                                                      highlight={false}
                                                      id="Done"
                                                      name="Already Done"
                                                      removeCourse={[Function]}
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-EHOje",
                                                                "isStatic": false,
                                                                "lastClassName": "gIuBAP",
                                                                "rules": Array [
                                                                  "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-EHOje",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-EHOje gIuBAP"
                                                          >
                                                            <styled.h5>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-bZQynM",
                                                                      "isStatic": false,
                                                                      "lastClassName": "btxUkQ",
                                                                      "rules": Array [
                                                                        "
  padding: 8px;
>>>>>>> already_done
",
                                                                        ],
                                                                      },
                                                                      "displayName": "Styled(styled.input)",
                                                                      "foldedComponentIds": Array [
                                                                        "sc-kpOJdX",
                                                                      ],
<<<<<<< HEAD
                                                                      "render": [Function],
                                                                      "styledComponentId": "sc-eNQAEJ",
                                                                      "target": "input",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={
                                                                    Object {
                                                                      "current": <input
                                                                        class="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                                        placeholder="Search for a course..."
                                                                      />,
                                                                    }
                                                                  }
                                                                  onChange={[Function]}
                                                                  placeholder="Search for a course..."
                                                                >
                                                                  <input
                                                                    className="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                                    onChange={[Function]}
                                                                    placeholder="Search for a course..."
                                                                  />
                                                                </StyledComponent>
                                                              </Styled(styled.input)>
                                                            </form>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </SearchCourses>
=======
                                                                    },
                                                                    "displayName": "styled.h5",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-bZQynM",
                                                                    "target": "h5",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <h5
                                                                  className="sc-bZQynM btxUkQ"
                                                                >
                                                                  Already Done
                                                                </h5>
                                                              </StyledComponent>
                                                            </styled.h5>
                                                            <ConnectFunction
                                                              direction="vertical"
                                                              droppableId="Done"
                                                              getContainerForClone={[Function]}
                                                              ignoreContainerClipping={false}
                                                              isCombineEnabled={false}
                                                              isDropDisabled={false}
                                                              mode="standard"
                                                              renderClone={null}
                                                              type="DEFAULT"
                                                            >
                                                              <Droppable
                                                                direction="vertical"
                                                                droppableId="Done"
                                                                getContainerForClone={[Function]}
                                                                ignoreContainerClipping={false}
                                                                isCombineEnabled={false}
                                                                isDropDisabled={false}
                                                                mode="standard"
                                                                placeholder={null}
                                                                renderClone={null}
                                                                shouldAnimatePlaceholder={false}
                                                                snapshot={
                                                                  Object {
                                                                    "draggingFromThisWith": null,
                                                                    "draggingOverWith": null,
                                                                    "isDraggingOver": false,
                                                                    "isUsingPlaceholder": false,
                                                                  }
                                                                }
                                                                type="DEFAULT"
                                                                updateViewportMaxScroll={[Function]}
                                                                useClone={null}
                                                              >
                                                                <styled.div
                                                                  data-rbd-droppable-context-id="2"
                                                                  data-rbd-droppable-id="Done"
                                                                  highlight={false}
                                                                  isDraggingOver={false}
                                                                >
                                                                  <StyledComponent
                                                                    data-rbd-droppable-context-id="2"
                                                                    data-rbd-droppable-id="Done"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-htpNat",
                                                                          "isStatic": false,
                                                                          "lastClassName": "jgdmCx",
                                                                          "rules": Array [
                                                                            "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                                            [Function],
                                                                            ";
",
                                                                          ],
                                                                        },
                                                                        "displayName": "styled.div",
                                                                        "foldedComponentIds": Array [],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-htpNat",
                                                                        "target": "div",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={[Function]}
                                                                    highlight={false}
                                                                    isDraggingOver={false}
                                                                  >
                                                                    <div
                                                                      className="sc-htpNat jgdmCx"
                                                                      data-rbd-droppable-context-id="2"
                                                                      data-rbd-droppable-id="Done"
                                                                    >
                                                                      <AnimateInOut
                                                                        on={null}
                                                                        shouldAnimate={false}
                                                                      />
                                                                    </div>
                                                                  </StyledComponent>
                                                                </styled.div>
                                                              </Droppable>
                                                            </ConnectFunction>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </Component>
>>>>>>> already_done
                                                  </div>
                                                </CardBody>
                                              </Transition>
                                            </Collapse>
                                          </div>
                                        </Card>
                                      </StyledComponent>
                                    </Styled(Card)>
                                  </InfoBarSection>
                                  <InfoBarSection
                                    open={false}
                                    setOpen={[Function]}
                                    title="Requirements"
                                  >
                                    <Styled(Card)
                                      bg="dark"
                                      text="white"
                                    >
                                      <StyledComponent
                                        bg="dark"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "Body": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardBody",
                                              "render": [Function],
                                            },
                                            "Footer": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardFooter",
                                              "render": [Function],
                                            },
                                            "Header": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardHeader",
                                              "render": [Function],
                                            },
                                            "Img": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": Object {
                                                "variant": null,
                                              },
                                              "displayName": "CardImg",
                                              "render": [Function],
                                            },
                                            "ImgOverlay": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardImgOverlay",
                                              "render": [Function],
                                            },
                                            "Link": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardLink",
                                              "render": [Function],
                                            },
                                            "Subtitle": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardSubtitle",
                                              "render": [Function],
                                            },
                                            "Text": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardText",
                                              "render": [Function],
                                            },
                                            "Title": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardTitle",
                                              "render": [Function],
                                            },
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                              "componentId": "sc-dnqmqq",
                                              "isStatic": false,
                                              "lastClassName": "hJxOZJ",
=======
                                              "componentId": "sc-htoDjs",
                                              "isStatic": false,
                                              "lastClassName": "keqScR",
>>>>>>> already_done
                                              "rules": Array [
                                                "
",
                                              ],
                                            },
                                            "displayName": "Styled(Card)",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
<<<<<<< HEAD
                                            "styledComponentId": "sc-dnqmqq",
=======
                                            "styledComponentId": "sc-htoDjs",
>>>>>>> already_done
                                            "target": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "Body": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardBody",
                                                "render": [Function],
                                              },
                                              "Footer": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardFooter",
                                                "render": [Function],
                                              },
                                              "Header": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardHeader",
                                                "render": [Function],
                                              },
                                              "Img": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": Object {
                                                  "variant": null,
                                                },
                                                "displayName": "CardImg",
                                                "render": [Function],
                                              },
                                              "ImgOverlay": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardImgOverlay",
                                                "render": [Function],
                                              },
                                              "Link": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardLink",
                                                "render": [Function],
                                              },
                                              "Subtitle": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardSubtitle",
                                                "render": [Function],
                                              },
                                              "Text": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardText",
                                                "render": [Function],
                                              },
                                              "Title": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardTitle",
                                                "render": [Function],
                                              },
                                              "defaultProps": Object {
                                                "body": false,
                                              },
                                              "displayName": "Card",
                                              "render": [Function],
                                            },
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        text="white"
                                      >
                                        <Card
                                          bg="dark"
                                          body={false}
<<<<<<< HEAD
                                          className="sc-dnqmqq hJxOZJ"
                                          text="white"
                                        >
                                          <div
                                            className="sc-dnqmqq hJxOZJ card bg-dark text-white"
=======
                                          className="sc-htoDjs keqScR"
                                          text="white"
                                        >
                                          <div
                                            className="sc-htoDjs keqScR card bg-dark text-white"
>>>>>>> already_done
                                          >
                                            <Styled(CardHeader)
                                              aria-controls="collapse-add-course"
                                              aria-expanded={false}
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                aria-controls="collapse-add-course"
                                                aria-expanded={false}
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                      "componentId": "sc-iwsKbI",
                                                      "isStatic": false,
                                                      "lastClassName": "fypTFz",
=======
                                                      "componentId": "sc-dnqmqq",
                                                      "isStatic": false,
                                                      "lastClassName": "fftazU",
>>>>>>> already_done
                                                      "rules": Array [
                                                        "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                                      ],
                                                    },
                                                    "displayName": "Styled(CardHeader)",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
<<<<<<< HEAD
                                                    "styledComponentId": "sc-iwsKbI",
=======
                                                    "styledComponentId": "sc-dnqmqq",
>>>>>>> already_done
                                                    "target": Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "defaultProps": undefined,
                                                      "displayName": "CardHeader",
                                                      "render": [Function],
                                                    },
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <CardHeader
                                                  aria-controls="collapse-add-course"
                                                  aria-expanded={false}
<<<<<<< HEAD
                                                  className="sc-iwsKbI fypTFz"
=======
                                                  className="sc-dnqmqq fftazU"
>>>>>>> already_done
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    aria-controls="collapse-add-course"
                                                    aria-expanded={false}
<<<<<<< HEAD
                                                    className="sc-iwsKbI fypTFz card-header"
=======
                                                    className="sc-dnqmqq fftazU card-header"
>>>>>>> already_done
                                                    onClick={[Function]}
                                                  >
                                                    <styled.i
                                                      className="fa fa-chevron-right"
                                                    >
                                                      <StyledComponent
                                                        className="fa fa-chevron-right"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                              "componentId": "sc-gZMcBi",
                                                              "isStatic": false,
                                                              "lastClassName": "dKgYPz",
=======
                                                              "componentId": "sc-iwsKbI",
                                                              "isStatic": false,
                                                              "lastClassName": "LdBUN",
>>>>>>> already_done
                                                              "rules": Array [
                                                                "
  float: left;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.i",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
<<<<<<< HEAD
                                                            "styledComponentId": "sc-gZMcBi",
=======
                                                            "styledComponentId": "sc-iwsKbI",
>>>>>>> already_done
                                                            "target": "i",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <i
<<<<<<< HEAD
                                                          className="sc-gZMcBi dKgYPz fa fa-chevron-right"
=======
                                                          className="sc-iwsKbI LdBUN fa fa-chevron-right"
>>>>>>> already_done
                                                        />
                                                      </StyledComponent>
                                                    </styled.i>
                                                    <styled.h5>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                              "componentId": "sc-htoDjs",
                                                              "isStatic": false,
                                                              "lastClassName": "bNWaiC",
=======
                                                              "componentId": "sc-gzVnrw",
                                                              "isStatic": false,
                                                              "lastClassName": "cvDevI",
>>>>>>> already_done
                                                              "rules": Array [
                                                                "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.h5",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
<<<<<<< HEAD
                                                            "styledComponentId": "sc-htoDjs",
=======
                                                            "styledComponentId": "sc-gzVnrw",
>>>>>>> already_done
                                                            "target": "h5",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <h5
<<<<<<< HEAD
                                                          className="sc-htoDjs bNWaiC"
=======
                                                          className="sc-gzVnrw cvDevI"
>>>>>>> already_done
                                                        >
                                                          Requirements
                                                        </h5>
                                                      </StyledComponent>
                                                    </styled.h5>
                                                  </div>
                                                </CardHeader>
                                              </StyledComponent>
                                            </Styled(CardHeader)>
                                            <Collapse
                                              appear={false}
                                              dimension="height"
                                              getDimensionValue={[Function]}
                                              in={false}
                                              mountOnEnter={false}
                                              timeout={300}
                                              unmountOnExit={false}
                                            >
                                              <Transition
                                                addEndListener={[Function]}
                                                appear={false}
                                                aria-expanded={null}
                                                enter={true}
                                                exit={true}
                                                in={false}
                                                mountOnEnter={false}
                                                onEnter={[Function]}
                                                onEntered={[Function]}
                                                onEntering={[Function]}
                                                onExit={[Function]}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <CardBody
                                                  aria-expanded={null}
                                                  className="collapse"
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse card-body"
                                                  >
                                                    <styled.div>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                              "componentId": "sc-hSdWYo",
                                                              "isStatic": false,
                                                              "lastClassName": "beBuDI",
=======
                                                              "componentId": "sc-iAyFgw",
                                                              "isStatic": false,
                                                              "lastClassName": "nKbrW",
>>>>>>> already_done
                                                              "rules": Array [
                                                                "
  padding: 4px;
  margin-bottom: 4px;
  font-family: inherit;
  text-align: left;
  color: inherit;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.div",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
<<<<<<< HEAD
                                                            "styledComponentId": "sc-hSdWYo",
=======
                                                            "styledComponentId": "sc-iAyFgw",
>>>>>>> already_done
                                                            "target": "div",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <div
<<<<<<< HEAD
                                                          className="sc-hSdWYo beBuDI"
=======
                                                          className="sc-iAyFgw nKbrW"
>>>>>>> already_done
                                                        >
                                                          <Requirements
                                                            degree_reqs={
                                                              Array [
                                                                Object {
                                                                  "filter_type": "Required courses",
                                                                  "info": "COMP3900",
                                                                  "units": 6,
                                                                },
                                                                Object {
                                                                  "filter_type": "Courses with options",
                                                                  "info": "[ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]",
                                                                  "units": 30,
                                                                },
                                                                Object {
                                                                  "filter_type": "General education",
                                                                  "info": "Any general education course",
                                                                  "units": 12,
                                                                },
                                                                Object {
                                                                  "filter_type": "Free electives",
                                                                  "info": "Any free elective",
                                                                  "units": 36,
                                                                },
                                                              ]
                                                            }
                                                          >
                                                            <div>
                                                              <styled.div>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                        "componentId": "sc-hMqMXs",
                                                                        "isStatic": false,
                                                                        "lastClassName": "dsQNry",
=======
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                                        "rules": Array [
                                                                          "
  display: flex;
  justify-content: space-between;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.div",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
<<<<<<< HEAD
                                                                      "styledComponentId": "sc-hMqMXs",
=======
                                                                      "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                                      "target": "div",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <div
<<<<<<< HEAD
                                                                    className="sc-hMqMXs dsQNry"
=======
                                                                    className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                                  >
                                                                    <styled.p>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                              "componentId": "sc-kEYyzF",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bLxoCc",
=======
                                                                              "componentId": "sc-hMqMXs",
                                                                              "isStatic": false,
                                                                              "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                                              "rules": Array [
                                                                                "
  font-weight: bold;
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.p",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
<<<<<<< HEAD
                                                                            "styledComponentId": "sc-kEYyzF",
=======
                                                                            "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                                            "target": "p",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <p
<<<<<<< HEAD
                                                                          className="sc-kEYyzF bLxoCc"
=======
                                                                          className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                                        >
                                                                          Required courses
                                                                        </p>
                                                                      </StyledComponent>
                                                                    </styled.p>
                                                                    <p>
                                                                      <span
                                                                        style={
                                                                          Object {
                                                                            "color": "#17a2b8",
                                                                          }
                                                                        }
                                                                      >
                                                                        <u>
                                                                          6 UOC
                                                                        </u>
                                                                         remaining
                                                                      </span>
                                                                    </p>
                                                                  </div>
                                                                </StyledComponent>
                                                              </styled.div>
                                                              <ul>
                                                                <li
                                                                  key="COMP3900"
                                                                >
                                                                  COMP3900
                                                                </li>
                                                              </ul>
                                                              <styled.div>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                        "componentId": "sc-hMqMXs",
                                                                        "isStatic": false,
                                                                        "lastClassName": "dsQNry",
=======
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                                        "rules": Array [
                                                                          "
  display: flex;
  justify-content: space-between;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.div",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
<<<<<<< HEAD
                                                                      "styledComponentId": "sc-hMqMXs",
=======
                                                                      "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                                      "target": "div",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <div
<<<<<<< HEAD
                                                                    className="sc-hMqMXs dsQNry"
=======
                                                                    className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                                  >
                                                                    <styled.p>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                              "componentId": "sc-kEYyzF",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bLxoCc",
=======
                                                                              "componentId": "sc-hMqMXs",
                                                                              "isStatic": false,
                                                                              "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                                              "rules": Array [
                                                                                "
  font-weight: bold;
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.p",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
<<<<<<< HEAD
                                                                            "styledComponentId": "sc-kEYyzF",
=======
                                                                            "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                                            "target": "p",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <p
<<<<<<< HEAD
                                                                          className="sc-kEYyzF bLxoCc"
=======
                                                                          className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                                        >
                                                                          Courses with options
                                                                        </p>
                                                                      </StyledComponent>
                                                                    </styled.p>
                                                                    <p>
                                                                      <span
                                                                        style={
                                                                          Object {
                                                                            "color": "#17a2b8",
                                                                          }
                                                                        }
                                                                      >
                                                                        <u>
                                                                          30 UOC
                                                                        </u>
                                                                         remaining
                                                                      </span>
                                                                    </p>
                                                                  </div>
                                                                </StyledComponent>
                                                              </styled.div>
                                                              <ul>
                                                                <li
                                                                  key="[ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]"
                                                                >
                                                                  [ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]
                                                                </li>
                                                              </ul>
                                                              <styled.div>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                        "componentId": "sc-hMqMXs",
                                                                        "isStatic": false,
                                                                        "lastClassName": "dsQNry",
=======
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                                        "rules": Array [
                                                                          "
  display: flex;
  justify-content: space-between;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.div",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
<<<<<<< HEAD
                                                                      "styledComponentId": "sc-hMqMXs",
=======
                                                                      "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                                      "target": "div",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <div
<<<<<<< HEAD
                                                                    className="sc-hMqMXs dsQNry"
=======
                                                                    className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                                  >
                                                                    <styled.p>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                              "componentId": "sc-kEYyzF",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bLxoCc",
=======
                                                                              "componentId": "sc-hMqMXs",
                                                                              "isStatic": false,
                                                                              "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                                              "rules": Array [
                                                                                "
  font-weight: bold;
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.p",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
<<<<<<< HEAD
                                                                            "styledComponentId": "sc-kEYyzF",
=======
                                                                            "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                                            "target": "p",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <p
<<<<<<< HEAD
                                                                          className="sc-kEYyzF bLxoCc"
=======
                                                                          className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                                        >
                                                                          General education
                                                                        </p>
                                                                      </StyledComponent>
                                                                    </styled.p>
                                                                    <p>
                                                                      <span
                                                                        style={
                                                                          Object {
                                                                            "color": "#17a2b8",
                                                                          }
                                                                        }
                                                                      >
                                                                        <u>
                                                                          12 UOC
                                                                        </u>
                                                                         remaining
                                                                      </span>
                                                                    </p>
                                                                  </div>
                                                                </StyledComponent>
                                                              </styled.div>
                                                              <ul>
                                                                <li
                                                                  key="Any general education course"
                                                                >
                                                                  Any general education course
                                                                </li>
                                                              </ul>
                                                              <styled.div>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                        "componentId": "sc-hMqMXs",
                                                                        "isStatic": false,
                                                                        "lastClassName": "dsQNry",
=======
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                                        "rules": Array [
                                                                          "
  display: flex;
  justify-content: space-between;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.div",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
<<<<<<< HEAD
                                                                      "styledComponentId": "sc-hMqMXs",
=======
                                                                      "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                                      "target": "div",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <div
<<<<<<< HEAD
                                                                    className="sc-hMqMXs dsQNry"
=======
                                                                    className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                                  >
                                                                    <styled.p>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                              "componentId": "sc-kEYyzF",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bLxoCc",
=======
                                                                              "componentId": "sc-hMqMXs",
                                                                              "isStatic": false,
                                                                              "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                                              "rules": Array [
                                                                                "
  font-weight: bold;
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.p",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
<<<<<<< HEAD
                                                                            "styledComponentId": "sc-kEYyzF",
=======
                                                                            "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                                            "target": "p",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <p
<<<<<<< HEAD
                                                                          className="sc-kEYyzF bLxoCc"
=======
                                                                          className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                                        >
                                                                          Free electives
                                                                        </p>
                                                                      </StyledComponent>
                                                                    </styled.p>
                                                                    <p>
                                                                      <span
                                                                        style={
                                                                          Object {
                                                                            "color": "#17a2b8",
                                                                          }
                                                                        }
                                                                      >
                                                                        <u>
                                                                          36 UOC
                                                                        </u>
                                                                         remaining
                                                                      </span>
                                                                    </p>
                                                                  </div>
                                                                </StyledComponent>
                                                              </styled.div>
                                                              <ul>
                                                                <li
                                                                  key="Any free elective"
                                                                >
                                                                  Any free elective
                                                                </li>
                                                              </ul>
                                                            </div>
                                                          </Requirements>
                                                        </div>
                                                      </StyledComponent>
                                                    </styled.div>
                                                  </div>
                                                </CardBody>
                                              </Transition>
                                            </Collapse>
                                          </div>
                                        </Card>
                                      </StyledComponent>
                                    </Styled(Card)>
                                  </InfoBarSection>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </InfoBar>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </Provider>
              </App>
            </ErrorBoundary>
          </DragDropContext>
        </div>
      </StyledComponent>
    </styled.div>
  </div>
</Timeline>
`;

exports[`Render degree planning timeline view displays missing course under requirements if a required course is missing 1`] = `
<Timeline
  match={
    Object {
      "params": Object {
        "degree": "3778",
        "reqs": undefined,
      },
    }
  }
>
  <div>
    <Navbar
      bg="dark"
      collapseOnSelect={false}
      expand={true}
      id="navbar"
      variant="dark"
    >
      <nav
        className="navbar navbar-expand navbar-dark bg-dark"
        id="navbar"
      >
        <NavbarBrand
          href="/"
        >
          <a
            className="navbar-brand"
            href="/"
          >
            <span
              aria-label="book"
              role="img"
            >
              📖
            </span>
             OnCourse
          </a>
        </NavbarBrand>
        <Nav
          className="mr-auto"
          fill={false}
          justify={false}
        >
          <ForwardRef
            as="div"
            className="mr-auto navbar-nav"
            onSelect={[Function]}
          >
            <div
              className="mr-auto navbar-nav"
              onKeyDown={[Function]}
            />
          </ForwardRef>
        </Nav>
        <Styled(Button)
          id="save"
          onClick={[Function]}
          variant="outline-info"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-brqgnP",
                  "isStatic": false,
                  "lastClassName": "iBVtEW",
                  "rules": Array [
                    "
  margin: 0px 8px;
",
                  ],
                },
                "displayName": "Styled(Button)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-brqgnP",
                "target": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "defaultProps": Object {
                    "active": false,
                    "disabled": false,
                    "type": "button",
                    "variant": "primary",
                  },
                  "displayName": "Button",
                  "render": [Function],
                },
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            id="save"
            onClick={[Function]}
            variant="outline-info"
          >
            <Button
              active={false}
              className="sc-brqgnP iBVtEW"
              disabled={false}
              id="save"
              onClick={[Function]}
              type="button"
              variant="outline-info"
            >
              <button
                className="sc-brqgnP iBVtEW btn btn-outline-info"
                disabled={false}
                id="save"
                onClick={[Function]}
                type="button"
              >
                <i
                  className="fa fa-save"
                />
              </button>
            </Button>
          </StyledComponent>
        </Styled(Button)>
      </nav>
    </Navbar>
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-hSdWYo",
              "isStatic": false,
<<<<<<< HEAD
              "lastClassName": "cJAIbX",
=======
              "lastClassName": "dKlVwM",
>>>>>>> already_done
              "rules": Array [
                "
  display: flex;
  justify-content: center;
  margin: 0px;
  padding: 0px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-hSdWYo",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
<<<<<<< HEAD
          className="sc-eHgmQL cJAIbX"
=======
          className="sc-hSdWYo dKlVwM"
>>>>>>> already_done
        >
          <DragDropContext
            onDragEnd={[Function]}
            onDragStart={[Function]}
          >
            <ErrorBoundary>
              <App
                contextId="1"
                liftInstruction="Draggable item. Ensure your screen reader is not in browse mode and then press space bar to lift."
                onDragEnd={[Function]}
                onDragStart={[Function]}
                setCallbacks={[Function]}
              >
                <Provider
                  context={
                    Object {
                      "$$typeof": Symbol(react.context),
                      "Consumer": Object {
                        "$$typeof": Symbol(react.context),
                        "_calculateChangedBits": null,
                        "_context": [Circular],
                      },
                      "Provider": Object {
                        "$$typeof": Symbol(react.provider),
                        "_context": [Circular],
                      },
                      "_calculateChangedBits": null,
                      "_currentRenderer": Object {},
                      "_currentRenderer2": null,
                      "_currentValue": null,
                      "_currentValue2": null,
                      "_threadCount": 0,
                    }
                  }
                  store={
                    Object {
                      "dispatch": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                      Symbol(observable): [Function],
                    }
                  }
                >
                  <div>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-cvbbAY",
                              "isStatic": false,
                              "lastClassName": "cUnnLD",
                              "rules": Array [
                                "
  float: left;
  width: 70%;
  padding: 10px;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-cvbbAY",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-cvbbAY cUnnLD"
                        >
                          <div
                            id="timeline"
                          >
                            <div
                              key="2019"
                            >
                              <styled.div
                                key="2019"
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
<<<<<<< HEAD
                                        "lastClassName": "hBAvqE",
=======
                                        "lastClassName": "cBwivr",
>>>>>>> already_done
                                        "rules": Array [
                                          "
  display: flex;
  margin: 0px;
  padding: 0px;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
<<<<<<< HEAD
                                    className="sc-cvbbAY hBAvqE"
=======
                                    className="sc-eHgmQL cBwivr"
>>>>>>> already_done
                                  >
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "COMP1511",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "DPST1091",
                                            "name": "Programming Fundamentals",
                                            "prereqs": "",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                          Object {
                                            "code": "MATH1131",
                                            "coreqs": "",
                                            "equivalents": "DPST1013",
                                            "exclusions": "DPST1013
MATH1151
MATH1031
MATH1141
ECON2291
MATH1011
ECON1202",
                                            "name": "Mathematics 1A",
                                            "prereqs": "",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                          Object {
                                            "code": "MATH1081",
                                            "coreqs": "(DPST1013 OR MATH1131 OR MATH1141 OR MATH1151)",
                                            "equivalents": "",
                                            "exclusions": "MATH1090",
                                            "name": "Discrete Mathematics",
                                            "prereqs": "",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="1 2019"
                                      name="1 2019"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "COMP1511",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "DPST1091",
                                              "name": "Programming Fundamentals",
                                              "prereqs": "",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                            Object {
                                              "code": "MATH1131",
                                              "coreqs": "",
                                              "equivalents": "DPST1013",
                                              "exclusions": "DPST1013
MATH1151
MATH1031
MATH1141
ECON2291
MATH1011
ECON1202",
                                              "name": "Mathematics 1A",
                                              "prereqs": "",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                            Object {
                                              "code": "MATH1081",
                                              "coreqs": "(DPST1013 OR MATH1131 OR MATH1141 OR MATH1151)",
                                              "equivalents": "",
                                              "exclusions": "MATH1090",
                                              "name": "Discrete Mathematics",
                                              "prereqs": "",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="1 2019"
                                        name="T1 2019"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T1 2019
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="1 2019"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="1 2019"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="1"
                                                    data-rbd-droppable-id="1 2019"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="1"
                                                      data-rbd-droppable-id="1 2019"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="1"
                                                        data-rbd-droppable-id="1 2019"
                                                      >
                                                        <Course
                                                          code="COMP1511"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="DPST1091"
                                                          index={0}
                                                          key="COMP1511"
                                                          name="Programming Fundamentals"
                                                          prereqs=""
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP1511"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP1511"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP1511"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP1511"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="COMP1511"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="COMP1511"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="COMP1511"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="COMP1511"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="COMP1511"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="COMP1511"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP1511
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP1511"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="DPST1091"
                                                              index={0}
                                                              name="Programming Fundamentals"
                                                              onHide={[Function]}
                                                              prereqs=""
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <Course
                                                          code="MATH1131"
                                                          coreqs=""
                                                          equivalents="DPST1013"
                                                          exclusions="DPST1013
MATH1151
MATH1031
MATH1141
ECON2291
MATH1011
ECON1202"
                                                          index={1}
                                                          key="MATH1131"
                                                          name="Mathematics 1A"
                                                          prereqs=""
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="MATH1131"
                                                              index={1}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="MATH1131"
                                                                index={1}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="MATH1131"
                                                                  index={1}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="MATH1131"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={1}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="MATH1131"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="MATH1131"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="MATH1131"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="MATH1131"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="MATH1131"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="MATH1131"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          MATH1131
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="MATH1131"
                                                              coreqs=""
                                                              equivalents="DPST1013"
                                                              exclusions="DPST1013
MATH1151
MATH1031
MATH1141
ECON2291
MATH1011
ECON1202"
                                                              index={1}
                                                              name="Mathematics 1A"
                                                              onHide={[Function]}
                                                              prereqs=""
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <Course
                                                          code="MATH1081"
                                                          coreqs="(DPST1013 OR MATH1131 OR MATH1141 OR MATH1151)"
                                                          equivalents=""
                                                          exclusions="MATH1090"
                                                          index={2}
                                                          key="MATH1081"
                                                          name="Discrete Mathematics"
                                                          prereqs=""
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="MATH1081"
                                                              index={2}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="MATH1081"
                                                                index={2}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="MATH1081"
                                                                  index={2}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="MATH1081"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={2}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="MATH1081"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="MATH1081"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="MATH1081"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="MATH1081"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="MATH1081"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="MATH1081"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          MATH1081
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="MATH1081"
                                                              coreqs="(DPST1013 OR MATH1131 OR MATH1141 OR MATH1151)"
                                                              equivalents=""
                                                              exclusions="MATH1090"
                                                              index={2}
                                                              name="Discrete Mathematics"
                                                              onHide={[Function]}
                                                              prereqs=""
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "COMP1521",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "DPST1092",
                                            "name": "Computer Systems Fundamentals",
                                            "prereqs": "(COMP1911 OR COMP1917 OR COMP1511 OR DPST1091)",
                                            "terms": Array [
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                          Object {
                                            "code": "MATH1231",
                                            "coreqs": "",
                                            "equivalents": "DPST1014",
                                            "exclusions": "ECON1202
MATH1241
DPST1014",
                                            "name": "Mathematics 1B",
                                            "prereqs": "(DPST1013 OR MATH1131 OR MATH1141)",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="2 2019"
                                      name="2 2019"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "COMP1521",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "DPST1092",
                                              "name": "Computer Systems Fundamentals",
                                              "prereqs": "(COMP1911 OR COMP1917 OR COMP1511 OR DPST1091)",
                                              "terms": Array [
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                            Object {
                                              "code": "MATH1231",
                                              "coreqs": "",
                                              "equivalents": "DPST1014",
                                              "exclusions": "ECON1202
MATH1241
DPST1014",
                                              "name": "Mathematics 1B",
                                              "prereqs": "(DPST1013 OR MATH1131 OR MATH1141)",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="2 2019"
                                        name="T2 2019"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T2 2019
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="2 2019"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="2 2019"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="1"
                                                    data-rbd-droppable-id="2 2019"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="1"
                                                      data-rbd-droppable-id="2 2019"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="1"
                                                        data-rbd-droppable-id="2 2019"
                                                      >
                                                        <Course
                                                          code="COMP1521"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="DPST1092"
                                                          index={0}
                                                          key="COMP1521"
                                                          name="Computer Systems Fundamentals"
                                                          prereqs="(COMP1911 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP1521"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP1521"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP1521"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP1521"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="COMP1521"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="COMP1521"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="COMP1521"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="COMP1521"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="COMP1521"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="COMP1521"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP1521
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP1521"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="DPST1092"
                                                              index={0}
                                                              name="Computer Systems Fundamentals"
                                                              onHide={[Function]}
                                                              prereqs="(COMP1911 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <Course
                                                          code="MATH1231"
                                                          coreqs=""
                                                          equivalents="DPST1014"
                                                          exclusions="ECON1202
MATH1241
DPST1014"
                                                          index={1}
                                                          key="MATH1231"
                                                          name="Mathematics 1B"
                                                          prereqs="(DPST1013 OR MATH1131 OR MATH1141)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="MATH1231"
                                                              index={1}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="MATH1231"
                                                                index={1}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="MATH1231"
                                                                  index={1}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="MATH1231"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={1}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="MATH1231"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="MATH1231"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="MATH1231"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="MATH1231"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="MATH1231"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="MATH1231"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          MATH1231
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="MATH1231"
                                                              coreqs=""
                                                              equivalents="DPST1014"
                                                              exclusions="ECON1202
MATH1241
DPST1014"
                                                              index={1}
                                                              name="Mathematics 1B"
                                                              onHide={[Function]}
                                                              prereqs="(DPST1013 OR MATH1131 OR MATH1141)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "COMP1531",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "SENG1020
SENG1031
SENG1010",
                                            "name": "Software Engineering Fundamentals",
                                            "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                          Object {
                                            "code": "COMP2521",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "COMP1927",
                                            "name": "Data Structures and Algorithms",
                                            "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                                            "terms": Array [
                                              Object {
                                                "term": 1,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 1,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="3 2019"
                                      name="3 2019"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "COMP1531",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "SENG1020
SENG1031
SENG1010",
                                              "name": "Software Engineering Fundamentals",
                                              "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                            Object {
                                              "code": "COMP2521",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "COMP1927",
                                              "name": "Data Structures and Algorithms",
                                              "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                                              "terms": Array [
                                                Object {
                                                  "term": 1,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 1,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="3 2019"
                                        name="T3 2019"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T3 2019
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="3 2019"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="3 2019"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="1"
                                                    data-rbd-droppable-id="3 2019"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="1"
                                                      data-rbd-droppable-id="3 2019"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="1"
                                                        data-rbd-droppable-id="3 2019"
                                                      >
                                                        <Course
                                                          code="COMP1531"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="SENG1020
SENG1031
SENG1010"
                                                          index={0}
                                                          key="COMP1531"
                                                          name="Software Engineering Fundamentals"
                                                          prereqs="(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP1531"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP1531"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP1531"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP1531"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="COMP1531"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="COMP1531"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="COMP1531"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="COMP1531"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="COMP1531"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="COMP1531"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP1531
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP1531"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="SENG1020
SENG1031
SENG1010"
                                                              index={0}
                                                              name="Software Engineering Fundamentals"
                                                              onHide={[Function]}
                                                              prereqs="(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <Course
                                                          code="COMP2521"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="COMP1927"
                                                          index={1}
                                                          key="COMP2521"
                                                          name="Data Structures and Algorithms"
                                                          prereqs="(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 1,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 1,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP2521"
                                                              index={1}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP2521"
                                                                index={1}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP2521"
                                                                  index={1}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP2521"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={1}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="COMP2521"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="COMP2521"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="COMP2521"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="COMP2521"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="COMP2521"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="COMP2521"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP2521
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP2521"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="COMP1927"
                                                              index={1}
                                                              name="Data Structures and Algorithms"
                                                              onHide={[Function]}
                                                              prereqs="(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 1,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </div>
                            <div
                              key="2020"
                            >
                              <styled.div
                                key="2020"
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
<<<<<<< HEAD
                                        "lastClassName": "hBAvqE",
=======
                                        "lastClassName": "cBwivr",
>>>>>>> already_done
                                        "rules": Array [
                                          "
  display: flex;
  margin: 0px;
  padding: 0px;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
<<<<<<< HEAD
                                    className="sc-cvbbAY hBAvqE"
=======
                                    className="sc-eHgmQL cBwivr"
>>>>>>> already_done
                                  >
                                    <Term
                                      courses={Array []}
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="1 2020"
                                      name="1 2020"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={Array []}
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="1 2020"
                                        name="T1 2020"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T1 2020
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="1 2020"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="1 2020"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="1"
                                                    data-rbd-droppable-id="1 2020"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="1"
                                                      data-rbd-droppable-id="1 2020"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="1"
                                                        data-rbd-droppable-id="1 2020"
                                                      >
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "COMP3121",
                                            "coreqs": "",
                                            "equivalents": "COMP3821
COMP9801
COMP3120
COMP9101",
                                            "exclusions": "",
                                            "name": "Algorithms and Programming Techniques",
                                            "prereqs": "(COMP1927 OR COMP2521)",
                                            "terms": Array [
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                          Object {
                                            "code": "COMP2511",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "COMP2911
COMP2011",
                                            "name": "Object-Oriented Design & Programming",
                                            "prereqs": "COMP1531
(COMP1927 OR COMP2521)",
                                            "terms": Array [
                                              Object {
                                                "term": 2,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 2,
                                                "year": 2025,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="2 2020"
                                      name="2 2020"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "COMP3121",
                                              "coreqs": "",
                                              "equivalents": "COMP3821
COMP9801
COMP3120
COMP9101",
                                              "exclusions": "",
                                              "name": "Algorithms and Programming Techniques",
                                              "prereqs": "(COMP1927 OR COMP2521)",
                                              "terms": Array [
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                            Object {
                                              "code": "COMP2511",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "COMP2911
COMP2011",
                                              "name": "Object-Oriented Design & Programming",
                                              "prereqs": "COMP1531
(COMP1927 OR COMP2521)",
                                              "terms": Array [
                                                Object {
                                                  "term": 2,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 2,
                                                  "year": 2025,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="2 2020"
                                        name="T2 2020"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T2 2020
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="2 2020"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="2 2020"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="1"
                                                    data-rbd-droppable-id="2 2020"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="1"
                                                      data-rbd-droppable-id="2 2020"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="1"
                                                        data-rbd-droppable-id="2 2020"
                                                      >
                                                        <Course
                                                          code="COMP3121"
                                                          coreqs=""
                                                          equivalents="COMP3821
COMP9801
COMP3120
COMP9101"
                                                          exclusions=""
                                                          index={0}
                                                          key="COMP3121"
                                                          name="Algorithms and Programming Techniques"
                                                          prereqs="(COMP1927 OR COMP2521)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP3121"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP3121"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP3121"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP3121"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="COMP3121"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="COMP3121"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="COMP3121"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="COMP3121"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="COMP3121"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="COMP3121"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP3121
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP3121"
                                                              coreqs=""
                                                              equivalents="COMP3821
COMP9801
COMP3120
COMP9101"
                                                              exclusions=""
                                                              index={0}
                                                              name="Algorithms and Programming Techniques"
                                                              onHide={[Function]}
                                                              prereqs="(COMP1927 OR COMP2521)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <Course
                                                          code="COMP2511"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="COMP2911
COMP2011"
                                                          index={1}
                                                          key="COMP2511"
                                                          name="Object-Oriented Design & Programming"
                                                          prereqs="COMP1531
(COMP1927 OR COMP2521)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 2,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 2,
                                                                "year": 2025,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP2511"
                                                              index={1}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP2511"
                                                                index={1}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP2511"
                                                                  index={1}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP2511"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={1}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="COMP2511"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="COMP2511"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="COMP2511"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="COMP2511"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="COMP2511"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="COMP2511"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP2511
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP2511"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="COMP2911
COMP2011"
                                                              index={1}
                                                              name="Object-Oriented Design & Programming"
                                                              onHide={[Function]}
                                                              prereqs="COMP1531
(COMP1927 OR COMP2521)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 2,
                                                                    "year": 2025,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={Array []}
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="3 2020"
                                      name="3 2020"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={Array []}
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="3 2020"
                                        name="T3 2020"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T3 2020
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="3 2020"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="3 2020"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="1"
                                                    data-rbd-droppable-id="3 2020"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="1"
                                                      data-rbd-droppable-id="3 2020"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="1"
                                                        data-rbd-droppable-id="3 2020"
                                                      >
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </div>
                            <div
                              key="2021"
                            >
                              <styled.div
                                key="2021"
                              >
                                <StyledComponent
                                  forwardedComponent={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "attrs": Array [],
                                      "componentStyle": ComponentStyle {
                                        "componentId": "sc-eHgmQL",
                                        "isStatic": false,
<<<<<<< HEAD
                                        "lastClassName": "hBAvqE",
=======
                                        "lastClassName": "cBwivr",
>>>>>>> already_done
                                        "rules": Array [
                                          "
  display: flex;
  margin: 0px;
  padding: 0px;
",
                                        ],
                                      },
                                      "displayName": "styled.div",
                                      "foldedComponentIds": Array [],
                                      "render": [Function],
                                      "styledComponentId": "sc-eHgmQL",
                                      "target": "div",
                                      "toString": [Function],
                                      "warnTooManyClasses": [Function],
                                      "withComponent": [Function],
                                    }
                                  }
                                  forwardedRef={null}
                                >
                                  <div
<<<<<<< HEAD
                                    className="sc-cvbbAY hBAvqE"
=======
                                    className="sc-eHgmQL cBwivr"
>>>>>>> already_done
                                  >
                                    <Term
                                      courses={Array []}
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="1 2021"
                                      name="1 2021"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={Array []}
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="1 2021"
                                        name="T1 2021"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T1 2021
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="1 2021"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="1 2021"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="1"
                                                    data-rbd-droppable-id="1 2021"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="1"
                                                      data-rbd-droppable-id="1 2021"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="1"
                                                        data-rbd-droppable-id="1 2021"
                                                      >
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={Array []}
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="2 2021"
                                      name="2 2021"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={Array []}
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="2 2021"
                                        name="T2 2021"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T2 2021
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="2 2021"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="2 2021"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="1"
                                                    data-rbd-droppable-id="2 2021"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="1"
                                                      data-rbd-droppable-id="2 2021"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="1"
                                                        data-rbd-droppable-id="2 2021"
                                                      >
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                    <Term
                                      courses={
                                        Array [
                                          Object {
                                            "code": "COMP4920",
                                            "coreqs": "",
                                            "equivalents": "",
                                            "exclusions": "BINF4920
SENG4920
SENG4921
COMP2920",
                                            "name": "Management and Ethics",
                                            "prereqs": "Enrollment in Computer Science (3778)
Final year in your degree
(COMP2511 OR COMP2911)",
                                            "terms": Array [
                                              Object {
                                                "term": 3,
                                                "year": 2019,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2020,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2021,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2022,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2023,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2024,
                                              },
                                              Object {
                                                "term": 3,
                                                "year": 2025,
                                              },
                                            ],
                                            "units": 6,
                                          },
                                        ]
                                      }
                                      getError={[Function]}
                                      getWarn={[Function]}
                                      key="3 2021"
                                      name="3 2021"
                                      removeCourse={[Function]}
                                    >
                                      <Component
                                        courses={
                                          Array [
                                            Object {
                                              "code": "COMP4920",
                                              "coreqs": "",
                                              "equivalents": "",
                                              "exclusions": "BINF4920
SENG4920
SENG4921
COMP2920",
                                              "name": "Management and Ethics",
                                              "prereqs": "Enrollment in Computer Science (3778)
Final year in your degree
(COMP2511 OR COMP2911)",
                                              "terms": Array [
                                                Object {
                                                  "term": 3,
                                                  "year": 2019,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2020,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2021,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2022,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2023,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2024,
                                                },
                                                Object {
                                                  "term": 3,
                                                  "year": 2025,
                                                },
                                              ],
                                              "units": 6,
                                            },
                                          ]
                                        }
                                        getError={[Function]}
                                        getWarn={[Function]}
                                        id="3 2021"
                                        name="T3 2021"
                                        removeCourse={[Function]}
                                      >
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-bxivhb",
                                                  "isStatic": false,
                                                  "lastClassName": "dJmCIm",
                                                  "rules": Array [
                                                    "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-bxivhb",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-bxivhb dJmCIm"
                                            >
                                              <styled.h3>
                                                <StyledComponent
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-ifAKCX",
                                                        "isStatic": false,
                                                        "lastClassName": "hMawfQ",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.h3",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-ifAKCX",
                                                      "target": "h3",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                >
                                                  <h3
                                                    className="sc-ifAKCX hMawfQ"
                                                  >
                                                    T3 2021
                                                  </h3>
                                                </StyledComponent>
                                              </styled.h3>
                                              <ConnectFunction
                                                direction="vertical"
                                                droppableId="3 2021"
                                                getContainerForClone={[Function]}
                                                ignoreContainerClipping={false}
                                                isCombineEnabled={false}
                                                isDropDisabled={false}
                                                mode="standard"
                                                renderClone={null}
                                                type="DEFAULT"
                                              >
                                                <Droppable
                                                  direction="vertical"
                                                  droppableId="3 2021"
                                                  getContainerForClone={[Function]}
                                                  ignoreContainerClipping={false}
                                                  isCombineEnabled={false}
                                                  isDropDisabled={false}
                                                  mode="standard"
                                                  placeholder={null}
                                                  renderClone={null}
                                                  shouldAnimatePlaceholder={false}
                                                  snapshot={
                                                    Object {
                                                      "draggingFromThisWith": null,
                                                      "draggingOverWith": null,
                                                      "isDraggingOver": false,
                                                      "isUsingPlaceholder": false,
                                                    }
                                                  }
                                                  type="DEFAULT"
                                                  updateViewportMaxScroll={[Function]}
                                                  useClone={null}
                                                >
                                                  <styled.div
                                                    data-rbd-droppable-context-id="1"
                                                    data-rbd-droppable-id="3 2021"
                                                    isDraggingOver={false}
                                                  >
                                                    <StyledComponent
                                                      data-rbd-droppable-context-id="1"
                                                      data-rbd-droppable-id="3 2021"
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
                                                            "componentId": "sc-htpNat",
                                                            "isStatic": false,
                                                            "lastClassName": "jgdmCx",
                                                            "rules": Array [
                                                              "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                              [Function],
                                                              ";
",
                                                            ],
                                                          },
                                                          "displayName": "styled.div",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
                                                          "styledComponentId": "sc-htpNat",
                                                          "target": "div",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={[Function]}
                                                      isDraggingOver={false}
                                                    >
                                                      <div
                                                        className="sc-htpNat jgdmCx"
                                                        data-rbd-droppable-context-id="1"
                                                        data-rbd-droppable-id="3 2021"
                                                      >
                                                        <Course
                                                          code="COMP4920"
                                                          coreqs=""
                                                          equivalents=""
                                                          exclusions="BINF4920
SENG4920
SENG4921
COMP2920"
                                                          index={0}
                                                          key="COMP4920"
                                                          name="Management and Ethics"
                                                          prereqs="Enrollment in Computer Science (3778)
Final year in your degree
(COMP2511 OR COMP2911)"
                                                          removeCourse={[Function]}
                                                          terms={
                                                            Array [
                                                              Object {
                                                                "term": 3,
                                                                "year": 2019,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2020,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2021,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2022,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2023,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2024,
                                                              },
                                                              Object {
                                                                "term": 3,
                                                                "year": 2025,
                                                              },
                                                            ]
                                                          }
                                                          units={6}
                                                        >
                                                          <div>
                                                            <PublicDraggable
                                                              draggableId="COMP4920"
                                                              index={0}
                                                            >
                                                              <PrivateDraggable
                                                                canDragInteractiveElements={false}
                                                                draggableId="COMP4920"
                                                                index={0}
                                                                isClone={false}
                                                                isEnabled={true}
                                                                shouldRespectForcePress={false}
                                                              >
                                                                <Connect(Draggable)
                                                                  canDragInteractiveElements={false}
                                                                  draggableId="COMP4920"
                                                                  index={0}
                                                                  isClone={false}
                                                                  isEnabled={true}
                                                                  shouldRespectForcePress={false}
                                                                >
                                                                  <Draggable
                                                                    canDragInteractiveElements={false}
                                                                    draggableId="COMP4920"
                                                                    dropAnimationFinished={[Function]}
                                                                    index={0}
                                                                    isClone={false}
                                                                    isEnabled={true}
                                                                    mapped={
                                                                      Object {
                                                                        "combineTargetFor": null,
                                                                        "offset": Object {
                                                                          "x": 0,
                                                                          "y": 0,
                                                                        },
                                                                        "shouldAnimateDisplacement": true,
                                                                        "snapshot": Object {
                                                                          "combineTargetFor": null,
                                                                          "combineWith": null,
                                                                          "draggingOver": null,
                                                                          "dropAnimation": null,
                                                                          "isClone": false,
                                                                          "isDragging": false,
                                                                          "isDropAnimating": false,
                                                                          "mode": null,
                                                                        },
                                                                        "type": "SECONDARY",
                                                                      }
                                                                    }
                                                                    shouldRespectForcePress={false}
                                                                  >
                                                                    <styled.div
                                                                      aria-labelledby="rbd-lift-instruction-1"
                                                                      data-rbd-drag-handle-context-id="1"
                                                                      data-rbd-drag-handle-draggable-id="COMP4920"
                                                                      data-rbd-draggable-context-id="1"
                                                                      data-rbd-draggable-id="COMP4920"
                                                                      draggable={false}
                                                                      hasError={false}
                                                                      hasWarning={false}
                                                                      isDragging={false}
                                                                      onClick={[Function]}
                                                                      onDragStart={[Function]}
                                                                      onTransitionEnd={null}
                                                                      style={
                                                                        Object {
                                                                          "transform": null,
                                                                          "transition": null,
                                                                        }
                                                                      }
                                                                      tabIndex={0}
                                                                    >
                                                                      <StyledComponent
                                                                        aria-labelledby="rbd-lift-instruction-1"
                                                                        data-rbd-drag-handle-context-id="1"
                                                                        data-rbd-drag-handle-draggable-id="COMP4920"
                                                                        data-rbd-draggable-context-id="1"
                                                                        data-rbd-draggable-id="COMP4920"
                                                                        draggable={false}
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
                                                                              "componentId": "sc-bwzfXH",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bBrTaZ",
                                                                              "rules": Array [
                                                                                "
  color: black;
  border: 2px solid lightgrey;
  border-radius: 6px;
  padding: 8px;
  margin-bottom: 8px;
  background-color: ",
                                                                                [Function],
                                                                                ";

  &:hover {
    background-color: ",
                                                                                [Function],
                                                                                ";
  }
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.div",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
                                                                            "styledComponentId": "sc-bwzfXH",
                                                                            "target": "div",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={[Function]}
                                                                        hasError={false}
                                                                        hasWarning={false}
                                                                        isDragging={false}
                                                                        onClick={[Function]}
                                                                        onDragStart={[Function]}
                                                                        onTransitionEnd={null}
                                                                        style={
                                                                          Object {
                                                                            "transform": null,
                                                                            "transition": null,
                                                                          }
                                                                        }
                                                                        tabIndex={0}
                                                                      >
                                                                        <div
                                                                          aria-labelledby="rbd-lift-instruction-1"
                                                                          className="sc-bwzfXH bBrTaZ"
                                                                          data-rbd-drag-handle-context-id="1"
                                                                          data-rbd-drag-handle-draggable-id="COMP4920"
                                                                          data-rbd-draggable-context-id="1"
                                                                          data-rbd-draggable-id="COMP4920"
                                                                          draggable={false}
                                                                          onClick={[Function]}
                                                                          onDragStart={[Function]}
                                                                          onTransitionEnd={null}
                                                                          style={
                                                                            Object {
                                                                              "transform": null,
                                                                              "transition": null,
                                                                            }
                                                                          }
                                                                          tabIndex={0}
                                                                        >
                                                                          COMP4920
                                                                        </div>
                                                                      </StyledComponent>
                                                                    </styled.div>
                                                                  </Draggable>
                                                                </Connect(Draggable)>
                                                              </PrivateDraggable>
                                                            </PublicDraggable>
                                                            <CourseInfoModal
                                                              code="COMP4920"
                                                              coreqs=""
                                                              equivalents=""
                                                              exclusions="BINF4920
SENG4920
SENG4921
COMP2920"
                                                              index={0}
                                                              name="Management and Ethics"
                                                              onHide={[Function]}
                                                              prereqs="Enrollment in Computer Science (3778)
Final year in your degree
(COMP2511 OR COMP2911)"
                                                              removeCourse={[Function]}
                                                              show={false}
                                                              terms={
                                                                Array [
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2019,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2020,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2021,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2022,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2023,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2024,
                                                                  },
                                                                  Object {
                                                                    "term": 3,
                                                                    "year": 2025,
                                                                  },
                                                                ]
                                                              }
                                                              units={6}
                                                            >
                                                              <Bootstrap(Modal)
                                                                aria-labelledby="contained-modal-title-vcenter"
                                                                centered={true}
                                                                onHide={[Function]}
                                                                show={false}
                                                                size="lg"
                                                              >
                                                                <Modal
                                                                  animation={true}
                                                                  aria-labelledby="contained-modal-title-vcenter"
                                                                  autoFocus={true}
                                                                  backdrop={true}
                                                                  bsPrefix="modal"
                                                                  centered={true}
                                                                  dialogAs={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "displayName": "ModalDialog",
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  enforceFocus={true}
                                                                  keyboard={true}
                                                                  manager={
                                                                    BootstrapModalManager {
                                                                      "adjustAndStore": [Function],
                                                                      "containers": Array [],
                                                                      "data": Array [],
                                                                      "handleContainerOverflow": true,
                                                                      "hideSiblingNodes": true,
                                                                      "modals": Array [],
                                                                      "restore": [Function],
                                                                      "scrollbarSize": 0,
                                                                    }
                                                                  }
                                                                  onHide={[Function]}
                                                                  restoreFocus={true}
                                                                  show={false}
                                                                  size="lg"
                                                                >
                                                                  <Modal
                                                                    autoFocus={true}
                                                                    backdrop={true}
                                                                    backdropTransition={[Function]}
                                                                    className="modal"
                                                                    containerClassName="modal-open"
                                                                    enforceFocus={true}
                                                                    keyboard={true}
                                                                    manager={
                                                                      BootstrapModalManager {
                                                                        "adjustAndStore": [Function],
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                        "restore": [Function],
                                                                        "scrollbarSize": 0,
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onEnter={[Function]}
                                                                    onEntering={[Function]}
                                                                    onExited={[Function]}
                                                                    onHide={[Function]}
                                                                    onMouseUp={[Function]}
                                                                    renderBackdrop={[Function]}
                                                                    restoreFocus={true}
                                                                    role="dialog"
                                                                    show={false}
                                                                    style={Object {}}
                                                                    transition={[Function]}
                                                                  />
                                                                </Modal>
                                                              </Bootstrap(Modal)>
                                                            </CourseInfoModal>
                                                          </div>
                                                        </Course>
                                                        <AnimateInOut
                                                          on={null}
                                                          shouldAnimate={false}
                                                        />
                                                      </div>
                                                    </StyledComponent>
                                                  </styled.div>
                                                </Droppable>
                                              </ConnectFunction>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </Component>
                                    </Term>
                                  </div>
                                </StyledComponent>
                              </styled.div>
                            </div>
                          </div>
                          <Styled(Button)
                            onClick={[Function]}
                            variant="info"
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cMljjf",
                                    "isStatic": false,
                                    "lastClassName": "gfjBxS",
                                    "rules": Array [
                                      "
&& {
  display: inline-block;
  font-weight: 400;
  font-size: 30px;
  padding: .375rem .75rem;
  border: 1px solid transparent;
  border-radius: .25rem;
  transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}
  min-width: 55px;
  margin: 6px;
  text-align: center;
  vertical-align: middle;
  padding: 0px;
",
                                    ],
                                  },
                                  "displayName": "Styled(Button)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cMljjf",
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": Object {
                                      "active": false,
                                      "disabled": false,
                                      "type": "button",
                                      "variant": "primary",
                                    },
                                    "displayName": "Button",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              variant="info"
                            >
                              <Button
                                active={false}
                                className="sc-cMljjf gfjBxS"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                                variant="info"
                              >
                                <button
                                  className="sc-cMljjf gfjBxS btn btn-info"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  +
                                </button>
                              </Button>
                            </StyledComponent>
                          </Styled(Button)>
                          <Styled(Button)
                            onClick={[Function]}
                            variant="info"
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-cMljjf",
                                    "isStatic": false,
                                    "lastClassName": "gfjBxS",
                                    "rules": Array [
                                      "
&& {
  display: inline-block;
  font-weight: 400;
  font-size: 30px;
  padding: .375rem .75rem;
  border: 1px solid transparent;
  border-radius: .25rem;
  transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
}
  min-width: 55px;
  margin: 6px;
  text-align: center;
  vertical-align: middle;
  padding: 0px;
",
                                    ],
                                  },
                                  "displayName": "Styled(Button)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-cMljjf",
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": Object {
                                      "active": false,
                                      "disabled": false,
                                      "type": "button",
                                      "variant": "primary",
                                    },
                                    "displayName": "Button",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              variant="info"
                            >
                              <Button
                                active={false}
                                className="sc-cMljjf gfjBxS"
                                disabled={false}
                                onClick={[Function]}
                                type="button"
                                variant="info"
                              >
                                <button
                                  className="sc-cMljjf gfjBxS btn btn-info"
                                  disabled={false}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  -
                                </button>
                              </Button>
                            </StyledComponent>
                          </Styled(Button)>
                        </div>
                      </StyledComponent>
                    </styled.div>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-jWBwVP",
                              "isStatic": false,
<<<<<<< HEAD
                              "lastClassName": "fJaogs",
=======
                              "lastClassName": "dEnKGG",
>>>>>>> already_done
                              "rules": Array [
                                "
  display: flex;
  justify-content: flex-end;
  margin: 0px;
  padding: 0px;
  width: 30%;
  overflow: hidden;
<<<<<<< HEAD
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-brqgnP",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-brqgnP fJaogs"
                        >
                          <InfoBar
                            add_event={[Function]}
                            degree_id="3778"
                            degree_name="Computer Science"
                            degree_reqs={
                              Array [
                                Object {
                                  "filter_type": "Required courses",
                                  "info": "COMP3900",
                                  "units": 6,
                                },
                                Object {
                                  "filter_type": "Courses with options",
                                  "info": "[ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]",
                                  "units": 30,
                                },
                                Object {
                                  "filter_type": "General education",
                                  "info": "Any general education course",
                                  "units": 12,
                                },
                                Object {
                                  "filter_type": "Free electives",
                                  "info": "Any free elective",
                                  "units": 36,
                                },
                              ]
                            }
                            remove_course={[Function]}
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kkGfuU",
                                      "isStatic": false,
                                      "lastClassName": "dUkchd",
                                      "rules": Array [
                                        "
  &::-webkit-scrollbar {
    display: none;
  }

  padding-top: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 350px;
  max-height: 90vh;
  overflow-y: auto;
  box-sizing: content-box;
  text-align: center;
  background-color: #343a40;
  color: white;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kkGfuU",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-kkGfuU dUkchd"
                                >
                                  <styled.h3>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-iAyFgw",
                                            "isStatic": false,
                                            "lastClassName": "bsxapa",
                                            "rules": Array [
                                              "
  padding: 8px;
  margin: 0px;
  font-family: inherit;
  border-bottom: 1px solid lightgrey;
  color: inherit;
",
                                            ],
                                          },
                                          "displayName": "styled.h3",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-iAyFgw",
                                          "target": "h3",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h3
                                        className="sc-iAyFgw bsxapa"
                                      >
                                        Computer Science
                                        <br />
                                        3778
                                      </h3>
                                    </StyledComponent>
                                  </styled.h3>
                                  <InfoBarSection
                                    open={true}
                                    setOpen={[Function]}
                                    title="Add a Course"
=======
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-jWBwVP",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="sc-jWBwVP dEnKGG"
                        >
                          <InfoBar
                            add_event={[Function]}
                            degree_id="3778"
                            degree_name="Computer Science"
                            degree_reqs={
                              Array [
                                Object {
                                  "filter_type": "Required courses",
                                  "info": "COMP3900",
                                  "units": 6,
                                },
                                Object {
                                  "filter_type": "Courses with options",
                                  "info": "[ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]",
                                  "units": 30,
                                },
                                Object {
                                  "filter_type": "General education",
                                  "info": "Any general education course",
                                  "units": 12,
                                },
                                Object {
                                  "filter_type": "Free electives",
                                  "info": "Any free elective",
                                  "units": 36,
                                },
                              ]
                            }
                            done_courses={Array []}
                            remove_course={[Function]}
                            standby_courses={Array []}
                          >
                            <styled.div>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kEYyzF",
                                      "isStatic": false,
                                      "lastClassName": "zzhEK",
                                      "rules": Array [
                                        "
  &::-webkit-scrollbar {
    display: none;
  }

  padding-top: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 350px;
  max-height: 90vh;
  overflow-y: auto;
  box-sizing: content-box;
  text-align: center;
  background-color: #343a40;
  color: white;
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kEYyzF",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <div
                                  className="sc-kEYyzF zzhEK"
                                >
                                  <styled.h3>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-kkGfuU",
                                            "isStatic": false,
                                            "lastClassName": "jKNyZI",
                                            "rules": Array [
                                              "
  padding: 8px;
  margin: 0px;
  font-family: inherit;
  border-bottom: 1px solid lightgrey;
  color: inherit;
",
                                            ],
                                          },
                                          "displayName": "styled.h3",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-kkGfuU",
                                          "target": "h3",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h3
                                        className="sc-kkGfuU jKNyZI"
                                      >
                                        Computer Science
                                        <br />
                                        3778
                                      </h3>
                                    </StyledComponent>
                                  </styled.h3>
                                  <InfoBarSection
                                    open={true}
                                    setOpen={[Function]}
                                    title="Add a Course"
                                  >
                                    <Styled(Card)
                                      bg="dark"
                                      text="white"
                                    >
                                      <StyledComponent
                                        bg="dark"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "Body": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardBody",
                                              "render": [Function],
                                            },
                                            "Footer": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardFooter",
                                              "render": [Function],
                                            },
                                            "Header": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardHeader",
                                              "render": [Function],
                                            },
                                            "Img": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": Object {
                                                "variant": null,
                                              },
                                              "displayName": "CardImg",
                                              "render": [Function],
                                            },
                                            "ImgOverlay": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardImgOverlay",
                                              "render": [Function],
                                            },
                                            "Link": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardLink",
                                              "render": [Function],
                                            },
                                            "Subtitle": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardSubtitle",
                                              "render": [Function],
                                            },
                                            "Text": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardText",
                                              "render": [Function],
                                            },
                                            "Title": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardTitle",
                                              "render": [Function],
                                            },
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-htoDjs",
                                              "isStatic": false,
                                              "lastClassName": "keqScR",
                                              "rules": Array [
                                                "
",
                                              ],
                                            },
                                            "displayName": "Styled(Card)",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-htoDjs",
                                            "target": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "Body": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardBody",
                                                "render": [Function],
                                              },
                                              "Footer": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardFooter",
                                                "render": [Function],
                                              },
                                              "Header": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardHeader",
                                                "render": [Function],
                                              },
                                              "Img": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": Object {
                                                  "variant": null,
                                                },
                                                "displayName": "CardImg",
                                                "render": [Function],
                                              },
                                              "ImgOverlay": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardImgOverlay",
                                                "render": [Function],
                                              },
                                              "Link": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardLink",
                                                "render": [Function],
                                              },
                                              "Subtitle": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardSubtitle",
                                                "render": [Function],
                                              },
                                              "Text": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardText",
                                                "render": [Function],
                                              },
                                              "Title": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardTitle",
                                                "render": [Function],
                                              },
                                              "defaultProps": Object {
                                                "body": false,
                                              },
                                              "displayName": "Card",
                                              "render": [Function],
                                            },
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        text="white"
                                      >
                                        <Card
                                          bg="dark"
                                          body={false}
                                          className="sc-htoDjs keqScR"
                                          text="white"
                                        >
                                          <div
                                            className="sc-htoDjs keqScR card bg-dark text-white"
                                          >
                                            <Styled(CardHeader)
                                              aria-controls="collapse-add-course"
                                              aria-expanded={true}
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                aria-controls="collapse-add-course"
                                                aria-expanded={true}
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-dnqmqq",
                                                      "isStatic": false,
                                                      "lastClassName": "fftazU",
                                                      "rules": Array [
                                                        "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                                      ],
                                                    },
                                                    "displayName": "Styled(CardHeader)",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-dnqmqq",
                                                    "target": Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "defaultProps": undefined,
                                                      "displayName": "CardHeader",
                                                      "render": [Function],
                                                    },
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <CardHeader
                                                  aria-controls="collapse-add-course"
                                                  aria-expanded={true}
                                                  className="sc-dnqmqq fftazU"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    aria-controls="collapse-add-course"
                                                    aria-expanded={true}
                                                    className="sc-dnqmqq fftazU card-header"
                                                    onClick={[Function]}
                                                  >
                                                    <styled.i
                                                      className="fa fa-chevron-down"
                                                    >
                                                      <StyledComponent
                                                        className="fa fa-chevron-down"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-iwsKbI",
                                                              "isStatic": false,
                                                              "lastClassName": "LdBUN",
                                                              "rules": Array [
                                                                "
  float: left;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.i",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-iwsKbI",
                                                            "target": "i",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <i
                                                          className="sc-iwsKbI LdBUN fa fa-chevron-down"
                                                        />
                                                      </StyledComponent>
                                                    </styled.i>
                                                    <styled.h5>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-gzVnrw",
                                                              "isStatic": false,
                                                              "lastClassName": "cvDevI",
                                                              "rules": Array [
                                                                "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.h5",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-gzVnrw",
                                                            "target": "h5",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <h5
                                                          className="sc-gzVnrw cvDevI"
                                                        >
                                                          Add a Course
                                                        </h5>
                                                      </StyledComponent>
                                                    </styled.h5>
                                                  </div>
                                                </CardHeader>
                                              </StyledComponent>
                                            </Styled(CardHeader)>
                                            <Collapse
                                              appear={false}
                                              dimension="height"
                                              getDimensionValue={[Function]}
                                              in={true}
                                              mountOnEnter={false}
                                              timeout={300}
                                              unmountOnExit={false}
                                            >
                                              <Transition
                                                addEndListener={[Function]}
                                                appear={false}
                                                aria-expanded={null}
                                                enter={true}
                                                exit={true}
                                                in={true}
                                                mountOnEnter={false}
                                                onEnter={[Function]}
                                                onEntered={[Function]}
                                                onEntering={[Function]}
                                                onExit={[Function]}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <CardBody
                                                  aria-expanded={null}
                                                  className="collapse show"
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse show card-body"
                                                  >
                                                    <p>
                                                      Search for a course and click on it. Then drag the course into your timeline from the 
                                                      <b>
                                                        Tray
                                                      </b>
                                                      .
                                                    </p>
                                                    <Component
                                                      courses={Array []}
                                                      highlight={false}
                                                      id="Add"
                                                      name="Tray"
                                                      removeCourse={[Function]}
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-EHOje",
                                                                "isStatic": false,
                                                                "lastClassName": "gIuBAP",
                                                                "rules": Array [
                                                                  "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-EHOje",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-EHOje gIuBAP"
                                                          >
                                                            <styled.h5>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-bZQynM",
                                                                      "isStatic": false,
                                                                      "lastClassName": "btxUkQ",
                                                                      "rules": Array [
                                                                        "
  padding: 8px;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.h5",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-bZQynM",
                                                                    "target": "h5",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <h5
                                                                  className="sc-bZQynM btxUkQ"
                                                                >
                                                                  Tray
                                                                </h5>
                                                              </StyledComponent>
                                                            </styled.h5>
                                                            <ConnectFunction
                                                              direction="vertical"
                                                              droppableId="Add"
                                                              getContainerForClone={[Function]}
                                                              ignoreContainerClipping={false}
                                                              isCombineEnabled={false}
                                                              isDropDisabled={false}
                                                              mode="standard"
                                                              renderClone={null}
                                                              type="DEFAULT"
                                                            >
                                                              <Droppable
                                                                direction="vertical"
                                                                droppableId="Add"
                                                                getContainerForClone={[Function]}
                                                                ignoreContainerClipping={false}
                                                                isCombineEnabled={false}
                                                                isDropDisabled={false}
                                                                mode="standard"
                                                                placeholder={null}
                                                                renderClone={null}
                                                                shouldAnimatePlaceholder={false}
                                                                snapshot={
                                                                  Object {
                                                                    "draggingFromThisWith": null,
                                                                    "draggingOverWith": null,
                                                                    "isDraggingOver": false,
                                                                    "isUsingPlaceholder": false,
                                                                  }
                                                                }
                                                                type="DEFAULT"
                                                                updateViewportMaxScroll={[Function]}
                                                                useClone={null}
                                                              >
                                                                <styled.div
                                                                  data-rbd-droppable-context-id="1"
                                                                  data-rbd-droppable-id="Add"
                                                                  highlight={false}
                                                                  isDraggingOver={false}
                                                                >
                                                                  <StyledComponent
                                                                    data-rbd-droppable-context-id="1"
                                                                    data-rbd-droppable-id="Add"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-htpNat",
                                                                          "isStatic": false,
                                                                          "lastClassName": "jgdmCx",
                                                                          "rules": Array [
                                                                            "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                                            [Function],
                                                                            ";
",
                                                                          ],
                                                                        },
                                                                        "displayName": "styled.div",
                                                                        "foldedComponentIds": Array [],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-htpNat",
                                                                        "target": "div",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={[Function]}
                                                                    highlight={false}
                                                                    isDraggingOver={false}
                                                                  >
                                                                    <div
                                                                      className="sc-htpNat jgdmCx"
                                                                      data-rbd-droppable-context-id="1"
                                                                      data-rbd-droppable-id="Add"
                                                                    >
                                                                      <AnimateInOut
                                                                        on={null}
                                                                        shouldAnimate={false}
                                                                      />
                                                                    </div>
                                                                  </StyledComponent>
                                                                </styled.div>
                                                              </Droppable>
                                                            </ConnectFunction>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </Component>
                                                    <SearchCourses
                                                      add_event={[Function]}
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-ckVGcZ",
                                                                "isStatic": false,
                                                                "lastClassName": "fcibBt",
                                                                "rules": Array [
                                                                  "
  padding: 3px;
  margin: 0;
  text-align: center;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-ckVGcZ",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-ckVGcZ fcibBt"
                                                          >
                                                            <form>
                                                              <Styled(styled.input)
                                                                onChange={[Function]}
                                                                placeholder="Search for a course..."
                                                              >
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
                                                                        "componentId": "sc-jKJlTe",
                                                                        "isStatic": false,
                                                                        "lastClassName": "iZEjBx",
                                                                        "rules": Array [
                                                                          "

  &:focus {
    outline: none;
    &::placeholder {
      color: transparent;
    }
  }
  box-shadow: 10px 10px grey;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  padding: 1% 4%;
  margin-bottom: 2%;
  transition: background-colour .2s ease-in;
  font-size: 30px;
  line-height: 18px;
  background-color: transparent;
  background-image: url(\\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\");
  background-repeat: no-repeat;
  background-size: 40px 40px;
  background-position: 95% center;

  border-radius: 50px;
  border: 1px solid #575756;
",
                                                                          "

&::placeholder {
  color: rgba(255, 255, 255, 0.75);
}
  width: 95%;
  padding: 12px 24px;
  margin-bottom: 1%;

  font-size: 14px;
  line-height: 18px;
  font-color: white;

  color: white;
  background-size: 18px 18px;
  background-position: 95% center;
  border: 1px solid white;

  box-shadow: 0px 0px;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "Styled(styled.input)",
                                                                      "foldedComponentIds": Array [
                                                                        "sc-kGXeez",
                                                                      ],
                                                                      "render": [Function],
                                                                      "styledComponentId": "sc-jKJlTe",
                                                                      "target": "input",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={
                                                                    Object {
                                                                      "current": <input
                                                                        class="sc-kGXeez sc-jKJlTe iZEjBx"
                                                                        placeholder="Search for a course..."
                                                                      />,
                                                                    }
                                                                  }
                                                                  onChange={[Function]}
                                                                  placeholder="Search for a course..."
                                                                >
                                                                  <input
                                                                    className="sc-kGXeez sc-jKJlTe iZEjBx"
                                                                    onChange={[Function]}
                                                                    placeholder="Search for a course..."
                                                                  />
                                                                </StyledComponent>
                                                              </Styled(styled.input)>
                                                            </form>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </SearchCourses>
                                                  </div>
                                                </CardBody>
                                              </Transition>
                                            </Collapse>
                                          </div>
                                        </Card>
                                      </StyledComponent>
                                    </Styled(Card)>
                                  </InfoBarSection>
                                  <InfoBarSection
                                    open={false}
                                    setOpen={[Function]}
                                    title="Courses Already Done"
>>>>>>> already_done
                                  >
                                    <Styled(Card)
                                      bg="dark"
                                      text="white"
                                    >
                                      <StyledComponent
                                        bg="dark"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "Body": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardBody",
                                              "render": [Function],
                                            },
                                            "Footer": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardFooter",
                                              "render": [Function],
                                            },
                                            "Header": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardHeader",
                                              "render": [Function],
                                            },
                                            "Img": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": Object {
                                                "variant": null,
                                              },
                                              "displayName": "CardImg",
                                              "render": [Function],
                                            },
                                            "ImgOverlay": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardImgOverlay",
                                              "render": [Function],
                                            },
                                            "Link": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardLink",
                                              "render": [Function],
                                            },
                                            "Subtitle": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardSubtitle",
                                              "render": [Function],
                                            },
                                            "Text": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardText",
                                              "render": [Function],
                                            },
                                            "Title": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardTitle",
                                              "render": [Function],
                                            },
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                              "componentId": "sc-dnqmqq",
                                              "isStatic": false,
                                              "lastClassName": "hJxOZJ",
=======
                                              "componentId": "sc-htoDjs",
                                              "isStatic": false,
                                              "lastClassName": "keqScR",
>>>>>>> already_done
                                              "rules": Array [
                                                "
",
                                              ],
                                            },
                                            "displayName": "Styled(Card)",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
<<<<<<< HEAD
                                            "styledComponentId": "sc-dnqmqq",
=======
                                            "styledComponentId": "sc-htoDjs",
>>>>>>> already_done
                                            "target": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "Body": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardBody",
                                                "render": [Function],
                                              },
                                              "Footer": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardFooter",
                                                "render": [Function],
                                              },
                                              "Header": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardHeader",
                                                "render": [Function],
                                              },
                                              "Img": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": Object {
                                                  "variant": null,
                                                },
                                                "displayName": "CardImg",
                                                "render": [Function],
                                              },
                                              "ImgOverlay": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardImgOverlay",
                                                "render": [Function],
                                              },
                                              "Link": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardLink",
                                                "render": [Function],
                                              },
                                              "Subtitle": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardSubtitle",
                                                "render": [Function],
                                              },
                                              "Text": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardText",
                                                "render": [Function],
                                              },
                                              "Title": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardTitle",
                                                "render": [Function],
                                              },
                                              "defaultProps": Object {
                                                "body": false,
                                              },
                                              "displayName": "Card",
                                              "render": [Function],
                                            },
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        text="white"
                                      >
                                        <Card
                                          bg="dark"
                                          body={false}
<<<<<<< HEAD
                                          className="sc-dnqmqq hJxOZJ"
                                          text="white"
                                        >
                                          <div
                                            className="sc-dnqmqq hJxOZJ card bg-dark text-white"
=======
                                          className="sc-htoDjs keqScR"
                                          text="white"
                                        >
                                          <div
                                            className="sc-htoDjs keqScR card bg-dark text-white"
>>>>>>> already_done
                                          >
                                            <Styled(CardHeader)
                                              aria-controls="collapse-add-course"
                                              aria-expanded={false}
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                aria-controls="collapse-add-course"
                                                aria-expanded={false}
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                      "componentId": "sc-iwsKbI",
                                                      "isStatic": false,
                                                      "lastClassName": "fypTFz",
=======
                                                      "componentId": "sc-dnqmqq",
                                                      "isStatic": false,
                                                      "lastClassName": "fftazU",
>>>>>>> already_done
                                                      "rules": Array [
                                                        "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                                      ],
                                                    },
                                                    "displayName": "Styled(CardHeader)",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
<<<<<<< HEAD
                                                    "styledComponentId": "sc-iwsKbI",
=======
                                                    "styledComponentId": "sc-dnqmqq",
>>>>>>> already_done
                                                    "target": Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "defaultProps": undefined,
                                                      "displayName": "CardHeader",
                                                      "render": [Function],
                                                    },
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <CardHeader
                                                  aria-controls="collapse-add-course"
<<<<<<< HEAD
                                                  aria-expanded={true}
<<<<<<< HEAD
                                                  className="sc-iwsKbI fypTFz"
=======
                                                  className="sc-dnqmqq fftazU"
>>>>>>> already_done
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    aria-controls="collapse-add-course"
                                                    aria-expanded={true}
<<<<<<< HEAD
                                                    className="sc-iwsKbI fypTFz card-header"
=======
                                                    className="sc-dnqmqq fftazU card-header"
>>>>>>> already_done
                                                    onClick={[Function]}
                                                  >
                                                    <styled.i
                                                      className="fa fa-chevron-down"
                                                    >
                                                      <StyledComponent
                                                        className="fa fa-chevron-down"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                              "componentId": "sc-gZMcBi",
                                                              "isStatic": false,
                                                              "lastClassName": "dKgYPz",
                                                              "rules": Array [
                                                                "
  float: left;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.i",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-gZMcBi",
                                                            "target": "i",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <i
                                                          className="sc-gZMcBi dKgYPz fa fa-chevron-down"
                                                        />
                                                      </StyledComponent>
                                                    </styled.i>
                                                    <styled.h5>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-htoDjs",
                                                              "isStatic": false,
                                                              "lastClassName": "bNWaiC",
                                                              "rules": Array [
                                                                "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.h5",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-htoDjs",
                                                            "target": "h5",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <h5
                                                          className="sc-htoDjs bNWaiC"
                                                        >
                                                          Add a Course
                                                        </h5>
                                                      </StyledComponent>
                                                    </styled.h5>
                                                  </div>
                                                </CardHeader>
                                              </StyledComponent>
                                            </Styled(CardHeader)>
                                            <Collapse
                                              appear={false}
                                              dimension="height"
                                              getDimensionValue={[Function]}
                                              in={true}
                                              mountOnEnter={false}
                                              timeout={300}
                                              unmountOnExit={false}
                                            >
                                              <Transition
                                                addEndListener={[Function]}
                                                appear={false}
                                                aria-expanded={null}
                                                enter={true}
                                                exit={true}
                                                in={true}
                                                mountOnEnter={false}
                                                onEnter={[Function]}
                                                onEntered={[Function]}
                                                onEntering={[Function]}
                                                onExit={[Function]}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <CardBody
                                                  aria-expanded={null}
                                                  className="collapse show"
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse show card-body"
                                                  >
                                                    <p>
                                                      Search for a course and click on it. Then drag the course into your timeline from the 
                                                      <b>
                                                        Add
                                                      </b>
                                                       box.
                                                    </p>
                                                    <CourseDropBox
                                                      remove_course={[Function]}
                                                      type="Add"
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-EHOje",
                                                                "isStatic": false,
                                                                "lastClassName": "gIuBAP",
                                                                "rules": Array [
                                                                  "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-EHOje",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-EHOje gIuBAP"
                                                          >
                                                            <styled.h5>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-bZQynM",
                                                                      "isStatic": false,
                                                                      "lastClassName": "btxUkQ",
                                                                      "rules": Array [
                                                                        "
  padding: 8px;
",
                                                                      ],
                                                                    },
                                                                    "displayName": "styled.h5",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-bZQynM",
                                                                    "target": "h5",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <h5
                                                                  className="sc-bZQynM btxUkQ"
                                                                >
                                                                  Add
                                                                </h5>
                                                              </StyledComponent>
                                                            </styled.h5>
                                                            <ConnectFunction
                                                              direction="vertical"
                                                              droppableId="Add"
                                                              getContainerForClone={[Function]}
                                                              ignoreContainerClipping={false}
                                                              isCombineEnabled={false}
                                                              isDropDisabled={false}
                                                              mode="standard"
                                                              renderClone={null}
                                                              type="DEFAULT"
                                                            >
                                                              <Droppable
                                                                direction="vertical"
                                                                droppableId="Add"
                                                                getContainerForClone={[Function]}
                                                                ignoreContainerClipping={false}
                                                                isCombineEnabled={false}
                                                                isDropDisabled={false}
                                                                mode="standard"
                                                                placeholder={null}
                                                                renderClone={null}
                                                                shouldAnimatePlaceholder={false}
                                                                snapshot={
                                                                  Object {
                                                                    "draggingFromThisWith": null,
                                                                    "draggingOverWith": null,
                                                                    "isDraggingOver": false,
                                                                    "isUsingPlaceholder": false,
                                                                  }
                                                                }
                                                                type="DEFAULT"
                                                                updateViewportMaxScroll={[Function]}
                                                                useClone={null}
                                                              >
                                                                <styled.div
                                                                  data-rbd-droppable-context-id="1"
                                                                  data-rbd-droppable-id="Add"
                                                                >
                                                                  <StyledComponent
                                                                    data-rbd-droppable-context-id="1"
                                                                    data-rbd-droppable-id="Add"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-gzVnrw",
                                                                          "isStatic": false,
                                                                          "lastClassName": "hQQdYy",
                                                                          "rules": Array [
                                                                            "
  padding: 8px;
  flex-grow: 1;
  min-height: 50px;
",
                                                                          ],
                                                                        },
                                                                        "displayName": "styled.div",
                                                                        "foldedComponentIds": Array [],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-gzVnrw",
                                                                        "target": "div",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={[Function]}
                                                                  >
                                                                    <div
                                                                      className="sc-gzVnrw hQQdYy"
                                                                      data-rbd-droppable-context-id="1"
                                                                      data-rbd-droppable-id="Add"
                                                                    >
                                                                      <AnimateInOut
                                                                        on={null}
                                                                        shouldAnimate={false}
                                                                      />
                                                                    </div>
                                                                  </StyledComponent>
                                                                </styled.div>
                                                              </Droppable>
                                                            </ConnectFunction>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </CourseDropBox>
                                                    <SearchCourses
                                                      add_event={[Function]}
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-jKJlTe",
                                                                "isStatic": false,
                                                                "lastClassName": "BsXjl",
                                                                "rules": Array [
                                                                  "
  padding: 3px;
  margin: 0;
=======
=======
                                                  aria-expanded={false}
                                                  className="sc-dnqmqq fftazU"
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    aria-controls="collapse-add-course"
                                                    aria-expanded={false}
                                                    className="sc-dnqmqq fftazU card-header"
                                                    onClick={[Function]}
                                                  >
                                                    <styled.i
                                                      className="fa fa-chevron-right"
                                                    >
                                                      <StyledComponent
                                                        className="fa fa-chevron-right"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
>>>>>>> fix_remaining_reqs
                                                              "componentId": "sc-iwsKbI",
                                                              "isStatic": false,
                                                              "lastClassName": "LdBUN",
                                                              "rules": Array [
                                                                "
  float: left;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.i",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-iwsKbI",
                                                            "target": "i",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <i
                                                          className="sc-iwsKbI LdBUN fa fa-chevron-right"
                                                        />
                                                      </StyledComponent>
                                                    </styled.i>
                                                    <styled.h5>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
                                                              "componentId": "sc-gzVnrw",
                                                              "isStatic": false,
                                                              "lastClassName": "cvDevI",
                                                              "rules": Array [
                                                                "
  padding: 4px;
>>>>>>> already_done
  text-align: center;
  width: 100%;
",
<<<<<<< HEAD
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-jKJlTe",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-jKJlTe BsXjl"
                                                          >
                                                            <form>
                                                              <Styled(styled.input)
                                                                onChange={[Function]}
                                                                placeholder="Search for a course..."
                                                              >
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "fmHDKE",
                                                                        "rules": Array [
                                                                          "

  &:focus {
    outline: none;
    &::placeholder {
      color: transparent;
    }
  }
  box-shadow: 10px 10px grey;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  padding: 1% 4%;
  margin-bottom: 2%;
  transition: background-colour .2s ease-in;
  font-size: 30px;
  line-height: 18px;
  background-color: transparent;
  background-image: url(\\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\");
  background-repeat: no-repeat;
  background-size: 40px 40px;
  background-position: 95% center;

  border-radius: 50px;
  border: 1px solid #575756;
",
                                                                          "

&::placeholder {
  color: rgba(255, 255, 255, 0.75);
}
  width: 95%;
  padding: 12px 24px;
  margin-bottom: 1%;

  font-size: 14px;
  line-height: 18px;
  font-color: white;

  color: white;
  background-size: 18px 18px;
  background-position: 95% center;
  border: 1px solid white;

  box-shadow: 0px 0px;
=======
                                                              ],
                                                            },
                                                            "displayName": "styled.h5",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
                                                            "styledComponentId": "sc-gzVnrw",
                                                            "target": "h5",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <h5
                                                          className="sc-gzVnrw cvDevI"
                                                        >
                                                          Courses Already Done
                                                        </h5>
                                                      </StyledComponent>
                                                    </styled.h5>
                                                  </div>
                                                </CardHeader>
                                              </StyledComponent>
                                            </Styled(CardHeader)>
                                            <Collapse
                                              appear={false}
                                              dimension="height"
                                              getDimensionValue={[Function]}
                                              in={false}
                                              mountOnEnter={false}
                                              timeout={300}
                                              unmountOnExit={false}
                                            >
                                              <Transition
                                                addEndListener={[Function]}
                                                appear={false}
                                                aria-expanded={null}
                                                enter={true}
                                                exit={true}
                                                in={false}
                                                mountOnEnter={false}
                                                onEnter={[Function]}
                                                onEntered={[Function]}
                                                onEntering={[Function]}
                                                onExit={[Function]}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <CardBody
                                                  aria-expanded={null}
                                                  className="collapse"
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse card-body"
                                                  >
                                                    <p>
                                                      Drop the courses you have already done into the box below
                                                    </p>
                                                    <Component
                                                      courses={Array []}
                                                      highlight={false}
                                                      id="Done"
                                                      name="Already Done"
                                                      removeCourse={[Function]}
                                                    >
                                                      <styled.div>
                                                        <StyledComponent
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-EHOje",
                                                                "isStatic": false,
                                                                "lastClassName": "gIuBAP",
                                                                "rules": Array [
                                                                  "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                                                ],
                                                              },
                                                              "displayName": "styled.div",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-EHOje",
                                                              "target": "div",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                        >
                                                          <div
                                                            className="sc-EHOje gIuBAP"
                                                          >
                                                            <styled.h5>
                                                              <StyledComponent
                                                                forwardedComponent={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "attrs": Array [],
                                                                    "componentStyle": ComponentStyle {
                                                                      "componentId": "sc-bZQynM",
                                                                      "isStatic": false,
                                                                      "lastClassName": "btxUkQ",
                                                                      "rules": Array [
                                                                        "
  padding: 8px;
>>>>>>> already_done
",
                                                                        ],
                                                                      },
                                                                      "displayName": "Styled(styled.input)",
                                                                      "foldedComponentIds": Array [
                                                                        "sc-kpOJdX",
                                                                      ],
<<<<<<< HEAD
                                                                      "render": [Function],
                                                                      "styledComponentId": "sc-eNQAEJ",
                                                                      "target": "input",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={
                                                                    Object {
                                                                      "current": <input
                                                                        class="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                                        placeholder="Search for a course..."
                                                                      />,
                                                                    }
                                                                  }
                                                                  onChange={[Function]}
                                                                  placeholder="Search for a course..."
                                                                >
                                                                  <input
                                                                    className="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                                    onChange={[Function]}
                                                                    placeholder="Search for a course..."
                                                                  />
                                                                </StyledComponent>
                                                              </Styled(styled.input)>
                                                            </form>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </SearchCourses>
=======
                                                                    },
                                                                    "displayName": "styled.h5",
                                                                    "foldedComponentIds": Array [],
                                                                    "render": [Function],
                                                                    "styledComponentId": "sc-bZQynM",
                                                                    "target": "h5",
                                                                    "toString": [Function],
                                                                    "warnTooManyClasses": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                forwardedRef={null}
                                                              >
                                                                <h5
                                                                  className="sc-bZQynM btxUkQ"
                                                                >
                                                                  Already Done
                                                                </h5>
                                                              </StyledComponent>
                                                            </styled.h5>
                                                            <ConnectFunction
                                                              direction="vertical"
                                                              droppableId="Done"
                                                              getContainerForClone={[Function]}
                                                              ignoreContainerClipping={false}
                                                              isCombineEnabled={false}
                                                              isDropDisabled={false}
                                                              mode="standard"
                                                              renderClone={null}
                                                              type="DEFAULT"
                                                            >
                                                              <Droppable
                                                                direction="vertical"
                                                                droppableId="Done"
                                                                getContainerForClone={[Function]}
                                                                ignoreContainerClipping={false}
                                                                isCombineEnabled={false}
                                                                isDropDisabled={false}
                                                                mode="standard"
                                                                placeholder={null}
                                                                renderClone={null}
                                                                shouldAnimatePlaceholder={false}
                                                                snapshot={
                                                                  Object {
                                                                    "draggingFromThisWith": null,
                                                                    "draggingOverWith": null,
                                                                    "isDraggingOver": false,
                                                                    "isUsingPlaceholder": false,
                                                                  }
                                                                }
                                                                type="DEFAULT"
                                                                updateViewportMaxScroll={[Function]}
                                                                useClone={null}
                                                              >
                                                                <styled.div
                                                                  data-rbd-droppable-context-id="1"
                                                                  data-rbd-droppable-id="Done"
                                                                  highlight={false}
                                                                  isDraggingOver={false}
                                                                >
                                                                  <StyledComponent
                                                                    data-rbd-droppable-context-id="1"
                                                                    data-rbd-droppable-id="Done"
                                                                    forwardedComponent={
                                                                      Object {
                                                                        "$$typeof": Symbol(react.forward_ref),
                                                                        "attrs": Array [],
                                                                        "componentStyle": ComponentStyle {
                                                                          "componentId": "sc-htpNat",
                                                                          "isStatic": false,
                                                                          "lastClassName": "jgdmCx",
                                                                          "rules": Array [
                                                                            "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                                            [Function],
                                                                            ";
",
                                                                          ],
                                                                        },
                                                                        "displayName": "styled.div",
                                                                        "foldedComponentIds": Array [],
                                                                        "render": [Function],
                                                                        "styledComponentId": "sc-htpNat",
                                                                        "target": "div",
                                                                        "toString": [Function],
                                                                        "warnTooManyClasses": [Function],
                                                                        "withComponent": [Function],
                                                                      }
                                                                    }
                                                                    forwardedRef={[Function]}
                                                                    highlight={false}
                                                                    isDraggingOver={false}
                                                                  >
                                                                    <div
                                                                      className="sc-htpNat jgdmCx"
                                                                      data-rbd-droppable-context-id="1"
                                                                      data-rbd-droppable-id="Done"
                                                                    >
                                                                      <AnimateInOut
                                                                        on={null}
                                                                        shouldAnimate={false}
                                                                      />
                                                                    </div>
                                                                  </StyledComponent>
                                                                </styled.div>
                                                              </Droppable>
                                                            </ConnectFunction>
                                                          </div>
                                                        </StyledComponent>
                                                      </styled.div>
                                                    </Component>
>>>>>>> already_done
                                                  </div>
                                                </CardBody>
                                              </Transition>
                                            </Collapse>
                                          </div>
                                        </Card>
                                      </StyledComponent>
                                    </Styled(Card)>
                                  </InfoBarSection>
                                  <InfoBarSection
                                    open={false}
                                    setOpen={[Function]}
                                    title="Requirements"
                                  >
                                    <Styled(Card)
                                      bg="dark"
                                      text="white"
                                    >
                                      <StyledComponent
                                        bg="dark"
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "Body": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardBody",
                                              "render": [Function],
                                            },
                                            "Footer": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardFooter",
                                              "render": [Function],
                                            },
                                            "Header": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardHeader",
                                              "render": [Function],
                                            },
                                            "Img": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": Object {
                                                "variant": null,
                                              },
                                              "displayName": "CardImg",
                                              "render": [Function],
                                            },
                                            "ImgOverlay": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardImgOverlay",
                                              "render": [Function],
                                            },
                                            "Link": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardLink",
                                              "render": [Function],
                                            },
                                            "Subtitle": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardSubtitle",
                                              "render": [Function],
                                            },
                                            "Text": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardText",
                                              "render": [Function],
                                            },
                                            "Title": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "defaultProps": undefined,
                                              "displayName": "CardTitle",
                                              "render": [Function],
                                            },
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                              "componentId": "sc-dnqmqq",
                                              "isStatic": false,
                                              "lastClassName": "hJxOZJ",
=======
                                              "componentId": "sc-htoDjs",
                                              "isStatic": false,
                                              "lastClassName": "keqScR",
>>>>>>> already_done
                                              "rules": Array [
                                                "
",
                                              ],
                                            },
                                            "displayName": "Styled(Card)",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
<<<<<<< HEAD
                                            "styledComponentId": "sc-dnqmqq",
=======
                                            "styledComponentId": "sc-htoDjs",
>>>>>>> already_done
                                            "target": Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "Body": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardBody",
                                                "render": [Function],
                                              },
                                              "Footer": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardFooter",
                                                "render": [Function],
                                              },
                                              "Header": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardHeader",
                                                "render": [Function],
                                              },
                                              "Img": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": Object {
                                                  "variant": null,
                                                },
                                                "displayName": "CardImg",
                                                "render": [Function],
                                              },
                                              "ImgOverlay": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardImgOverlay",
                                                "render": [Function],
                                              },
                                              "Link": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardLink",
                                                "render": [Function],
                                              },
                                              "Subtitle": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardSubtitle",
                                                "render": [Function],
                                              },
                                              "Text": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardText",
                                                "render": [Function],
                                              },
                                              "Title": Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "defaultProps": undefined,
                                                "displayName": "CardTitle",
                                                "render": [Function],
                                              },
                                              "defaultProps": Object {
                                                "body": false,
                                              },
                                              "displayName": "Card",
                                              "render": [Function],
                                            },
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                        text="white"
                                      >
                                        <Card
                                          bg="dark"
                                          body={false}
<<<<<<< HEAD
                                          className="sc-dnqmqq hJxOZJ"
                                          text="white"
                                        >
                                          <div
                                            className="sc-dnqmqq hJxOZJ card bg-dark text-white"
=======
                                          className="sc-htoDjs keqScR"
                                          text="white"
                                        >
                                          <div
                                            className="sc-htoDjs keqScR card bg-dark text-white"
>>>>>>> already_done
                                          >
                                            <Styled(CardHeader)
                                              aria-controls="collapse-add-course"
                                              aria-expanded={false}
                                              onClick={[Function]}
                                            >
                                              <StyledComponent
                                                aria-controls="collapse-add-course"
                                                aria-expanded={false}
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                      "componentId": "sc-iwsKbI",
                                                      "isStatic": false,
                                                      "lastClassName": "fypTFz",
=======
                                                      "componentId": "sc-dnqmqq",
                                                      "isStatic": false,
                                                      "lastClassName": "fftazU",
>>>>>>> already_done
                                                      "rules": Array [
                                                        "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                                      ],
                                                    },
                                                    "displayName": "Styled(CardHeader)",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
<<<<<<< HEAD
                                                    "styledComponentId": "sc-iwsKbI",
=======
                                                    "styledComponentId": "sc-dnqmqq",
>>>>>>> already_done
                                                    "target": Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "defaultProps": undefined,
                                                      "displayName": "CardHeader",
                                                      "render": [Function],
                                                    },
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                                onClick={[Function]}
                                              >
                                                <CardHeader
                                                  aria-controls="collapse-add-course"
                                                  aria-expanded={false}
<<<<<<< HEAD
                                                  className="sc-iwsKbI fypTFz"
=======
                                                  className="sc-dnqmqq fftazU"
>>>>>>> already_done
                                                  onClick={[Function]}
                                                >
                                                  <div
                                                    aria-controls="collapse-add-course"
                                                    aria-expanded={false}
<<<<<<< HEAD
                                                    className="sc-iwsKbI fypTFz card-header"
=======
                                                    className="sc-dnqmqq fftazU card-header"
>>>>>>> already_done
                                                    onClick={[Function]}
                                                  >
                                                    <styled.i
                                                      className="fa fa-chevron-right"
                                                    >
                                                      <StyledComponent
                                                        className="fa fa-chevron-right"
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                              "componentId": "sc-gZMcBi",
                                                              "isStatic": false,
                                                              "lastClassName": "dKgYPz",
=======
                                                              "componentId": "sc-iwsKbI",
                                                              "isStatic": false,
                                                              "lastClassName": "LdBUN",
>>>>>>> already_done
                                                              "rules": Array [
                                                                "
  float: left;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.i",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
<<<<<<< HEAD
                                                            "styledComponentId": "sc-gZMcBi",
=======
                                                            "styledComponentId": "sc-iwsKbI",
>>>>>>> already_done
                                                            "target": "i",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <i
<<<<<<< HEAD
                                                          className="sc-gZMcBi dKgYPz fa fa-chevron-right"
=======
                                                          className="sc-iwsKbI LdBUN fa fa-chevron-right"
>>>>>>> already_done
                                                        />
                                                      </StyledComponent>
                                                    </styled.i>
                                                    <styled.h5>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                              "componentId": "sc-htoDjs",
                                                              "isStatic": false,
                                                              "lastClassName": "bNWaiC",
=======
                                                              "componentId": "sc-gzVnrw",
                                                              "isStatic": false,
                                                              "lastClassName": "cvDevI",
>>>>>>> already_done
                                                              "rules": Array [
                                                                "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.h5",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
<<<<<<< HEAD
                                                            "styledComponentId": "sc-htoDjs",
=======
                                                            "styledComponentId": "sc-gzVnrw",
>>>>>>> already_done
                                                            "target": "h5",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <h5
<<<<<<< HEAD
                                                          className="sc-htoDjs bNWaiC"
=======
                                                          className="sc-gzVnrw cvDevI"
>>>>>>> already_done
                                                        >
                                                          Requirements
                                                        </h5>
                                                      </StyledComponent>
                                                    </styled.h5>
                                                  </div>
                                                </CardHeader>
                                              </StyledComponent>
                                            </Styled(CardHeader)>
                                            <Collapse
                                              appear={false}
                                              dimension="height"
                                              getDimensionValue={[Function]}
                                              in={false}
                                              mountOnEnter={false}
                                              timeout={300}
                                              unmountOnExit={false}
                                            >
                                              <Transition
                                                addEndListener={[Function]}
                                                appear={false}
                                                aria-expanded={null}
                                                enter={true}
                                                exit={true}
                                                in={false}
                                                mountOnEnter={false}
                                                onEnter={[Function]}
                                                onEntered={[Function]}
                                                onEntering={[Function]}
                                                onExit={[Function]}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <CardBody
                                                  aria-expanded={null}
                                                  className="collapse"
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse card-body"
                                                  >
                                                    <styled.div>
                                                      <StyledComponent
                                                        forwardedComponent={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "attrs": Array [],
                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                              "componentId": "sc-hSdWYo",
                                                              "isStatic": false,
                                                              "lastClassName": "beBuDI",
=======
                                                              "componentId": "sc-iAyFgw",
                                                              "isStatic": false,
                                                              "lastClassName": "nKbrW",
>>>>>>> already_done
                                                              "rules": Array [
                                                                "
  padding: 4px;
  margin-bottom: 4px;
  font-family: inherit;
  text-align: left;
  color: inherit;
",
                                                              ],
                                                            },
                                                            "displayName": "styled.div",
                                                            "foldedComponentIds": Array [],
                                                            "render": [Function],
<<<<<<< HEAD
                                                            "styledComponentId": "sc-hSdWYo",
=======
                                                            "styledComponentId": "sc-iAyFgw",
>>>>>>> already_done
                                                            "target": "div",
                                                            "toString": [Function],
                                                            "warnTooManyClasses": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        forwardedRef={null}
                                                      >
                                                        <div
<<<<<<< HEAD
                                                          className="sc-hSdWYo beBuDI"
=======
                                                          className="sc-iAyFgw nKbrW"
>>>>>>> already_done
                                                        >
                                                          <Requirements
                                                            degree_reqs={
                                                              Array [
                                                                Object {
                                                                  "filter_type": "Required courses",
                                                                  "info": "COMP3900",
                                                                  "units": 6,
                                                                },
                                                                Object {
                                                                  "filter_type": "Courses with options",
                                                                  "info": "[ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]",
                                                                  "units": 30,
                                                                },
                                                                Object {
                                                                  "filter_type": "General education",
                                                                  "info": "Any general education course",
                                                                  "units": 12,
                                                                },
                                                                Object {
                                                                  "filter_type": "Free electives",
                                                                  "info": "Any free elective",
                                                                  "units": 36,
                                                                },
                                                              ]
                                                            }
                                                          >
                                                            <div>
                                                              <styled.div>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                        "componentId": "sc-hMqMXs",
                                                                        "isStatic": false,
                                                                        "lastClassName": "dsQNry",
=======
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                                        "rules": Array [
                                                                          "
  display: flex;
  justify-content: space-between;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.div",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
<<<<<<< HEAD
                                                                      "styledComponentId": "sc-hMqMXs",
=======
                                                                      "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                                      "target": "div",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <div
<<<<<<< HEAD
                                                                    className="sc-hMqMXs dsQNry"
=======
                                                                    className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                                  >
                                                                    <styled.p>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                              "componentId": "sc-kEYyzF",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bLxoCc",
=======
                                                                              "componentId": "sc-hMqMXs",
                                                                              "isStatic": false,
                                                                              "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                                              "rules": Array [
                                                                                "
  font-weight: bold;
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.p",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
<<<<<<< HEAD
                                                                            "styledComponentId": "sc-kEYyzF",
=======
                                                                            "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                                            "target": "p",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <p
<<<<<<< HEAD
                                                                          className="sc-kEYyzF bLxoCc"
=======
                                                                          className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                                        >
                                                                          Required courses
                                                                        </p>
                                                                      </StyledComponent>
                                                                    </styled.p>
                                                                    <p>
                                                                      <span
                                                                        style={
                                                                          Object {
                                                                            "color": "#17a2b8",
                                                                          }
                                                                        }
                                                                      >
                                                                        <u>
                                                                          6 UOC
                                                                        </u>
                                                                         remaining
                                                                      </span>
                                                                    </p>
                                                                  </div>
                                                                </StyledComponent>
                                                              </styled.div>
                                                              <ul>
                                                                <li
                                                                  key="COMP3900"
                                                                >
                                                                  COMP3900
                                                                </li>
                                                              </ul>
                                                              <styled.div>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                        "componentId": "sc-hMqMXs",
                                                                        "isStatic": false,
                                                                        "lastClassName": "dsQNry",
=======
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                                        "rules": Array [
                                                                          "
  display: flex;
  justify-content: space-between;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.div",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
<<<<<<< HEAD
                                                                      "styledComponentId": "sc-hMqMXs",
=======
                                                                      "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                                      "target": "div",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <div
<<<<<<< HEAD
                                                                    className="sc-hMqMXs dsQNry"
=======
                                                                    className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                                  >
                                                                    <styled.p>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                              "componentId": "sc-kEYyzF",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bLxoCc",
=======
                                                                              "componentId": "sc-hMqMXs",
                                                                              "isStatic": false,
                                                                              "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                                              "rules": Array [
                                                                                "
  font-weight: bold;
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.p",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
<<<<<<< HEAD
                                                                            "styledComponentId": "sc-kEYyzF",
=======
                                                                            "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                                            "target": "p",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <p
<<<<<<< HEAD
                                                                          className="sc-kEYyzF bLxoCc"
=======
                                                                          className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                                        >
                                                                          Courses with options
                                                                        </p>
                                                                      </StyledComponent>
                                                                    </styled.p>
                                                                    <p>
                                                                      <span
                                                                        style={
                                                                          Object {
                                                                            "color": "#17a2b8",
                                                                          }
                                                                        }
                                                                      >
                                                                        <u>
                                                                          30 UOC
                                                                        </u>
                                                                         remaining
                                                                      </span>
                                                                    </p>
                                                                  </div>
                                                                </StyledComponent>
                                                              </styled.div>
                                                              <ul>
                                                                <li
                                                                  key="[ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]"
                                                                >
                                                                  [ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]
                                                                </li>
                                                              </ul>
                                                              <styled.div>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                        "componentId": "sc-hMqMXs",
                                                                        "isStatic": false,
                                                                        "lastClassName": "dsQNry",
=======
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                                        "rules": Array [
                                                                          "
  display: flex;
  justify-content: space-between;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.div",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
<<<<<<< HEAD
                                                                      "styledComponentId": "sc-hMqMXs",
=======
                                                                      "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                                      "target": "div",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <div
<<<<<<< HEAD
                                                                    className="sc-hMqMXs dsQNry"
=======
                                                                    className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                                  >
                                                                    <styled.p>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                              "componentId": "sc-kEYyzF",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bLxoCc",
=======
                                                                              "componentId": "sc-hMqMXs",
                                                                              "isStatic": false,
                                                                              "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                                              "rules": Array [
                                                                                "
  font-weight: bold;
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.p",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
<<<<<<< HEAD
                                                                            "styledComponentId": "sc-kEYyzF",
=======
                                                                            "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                                            "target": "p",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <p
<<<<<<< HEAD
                                                                          className="sc-kEYyzF bLxoCc"
=======
                                                                          className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                                        >
                                                                          General education
                                                                        </p>
                                                                      </StyledComponent>
                                                                    </styled.p>
                                                                    <p>
                                                                      <span
                                                                        style={
                                                                          Object {
                                                                            "color": "#17a2b8",
                                                                          }
                                                                        }
                                                                      >
                                                                        <u>
                                                                          12 UOC
                                                                        </u>
                                                                         remaining
                                                                      </span>
                                                                    </p>
                                                                  </div>
                                                                </StyledComponent>
                                                              </styled.div>
                                                              <ul>
                                                                <li
                                                                  key="Any general education course"
                                                                >
                                                                  Any general education course
                                                                </li>
                                                              </ul>
                                                              <styled.div>
                                                                <StyledComponent
                                                                  forwardedComponent={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "attrs": Array [],
                                                                      "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                        "componentId": "sc-hMqMXs",
                                                                        "isStatic": false,
                                                                        "lastClassName": "dsQNry",
=======
                                                                        "componentId": "sc-eNQAEJ",
                                                                        "isStatic": false,
                                                                        "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                                        "rules": Array [
                                                                          "
  display: flex;
  justify-content: space-between;
",
                                                                        ],
                                                                      },
                                                                      "displayName": "styled.div",
                                                                      "foldedComponentIds": Array [],
                                                                      "render": [Function],
<<<<<<< HEAD
                                                                      "styledComponentId": "sc-hMqMXs",
=======
                                                                      "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                                      "target": "div",
                                                                      "toString": [Function],
                                                                      "warnTooManyClasses": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  forwardedRef={null}
                                                                >
                                                                  <div
<<<<<<< HEAD
                                                                    className="sc-hMqMXs dsQNry"
=======
                                                                    className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                                  >
                                                                    <styled.p>
                                                                      <StyledComponent
                                                                        forwardedComponent={
                                                                          Object {
                                                                            "$$typeof": Symbol(react.forward_ref),
                                                                            "attrs": Array [],
                                                                            "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                                              "componentId": "sc-kEYyzF",
                                                                              "isStatic": false,
                                                                              "lastClassName": "bLxoCc",
=======
                                                                              "componentId": "sc-hMqMXs",
                                                                              "isStatic": false,
                                                                              "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                                              "rules": Array [
                                                                                "
  font-weight: bold;
",
                                                                              ],
                                                                            },
                                                                            "displayName": "styled.p",
                                                                            "foldedComponentIds": Array [],
                                                                            "render": [Function],
<<<<<<< HEAD
                                                                            "styledComponentId": "sc-kEYyzF",
=======
                                                                            "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                                            "target": "p",
                                                                            "toString": [Function],
                                                                            "warnTooManyClasses": [Function],
                                                                            "withComponent": [Function],
                                                                          }
                                                                        }
                                                                        forwardedRef={null}
                                                                      >
                                                                        <p
<<<<<<< HEAD
                                                                          className="sc-kEYyzF bLxoCc"
=======
                                                                          className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                                        >
                                                                          Free electives
                                                                        </p>
                                                                      </StyledComponent>
                                                                    </styled.p>
                                                                    <p>
                                                                      <span
                                                                        style={
                                                                          Object {
                                                                            "color": "#17a2b8",
                                                                          }
                                                                        }
                                                                      >
                                                                        <u>
                                                                          36 UOC
                                                                        </u>
                                                                         remaining
                                                                      </span>
                                                                    </p>
                                                                  </div>
                                                                </StyledComponent>
                                                              </styled.div>
                                                              <ul>
                                                                <li
                                                                  key="Any free elective"
                                                                >
                                                                  Any free elective
                                                                </li>
                                                              </ul>
                                                            </div>
                                                          </Requirements>
                                                        </div>
                                                      </StyledComponent>
                                                    </styled.div>
                                                  </div>
                                                </CardBody>
                                              </Transition>
                                            </Collapse>
                                          </div>
                                        </Card>
                                      </StyledComponent>
                                    </Styled(Card)>
                                  </InfoBarSection>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </InfoBar>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </Provider>
              </App>
            </ErrorBoundary>
          </DragDropContext>
        </div>
      </StyledComponent>
    </styled.div>
  </div>
</Timeline>
`;

exports[`Render degree planning timeline view renders correctly 1`] = `
<DragDropContext>
  <ErrorBoundary>
    <App
      contextId="0"
      liftInstruction="Draggable item. Ensure your screen reader is not in browse mode and then press space bar to lift."
      setCallbacks={[Function]}
    >
      <Provider
        context={
          Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": Object {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <InfoBar
          degree_id="3778"
          degree_name="Computing"
          degree_reqs={
            Array [
              Object {
                "filter_type": "GenEd",
                "units": 12,
              },
              Object {
                "filter_type": "FreeElective",
                "units": 36,
              },
            ]
          }
          done_courses={Array []}
          standby_courses={Array []}
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
<<<<<<< HEAD
                    "componentId": "sc-kkGfuU",
                    "isStatic": false,
                    "lastClassName": "dUkchd",
=======
                    "componentId": "sc-kEYyzF",
                    "isStatic": false,
                    "lastClassName": "zzhEK",
>>>>>>> already_done
                    "rules": Array [
                      "
  &::-webkit-scrollbar {
    display: none;
  }

  padding-top: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 350px;
  max-height: 90vh;
  overflow-y: auto;
  box-sizing: content-box;
  text-align: center;
  background-color: #343a40;
  color: white;
<<<<<<< HEAD
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kkGfuU",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-kkGfuU dUkchd"
              >
                <styled.h3>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-iAyFgw",
                          "isStatic": false,
                          "lastClassName": "bsxapa",
                          "rules": Array [
                            "
=======
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-kEYyzF",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="sc-kEYyzF zzhEK"
              >
                <styled.h3>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-kkGfuU",
                          "isStatic": false,
                          "lastClassName": "jKNyZI",
                          "rules": Array [
                            "
  padding: 8px;
  margin: 0px;
  font-family: inherit;
  border-bottom: 1px solid lightgrey;
  color: inherit;
",
                          ],
                        },
                        "displayName": "styled.h3",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-kkGfuU",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h3
                      className="sc-kkGfuU jKNyZI"
                    >
                      Computing
                      <br />
                      3778
                    </h3>
                  </StyledComponent>
                </styled.h3>
                <InfoBarSection
                  open={true}
                  setOpen={[Function]}
                  title="Add a Course"
                >
                  <Styled(Card)
                    bg="dark"
                    text="white"
                  >
                    <StyledComponent
                      bg="dark"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Body": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardBody",
                            "render": [Function],
                          },
                          "Footer": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardFooter",
                            "render": [Function],
                          },
                          "Header": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardHeader",
                            "render": [Function],
                          },
                          "Img": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": Object {
                              "variant": null,
                            },
                            "displayName": "CardImg",
                            "render": [Function],
                          },
                          "ImgOverlay": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardImgOverlay",
                            "render": [Function],
                          },
                          "Link": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardLink",
                            "render": [Function],
                          },
                          "Subtitle": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardSubtitle",
                            "render": [Function],
                          },
                          "Text": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardText",
                            "render": [Function],
                          },
                          "Title": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardTitle",
                            "render": [Function],
                          },
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-htoDjs",
                            "isStatic": false,
                            "lastClassName": "keqScR",
                            "rules": Array [
                              "
",
                            ],
                          },
                          "displayName": "Styled(Card)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-htoDjs",
                          "target": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Body": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardBody",
                              "render": [Function],
                            },
                            "Footer": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardFooter",
                              "render": [Function],
                            },
                            "Header": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardHeader",
                              "render": [Function],
                            },
                            "Img": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "variant": null,
                              },
                              "displayName": "CardImg",
                              "render": [Function],
                            },
                            "ImgOverlay": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardImgOverlay",
                              "render": [Function],
                            },
                            "Link": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardLink",
                              "render": [Function],
                            },
                            "Subtitle": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardSubtitle",
                              "render": [Function],
                            },
                            "Text": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardText",
                              "render": [Function],
                            },
                            "Title": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardTitle",
                              "render": [Function],
                            },
                            "defaultProps": Object {
                              "body": false,
                            },
                            "displayName": "Card",
                            "render": [Function],
                          },
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      text="white"
                    >
                      <Card
                        bg="dark"
                        body={false}
                        className="sc-htoDjs keqScR"
                        text="white"
                      >
                        <div
                          className="sc-htoDjs keqScR card bg-dark text-white"
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={true}
                            onClick={[Function]}
                          >
                            <StyledComponent
                              aria-controls="collapse-add-course"
                              aria-expanded={true}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-dnqmqq",
                                    "isStatic": false,
                                    "lastClassName": "fftazU",
                                    "rules": Array [
                                      "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                    ],
                                  },
                                  "displayName": "Styled(CardHeader)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-dnqmqq",
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": undefined,
                                    "displayName": "CardHeader",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <CardHeader
                                aria-controls="collapse-add-course"
                                aria-expanded={true}
                                className="sc-dnqmqq fftazU"
                                onClick={[Function]}
                              >
                                <div
                                  aria-controls="collapse-add-course"
                                  aria-expanded={true}
                                  className="sc-dnqmqq fftazU card-header"
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-down"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-down"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-iwsKbI",
                                            "isStatic": false,
                                            "lastClassName": "LdBUN",
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-iwsKbI",
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
                                        className="sc-iwsKbI LdBUN fa fa-chevron-down"
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-gzVnrw",
                                            "isStatic": false,
                                            "lastClassName": "cvDevI",
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-gzVnrw",
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
                                        className="sc-gzVnrw cvDevI"
                                      >
                                        Add a Course
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={true}
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={true}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
                                className="collapse show"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse show card-body"
                                >
                                  <p>
                                    Search for a course and click on it. Then drag the course into your timeline from the 
                                    <b>
                                      Tray
                                    </b>
                                    .
                                  </p>
                                  <Component
                                    courses={Array []}
                                    highlight={false}
                                    id="Add"
                                    name="Tray"
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-EHOje",
                                              "isStatic": false,
                                              "lastClassName": "gIuBAP",
                                              "rules": Array [
                                                "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-EHOje",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-EHOje gIuBAP"
                                        >
                                          <styled.h5>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bZQynM",
                                                    "isStatic": false,
                                                    "lastClassName": "btxUkQ",
                                                    "rules": Array [
                                                      "
>>>>>>> already_done
  padding: 8px;
",
<<<<<<< HEAD
                          ],
                        },
                        "displayName": "styled.h3",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-iAyFgw",
                        "target": "h3",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <h3
                      className="sc-iAyFgw bsxapa"
                    >
                      Computing
                      <br />
                      3778
                    </h3>
                  </StyledComponent>
                </styled.h3>
                <InfoBarSection
                  open={true}
                  setOpen={[Function]}
                  title="Add a Course"
=======
                                                    ],
                                                  },
                                                  "displayName": "styled.h5",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bZQynM",
                                                  "target": "h5",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <h5
                                                className="sc-bZQynM btxUkQ"
                                              >
                                                Tray
                                              </h5>
                                            </StyledComponent>
                                          </styled.h5>
                                          <ConnectFunction
                                            direction="vertical"
                                            droppableId="Add"
                                            getContainerForClone={[Function]}
                                            ignoreContainerClipping={false}
                                            isCombineEnabled={false}
                                            isDropDisabled={false}
                                            mode="standard"
                                            renderClone={null}
                                            type="DEFAULT"
                                          >
                                            <Droppable
                                              direction="vertical"
                                              droppableId="Add"
                                              getContainerForClone={[Function]}
                                              ignoreContainerClipping={false}
                                              isCombineEnabled={false}
                                              isDropDisabled={false}
                                              mode="standard"
                                              placeholder={null}
                                              renderClone={null}
                                              shouldAnimatePlaceholder={false}
                                              snapshot={
                                                Object {
                                                  "draggingFromThisWith": null,
                                                  "draggingOverWith": null,
                                                  "isDraggingOver": false,
                                                  "isUsingPlaceholder": false,
                                                }
                                              }
                                              type="DEFAULT"
                                              updateViewportMaxScroll={[Function]}
                                              useClone={null}
                                            >
                                              <styled.div
                                                data-rbd-droppable-context-id="0"
                                                data-rbd-droppable-id="Add"
                                                highlight={false}
                                                isDraggingOver={false}
                                              >
                                                <StyledComponent
                                                  data-rbd-droppable-context-id="0"
                                                  data-rbd-droppable-id="Add"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-htpNat",
                                                        "isStatic": false,
                                                        "lastClassName": "jgdmCx",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                          [Function],
                                                          ";
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-htpNat",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={[Function]}
                                                  highlight={false}
                                                  isDraggingOver={false}
                                                >
                                                  <div
                                                    className="sc-htpNat jgdmCx"
                                                    data-rbd-droppable-context-id="0"
                                                    data-rbd-droppable-id="Add"
                                                  >
                                                    <AnimateInOut
                                                      on={null}
                                                      shouldAnimate={false}
                                                    />
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Droppable>
                                          </ConnectFunction>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </Component>
                                  <SearchCourses>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-ckVGcZ",
                                              "isStatic": false,
                                              "lastClassName": "fcibBt",
                                              "rules": Array [
                                                "
  padding: 3px;
  margin: 0;
  text-align: center;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-ckVGcZ",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-ckVGcZ fcibBt"
                                        >
                                          <form>
                                            <Styled(styled.input)
                                              onChange={[Function]}
                                              placeholder="Search for a course..."
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-jKJlTe",
                                                      "isStatic": false,
                                                      "lastClassName": "iZEjBx",
                                                      "rules": Array [
                                                        "

  &:focus {
    outline: none;
    &::placeholder {
      color: transparent;
    }
  }
  box-shadow: 10px 10px grey;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  padding: 1% 4%;
  margin-bottom: 2%;
  transition: background-colour .2s ease-in;
  font-size: 30px;
  line-height: 18px;
  background-color: transparent;
  background-image: url(\\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\");
  background-repeat: no-repeat;
  background-size: 40px 40px;
  background-position: 95% center;

  border-radius: 50px;
  border: 1px solid #575756;
",
                                                        "

&::placeholder {
  color: rgba(255, 255, 255, 0.75);
}
  width: 95%;
  padding: 12px 24px;
  margin-bottom: 1%;

  font-size: 14px;
  line-height: 18px;
  font-color: white;

  color: white;
  background-size: 18px 18px;
  background-position: 95% center;
  border: 1px solid white;

  box-shadow: 0px 0px;
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.input)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kGXeez",
                                                    ],
                                                    "render": [Function],
                                                    "styledComponentId": "sc-jKJlTe",
                                                    "target": "input",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={
                                                  Object {
                                                    "current": <input
                                                      class="sc-kGXeez sc-jKJlTe iZEjBx"
                                                      placeholder="Search for a course..."
                                                    />,
                                                  }
                                                }
                                                onChange={[Function]}
                                                placeholder="Search for a course..."
                                              >
                                                <input
                                                  className="sc-kGXeez sc-jKJlTe iZEjBx"
                                                  onChange={[Function]}
                                                  placeholder="Search for a course..."
                                                />
                                              </StyledComponent>
                                            </Styled(styled.input)>
                                          </form>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </SearchCourses>
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
                <InfoBarSection
                  open={false}
                  setOpen={[Function]}
                  title="Courses Already Done"
>>>>>>> already_done
                >
                  <Styled(Card)
                    bg="dark"
                    text="white"
                  >
                    <StyledComponent
                      bg="dark"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Body": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardBody",
                            "render": [Function],
                          },
                          "Footer": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardFooter",
                            "render": [Function],
                          },
                          "Header": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardHeader",
                            "render": [Function],
                          },
                          "Img": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": Object {
                              "variant": null,
                            },
                            "displayName": "CardImg",
                            "render": [Function],
                          },
                          "ImgOverlay": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardImgOverlay",
                            "render": [Function],
                          },
                          "Link": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardLink",
                            "render": [Function],
                          },
                          "Subtitle": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardSubtitle",
                            "render": [Function],
                          },
                          "Text": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardText",
                            "render": [Function],
                          },
                          "Title": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardTitle",
                            "render": [Function],
                          },
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "hJxOZJ",
=======
                            "componentId": "sc-htoDjs",
                            "isStatic": false,
                            "lastClassName": "keqScR",
>>>>>>> already_done
                            "rules": Array [
                              "
",
                            ],
                          },
                          "displayName": "Styled(Card)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
<<<<<<< HEAD
                          "styledComponentId": "sc-dnqmqq",
=======
                          "styledComponentId": "sc-htoDjs",
>>>>>>> already_done
                          "target": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Body": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardBody",
                              "render": [Function],
                            },
                            "Footer": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardFooter",
                              "render": [Function],
                            },
                            "Header": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardHeader",
                              "render": [Function],
                            },
                            "Img": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "variant": null,
                              },
                              "displayName": "CardImg",
                              "render": [Function],
                            },
                            "ImgOverlay": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardImgOverlay",
                              "render": [Function],
                            },
                            "Link": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardLink",
                              "render": [Function],
                            },
                            "Subtitle": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardSubtitle",
                              "render": [Function],
                            },
                            "Text": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardText",
                              "render": [Function],
                            },
                            "Title": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardTitle",
                              "render": [Function],
                            },
                            "defaultProps": Object {
                              "body": false,
                            },
                            "displayName": "Card",
                            "render": [Function],
                          },
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      text="white"
                    >
                      <Card
                        bg="dark"
                        body={false}
<<<<<<< HEAD
                        className="sc-dnqmqq hJxOZJ"
                        text="white"
                      >
                        <div
                          className="sc-dnqmqq hJxOZJ card bg-dark text-white"
=======
                        className="sc-htoDjs keqScR"
                        text="white"
                      >
                        <div
                          className="sc-htoDjs keqScR card bg-dark text-white"
>>>>>>> already_done
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={false}
                            onClick={[Function]}
                          >
                            <StyledComponent
                              aria-controls="collapse-add-course"
                              aria-expanded={false}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                    "componentId": "sc-iwsKbI",
                                    "isStatic": false,
                                    "lastClassName": "fypTFz",
=======
                                    "componentId": "sc-dnqmqq",
                                    "isStatic": false,
                                    "lastClassName": "fftazU",
>>>>>>> already_done
                                    "rules": Array [
                                      "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                    ],
                                  },
                                  "displayName": "Styled(CardHeader)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
<<<<<<< HEAD
                                  "styledComponentId": "sc-iwsKbI",
=======
                                  "styledComponentId": "sc-dnqmqq",
>>>>>>> already_done
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": undefined,
                                    "displayName": "CardHeader",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <CardHeader
                                aria-controls="collapse-add-course"
<<<<<<< HEAD
                                aria-expanded={true}
<<<<<<< HEAD
                                className="sc-iwsKbI fypTFz"
=======
=======
                                aria-expanded={false}
>>>>>>> fix_remaining_reqs
                                className="sc-dnqmqq fftazU"
>>>>>>> already_done
                                onClick={[Function]}
                              >
                                <div
                                  aria-controls="collapse-add-course"
<<<<<<< HEAD
                                  aria-expanded={true}
<<<<<<< HEAD
                                  className="sc-iwsKbI fypTFz card-header"
=======
=======
                                  aria-expanded={false}
>>>>>>> fix_remaining_reqs
                                  className="sc-dnqmqq fftazU card-header"
>>>>>>> already_done
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-right"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-right"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-gZMcBi",
                                            "isStatic": false,
                                            "lastClassName": "dKgYPz",
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-gZMcBi",
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
                                        className="sc-gZMcBi dKgYPz fa fa-chevron-down"
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-htoDjs",
                                            "isStatic": false,
                                            "lastClassName": "bNWaiC",
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-htoDjs",
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
                                        className="sc-htoDjs bNWaiC"
                                      >
                                        Add a Course
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={true}
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={true}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
                                className="collapse show"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse show card-body"
                                >
                                  <p>
                                    Search for a course and click on it. Then drag the course into your timeline from the 
                                    <b>
                                      Add
                                    </b>
                                     box.
                                  </p>
                                  <CourseDropBox
                                    type="Add"
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-EHOje",
                                              "isStatic": false,
                                              "lastClassName": "gIuBAP",
                                              "rules": Array [
                                                "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
=======
                                            "componentId": "sc-iwsKbI",
                                            "isStatic": false,
                                            "lastClassName": "LdBUN",
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-iwsKbI",
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
                                        className="sc-iwsKbI LdBUN fa fa-chevron-right"
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-gzVnrw",
                                            "isStatic": false,
                                            "lastClassName": "cvDevI",
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-gzVnrw",
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
                                        className="sc-gzVnrw cvDevI"
                                      >
                                        Courses Already Done
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
                                className="collapse"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse card-body"
                                >
                                  <p>
                                    Drop the courses you have already done into the box below
                                  </p>
                                  <Component
                                    courses={Array []}
                                    highlight={false}
                                    id="Done"
                                    name="Already Done"
                                  >
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-EHOje",
                                              "isStatic": false,
                                              "lastClassName": "gIuBAP",
                                              "rules": Array [
                                                "
  margin: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 220px;

  margin-left: auto;
  margin-right: auto;

  display: flex;
  flex-direction: column;
",
>>>>>>> already_done
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-EHOje",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-EHOje gIuBAP"
                                        >
                                          <styled.h5>
                                            <StyledComponent
                                              forwardedComponent={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "attrs": Array [],
                                                  "componentStyle": ComponentStyle {
                                                    "componentId": "sc-bZQynM",
                                                    "isStatic": false,
                                                    "lastClassName": "btxUkQ",
                                                    "rules": Array [
                                                      "
  padding: 8px;
<<<<<<< HEAD
",
                                                    ],
                                                  },
                                                  "displayName": "styled.h5",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bZQynM",
                                                  "target": "h5",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <h5
                                                className="sc-bZQynM btxUkQ"
                                              >
                                                Add
                                              </h5>
                                            </StyledComponent>
                                          </styled.h5>
                                          <ConnectFunction
                                            direction="vertical"
                                            droppableId="Add"
                                            getContainerForClone={[Function]}
                                            ignoreContainerClipping={false}
                                            isCombineEnabled={false}
                                            isDropDisabled={false}
                                            mode="standard"
                                            renderClone={null}
                                            type="DEFAULT"
                                          >
                                            <Droppable
                                              direction="vertical"
                                              droppableId="Add"
                                              getContainerForClone={[Function]}
                                              ignoreContainerClipping={false}
                                              isCombineEnabled={false}
                                              isDropDisabled={false}
                                              mode="standard"
                                              placeholder={null}
                                              renderClone={null}
                                              shouldAnimatePlaceholder={false}
                                              snapshot={
                                                Object {
                                                  "draggingFromThisWith": null,
                                                  "draggingOverWith": null,
                                                  "isDraggingOver": false,
                                                  "isUsingPlaceholder": false,
                                                }
                                              }
                                              type="DEFAULT"
                                              updateViewportMaxScroll={[Function]}
                                              useClone={null}
                                            >
                                              <styled.div
                                                data-rbd-droppable-context-id="0"
                                                data-rbd-droppable-id="Add"
                                              >
                                                <StyledComponent
                                                  data-rbd-droppable-context-id="0"
                                                  data-rbd-droppable-id="Add"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-gzVnrw",
                                                        "isStatic": false,
                                                        "lastClassName": "hQQdYy",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  flex-grow: 1;
  min-height: 50px;
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-gzVnrw",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={[Function]}
                                                >
                                                  <div
                                                    className="sc-gzVnrw hQQdYy"
                                                    data-rbd-droppable-context-id="0"
                                                    data-rbd-droppable-id="Add"
                                                  >
                                                    <AnimateInOut
                                                      on={null}
                                                      shouldAnimate={false}
                                                    />
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Droppable>
                                          </ConnectFunction>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </CourseDropBox>
                                  <SearchCourses>
                                    <styled.div>
                                      <StyledComponent
                                        forwardedComponent={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "attrs": Array [],
                                            "componentStyle": ComponentStyle {
                                              "componentId": "sc-jKJlTe",
                                              "isStatic": false,
                                              "lastClassName": "BsXjl",
                                              "rules": Array [
                                                "
  padding: 3px;
  margin: 0;
  text-align: center;
",
                                              ],
                                            },
                                            "displayName": "styled.div",
                                            "foldedComponentIds": Array [],
                                            "render": [Function],
                                            "styledComponentId": "sc-jKJlTe",
                                            "target": "div",
                                            "toString": [Function],
                                            "warnTooManyClasses": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        forwardedRef={null}
                                      >
                                        <div
                                          className="sc-jKJlTe BsXjl"
                                        >
                                          <form>
                                            <Styled(styled.input)
                                              onChange={[Function]}
                                              placeholder="Search for a course..."
                                            >
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
                                                      "componentId": "sc-eNQAEJ",
                                                      "isStatic": false,
                                                      "lastClassName": "fmHDKE",
                                                      "rules": Array [
                                                        "

  &:focus {
    outline: none;
    &::placeholder {
      color: transparent;
    }
  }
  box-shadow: 10px 10px grey;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  padding: 1% 4%;
  margin-bottom: 2%;
  transition: background-colour .2s ease-in;
  font-size: 30px;
  line-height: 18px;
  background-color: transparent;
  background-image: url(\\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z'/%3E%3Cpath d='M0 0h24v24H0z' fill='none'/%3E%3C/svg%3E\\");
  background-repeat: no-repeat;
  background-size: 40px 40px;
  background-position: 95% center;

  border-radius: 50px;
  border: 1px solid #575756;
",
                                                        "

&::placeholder {
  color: rgba(255, 255, 255, 0.75);
}
  width: 95%;
  padding: 12px 24px;
  margin-bottom: 1%;

  font-size: 14px;
  line-height: 18px;
  font-color: white;

  color: white;
  background-size: 18px 18px;
  background-position: 95% center;
  border: 1px solid white;

  box-shadow: 0px 0px;
=======
>>>>>>> already_done
",
                                                      ],
                                                    },
                                                    "displayName": "Styled(styled.input)",
                                                    "foldedComponentIds": Array [
                                                      "sc-kpOJdX",
                                                    ],
<<<<<<< HEAD
                                                    "render": [Function],
                                                    "styledComponentId": "sc-eNQAEJ",
                                                    "target": "input",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={
                                                  Object {
                                                    "current": <input
                                                      class="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                      placeholder="Search for a course..."
                                                    />,
                                                  }
                                                }
                                                onChange={[Function]}
                                                placeholder="Search for a course..."
                                              >
                                                <input
                                                  className="sc-kpOJdX sc-eNQAEJ fmHDKE"
                                                  onChange={[Function]}
                                                  placeholder="Search for a course..."
                                                />
                                              </StyledComponent>
                                            </Styled(styled.input)>
                                          </form>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </SearchCourses>
=======
                                                  },
                                                  "displayName": "styled.h5",
                                                  "foldedComponentIds": Array [],
                                                  "render": [Function],
                                                  "styledComponentId": "sc-bZQynM",
                                                  "target": "h5",
                                                  "toString": [Function],
                                                  "warnTooManyClasses": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              forwardedRef={null}
                                            >
                                              <h5
                                                className="sc-bZQynM btxUkQ"
                                              >
                                                Already Done
                                              </h5>
                                            </StyledComponent>
                                          </styled.h5>
                                          <ConnectFunction
                                            direction="vertical"
                                            droppableId="Done"
                                            getContainerForClone={[Function]}
                                            ignoreContainerClipping={false}
                                            isCombineEnabled={false}
                                            isDropDisabled={false}
                                            mode="standard"
                                            renderClone={null}
                                            type="DEFAULT"
                                          >
                                            <Droppable
                                              direction="vertical"
                                              droppableId="Done"
                                              getContainerForClone={[Function]}
                                              ignoreContainerClipping={false}
                                              isCombineEnabled={false}
                                              isDropDisabled={false}
                                              mode="standard"
                                              placeholder={null}
                                              renderClone={null}
                                              shouldAnimatePlaceholder={false}
                                              snapshot={
                                                Object {
                                                  "draggingFromThisWith": null,
                                                  "draggingOverWith": null,
                                                  "isDraggingOver": false,
                                                  "isUsingPlaceholder": false,
                                                }
                                              }
                                              type="DEFAULT"
                                              updateViewportMaxScroll={[Function]}
                                              useClone={null}
                                            >
                                              <styled.div
                                                data-rbd-droppable-context-id="0"
                                                data-rbd-droppable-id="Done"
                                                highlight={false}
                                                isDraggingOver={false}
                                              >
                                                <StyledComponent
                                                  data-rbd-droppable-context-id="0"
                                                  data-rbd-droppable-id="Done"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-htpNat",
                                                        "isStatic": false,
                                                        "lastClassName": "jgdmCx",
                                                        "rules": Array [
                                                          "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                                          [Function],
                                                          ";
",
                                                        ],
                                                      },
                                                      "displayName": "styled.div",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-htpNat",
                                                      "target": "div",
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={[Function]}
                                                  highlight={false}
                                                  isDraggingOver={false}
                                                >
                                                  <div
                                                    className="sc-htpNat jgdmCx"
                                                    data-rbd-droppable-context-id="0"
                                                    data-rbd-droppable-id="Done"
                                                  >
                                                    <AnimateInOut
                                                      on={null}
                                                      shouldAnimate={false}
                                                    />
                                                  </div>
                                                </StyledComponent>
                                              </styled.div>
                                            </Droppable>
                                          </ConnectFunction>
                                        </div>
                                      </StyledComponent>
                                    </styled.div>
                                  </Component>
>>>>>>> already_done
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
                <InfoBarSection
                  open={false}
                  setOpen={[Function]}
                  title="Requirements"
                >
                  <Styled(Card)
                    bg="dark"
                    text="white"
                  >
                    <StyledComponent
                      bg="dark"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "Body": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardBody",
                            "render": [Function],
                          },
                          "Footer": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardFooter",
                            "render": [Function],
                          },
                          "Header": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardHeader",
                            "render": [Function],
                          },
                          "Img": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": Object {
                              "variant": null,
                            },
                            "displayName": "CardImg",
                            "render": [Function],
                          },
                          "ImgOverlay": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardImgOverlay",
                            "render": [Function],
                          },
                          "Link": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardLink",
                            "render": [Function],
                          },
                          "Subtitle": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardSubtitle",
                            "render": [Function],
                          },
                          "Text": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardText",
                            "render": [Function],
                          },
                          "Title": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "defaultProps": undefined,
                            "displayName": "CardTitle",
                            "render": [Function],
                          },
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                            "componentId": "sc-dnqmqq",
                            "isStatic": false,
                            "lastClassName": "hJxOZJ",
=======
                            "componentId": "sc-htoDjs",
                            "isStatic": false,
                            "lastClassName": "keqScR",
>>>>>>> already_done
                            "rules": Array [
                              "
",
                            ],
                          },
                          "displayName": "Styled(Card)",
                          "foldedComponentIds": Array [],
                          "render": [Function],
<<<<<<< HEAD
                          "styledComponentId": "sc-dnqmqq",
=======
                          "styledComponentId": "sc-htoDjs",
>>>>>>> already_done
                          "target": Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "Body": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardBody",
                              "render": [Function],
                            },
                            "Footer": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardFooter",
                              "render": [Function],
                            },
                            "Header": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardHeader",
                              "render": [Function],
                            },
                            "Img": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": Object {
                                "variant": null,
                              },
                              "displayName": "CardImg",
                              "render": [Function],
                            },
                            "ImgOverlay": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardImgOverlay",
                              "render": [Function],
                            },
                            "Link": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardLink",
                              "render": [Function],
                            },
                            "Subtitle": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardSubtitle",
                              "render": [Function],
                            },
                            "Text": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardText",
                              "render": [Function],
                            },
                            "Title": Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "defaultProps": undefined,
                              "displayName": "CardTitle",
                              "render": [Function],
                            },
                            "defaultProps": Object {
                              "body": false,
                            },
                            "displayName": "Card",
                            "render": [Function],
                          },
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      text="white"
                    >
                      <Card
                        bg="dark"
                        body={false}
<<<<<<< HEAD
                        className="sc-dnqmqq hJxOZJ"
                        text="white"
                      >
                        <div
                          className="sc-dnqmqq hJxOZJ card bg-dark text-white"
=======
                        className="sc-htoDjs keqScR"
                        text="white"
                      >
                        <div
                          className="sc-htoDjs keqScR card bg-dark text-white"
>>>>>>> already_done
                        >
                          <Styled(CardHeader)
                            aria-controls="collapse-add-course"
                            aria-expanded={false}
                            onClick={[Function]}
                          >
                            <StyledComponent
                              aria-controls="collapse-add-course"
                              aria-expanded={false}
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                    "componentId": "sc-iwsKbI",
                                    "isStatic": false,
                                    "lastClassName": "fypTFz",
=======
                                    "componentId": "sc-dnqmqq",
                                    "isStatic": false,
                                    "lastClassName": "fftazU",
>>>>>>> already_done
                                    "rules": Array [
                                      "
  transition: color 0.2s ease;
  color: rgba(255, 255, 255, 0.75);
  display: flex;
  align-items: center

  &:hover {
    color: rgba(255, 255, 255, 1)
  };

",
                                    ],
                                  },
                                  "displayName": "Styled(CardHeader)",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
<<<<<<< HEAD
                                  "styledComponentId": "sc-iwsKbI",
=======
                                  "styledComponentId": "sc-dnqmqq",
>>>>>>> already_done
                                  "target": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "defaultProps": undefined,
                                    "displayName": "CardHeader",
                                    "render": [Function],
                                  },
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                            >
                              <CardHeader
                                aria-controls="collapse-add-course"
                                aria-expanded={false}
<<<<<<< HEAD
                                className="sc-iwsKbI fypTFz"
=======
                                className="sc-dnqmqq fftazU"
>>>>>>> already_done
                                onClick={[Function]}
                              >
                                <div
                                  aria-controls="collapse-add-course"
                                  aria-expanded={false}
<<<<<<< HEAD
                                  className="sc-iwsKbI fypTFz card-header"
=======
                                  className="sc-dnqmqq fftazU card-header"
>>>>>>> already_done
                                  onClick={[Function]}
                                >
                                  <styled.i
                                    className="fa fa-chevron-right"
                                  >
                                    <StyledComponent
                                      className="fa fa-chevron-right"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-gZMcBi",
                                            "isStatic": false,
                                            "lastClassName": "dKgYPz",
=======
                                            "componentId": "sc-iwsKbI",
                                            "isStatic": false,
                                            "lastClassName": "LdBUN",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  float: left;
",
                                            ],
                                          },
                                          "displayName": "styled.i",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-gZMcBi",
=======
                                          "styledComponentId": "sc-iwsKbI",
>>>>>>> already_done
                                          "target": "i",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <i
<<<<<<< HEAD
                                        className="sc-gZMcBi dKgYPz fa fa-chevron-right"
=======
                                        className="sc-iwsKbI LdBUN fa fa-chevron-right"
>>>>>>> already_done
                                      />
                                    </StyledComponent>
                                  </styled.i>
                                  <styled.h5>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-htoDjs",
                                            "isStatic": false,
                                            "lastClassName": "bNWaiC",
=======
                                            "componentId": "sc-gzVnrw",
                                            "isStatic": false,
                                            "lastClassName": "cvDevI",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  padding: 4px;
  text-align: center;
  width: 100%;
",
                                            ],
                                          },
                                          "displayName": "styled.h5",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-htoDjs",
=======
                                          "styledComponentId": "sc-gzVnrw",
>>>>>>> already_done
                                          "target": "h5",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <h5
<<<<<<< HEAD
                                        className="sc-htoDjs bNWaiC"
=======
                                        className="sc-gzVnrw cvDevI"
>>>>>>> already_done
                                      >
                                        Requirements
                                      </h5>
                                    </StyledComponent>
                                  </styled.h5>
                                </div>
                              </CardHeader>
                            </StyledComponent>
                          </Styled(CardHeader)>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              addEndListener={[Function]}
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <CardBody
                                aria-expanded={null}
                                className="collapse"
                              >
                                <div
                                  aria-expanded={null}
                                  className="collapse card-body"
                                >
                                  <styled.div>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                            "componentId": "sc-hSdWYo",
                                            "isStatic": false,
                                            "lastClassName": "beBuDI",
=======
                                            "componentId": "sc-iAyFgw",
                                            "isStatic": false,
                                            "lastClassName": "nKbrW",
>>>>>>> already_done
                                            "rules": Array [
                                              "
  padding: 4px;
  margin-bottom: 4px;
  font-family: inherit;
  text-align: left;
  color: inherit;
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
<<<<<<< HEAD
                                          "styledComponentId": "sc-hSdWYo",
=======
                                          "styledComponentId": "sc-iAyFgw",
>>>>>>> already_done
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <div
<<<<<<< HEAD
                                        className="sc-hSdWYo beBuDI"
=======
                                        className="sc-iAyFgw nKbrW"
>>>>>>> already_done
                                      >
                                        <Requirements
                                          degree_reqs={
                                            Array [
                                              Object {
                                                "filter_type": "GenEd",
                                                "units": 12,
                                              },
                                              Object {
                                                "filter_type": "FreeElective",
                                                "units": 36,
                                              },
                                            ]
                                          }
                                        >
                                          <div>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                      "componentId": "sc-hMqMXs",
                                                      "isStatic": false,
                                                      "lastClassName": "dsQNry",
=======
                                                      "componentId": "sc-eNQAEJ",
                                                      "isStatic": false,
                                                      "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
<<<<<<< HEAD
                                                    "styledComponentId": "sc-hMqMXs",
=======
                                                    "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
<<<<<<< HEAD
                                                  className="sc-hMqMXs dsQNry"
=======
                                                  className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                            "componentId": "sc-kEYyzF",
                                                            "isStatic": false,
                                                            "lastClassName": "bLxoCc",
=======
                                                            "componentId": "sc-hMqMXs",
                                                            "isStatic": false,
                                                            "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
<<<<<<< HEAD
                                                          "styledComponentId": "sc-kEYyzF",
=======
                                                          "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
<<<<<<< HEAD
                                                        className="sc-kEYyzF bLxoCc"
=======
                                                        className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                      >
                                                        GenEd
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        12 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                            <styled.div>
                                              <StyledComponent
                                                forwardedComponent={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "attrs": Array [],
                                                    "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                      "componentId": "sc-hMqMXs",
                                                      "isStatic": false,
                                                      "lastClassName": "dsQNry",
=======
                                                      "componentId": "sc-eNQAEJ",
                                                      "isStatic": false,
                                                      "lastClassName": "jkKDHZ",
>>>>>>> already_done
                                                      "rules": Array [
                                                        "
  display: flex;
  justify-content: space-between;
",
                                                      ],
                                                    },
                                                    "displayName": "styled.div",
                                                    "foldedComponentIds": Array [],
                                                    "render": [Function],
<<<<<<< HEAD
                                                    "styledComponentId": "sc-hMqMXs",
=======
                                                    "styledComponentId": "sc-eNQAEJ",
>>>>>>> already_done
                                                    "target": "div",
                                                    "toString": [Function],
                                                    "warnTooManyClasses": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                forwardedRef={null}
                                              >
                                                <div
<<<<<<< HEAD
                                                  className="sc-hMqMXs dsQNry"
=======
                                                  className="sc-eNQAEJ jkKDHZ"
>>>>>>> already_done
                                                >
                                                  <styled.p>
                                                    <StyledComponent
                                                      forwardedComponent={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "attrs": Array [],
                                                          "componentStyle": ComponentStyle {
<<<<<<< HEAD
                                                            "componentId": "sc-kEYyzF",
                                                            "isStatic": false,
                                                            "lastClassName": "bLxoCc",
=======
                                                            "componentId": "sc-hMqMXs",
                                                            "isStatic": false,
                                                            "lastClassName": "kgHsvQ",
>>>>>>> already_done
                                                            "rules": Array [
                                                              "
  font-weight: bold;
",
                                                            ],
                                                          },
                                                          "displayName": "styled.p",
                                                          "foldedComponentIds": Array [],
                                                          "render": [Function],
<<<<<<< HEAD
                                                          "styledComponentId": "sc-kEYyzF",
=======
                                                          "styledComponentId": "sc-hMqMXs",
>>>>>>> already_done
                                                          "target": "p",
                                                          "toString": [Function],
                                                          "warnTooManyClasses": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      forwardedRef={null}
                                                    >
                                                      <p
<<<<<<< HEAD
                                                        className="sc-kEYyzF bLxoCc"
=======
                                                        className="sc-hMqMXs kgHsvQ"
>>>>>>> already_done
                                                      >
                                                        FreeElective
                                                      </p>
                                                    </StyledComponent>
                                                  </styled.p>
                                                  <p>
                                                    <span
                                                      style={
                                                        Object {
                                                          "color": "#17a2b8",
                                                        }
                                                      }
                                                    >
                                                      <u>
                                                        36 UOC
                                                      </u>
                                                       remaining
                                                    </span>
                                                  </p>
                                                </div>
                                              </StyledComponent>
                                            </styled.div>
                                            <ul>
                                              <li>
                                                undefined
                                              </li>
                                            </ul>
                                          </div>
                                        </Requirements>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </CardBody>
                            </Transition>
                          </Collapse>
                        </div>
                      </Card>
                    </StyledComponent>
                  </Styled(Card)>
                </InfoBarSection>
              </div>
            </StyledComponent>
          </styled.div>
        </InfoBar>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`Render degree planning timeline view renders correctly as part of timeline 1`] = `
<div>
  <Navbar
    bg="dark"
    collapseOnSelect={false}
    expand={true}
    id="navbar"
    variant="dark"
  >
    <NavbarBrand
      href="/"
    >
      <span
        aria-label="book"
        role="img"
      >
        📖
      </span>
       OnCourse
    </NavbarBrand>
    <Nav
      className="mr-auto"
      fill={false}
      justify={false}
    />
    <Styled(Button)
      id="save"
      onClick={[Function]}
      variant="outline-info"
    >
      <i
        className="fa fa-save"
      />
    </Styled(Button)>
  </Navbar>
  <styled.div>
    <DragDropContext
      onDragEnd={[Function]}
      onDragStart={[Function]}
    >
      <div>
        <styled.div>
          <div
            id="timeline"
          >
            <div
              key="2019"
            >
              <styled.div
                key="2019"
              >
                <Term
                  courses={
                    Array [
                      Object {
                        "code": "COMP1511",
                        "coreqs": "",
                        "equivalents": "",
                        "exclusions": "DPST1091",
                        "name": "Programming Fundamentals",
                        "prereqs": "",
                        "terms": Array [
                          Object {
                            "term": 1,
                            "year": 2019,
                          },
                          Object {
                            "term": 2,
                            "year": 2019,
                          },
                          Object {
                            "term": 3,
                            "year": 2019,
                          },
                          Object {
                            "term": 1,
                            "year": 2020,
                          },
                          Object {
                            "term": 2,
                            "year": 2020,
                          },
                          Object {
                            "term": 3,
                            "year": 2020,
                          },
                          Object {
                            "term": 1,
                            "year": 2021,
                          },
                          Object {
                            "term": 2,
                            "year": 2021,
                          },
                          Object {
                            "term": 3,
                            "year": 2021,
                          },
                          Object {
                            "term": 1,
                            "year": 2022,
                          },
                          Object {
                            "term": 2,
                            "year": 2022,
                          },
                          Object {
                            "term": 3,
                            "year": 2022,
                          },
                          Object {
                            "term": 1,
                            "year": 2023,
                          },
                          Object {
                            "term": 2,
                            "year": 2023,
                          },
                          Object {
                            "term": 3,
                            "year": 2023,
                          },
                          Object {
                            "term": 1,
                            "year": 2024,
                          },
                          Object {
                            "term": 2,
                            "year": 2024,
                          },
                          Object {
                            "term": 3,
                            "year": 2024,
                          },
                          Object {
                            "term": 1,
                            "year": 2025,
                          },
                          Object {
                            "term": 2,
                            "year": 2025,
                          },
                          Object {
                            "term": 3,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                      Object {
                        "code": "MATH1131",
                        "coreqs": "",
                        "equivalents": "DPST1013",
                        "exclusions": "DPST1013
MATH1151
MATH1031
MATH1141
ECON2291
MATH1011
ECON1202",
                        "name": "Mathematics 1A",
                        "prereqs": "",
                        "terms": Array [
                          Object {
                            "term": 1,
                            "year": 2019,
                          },
                          Object {
                            "term": 2,
                            "year": 2019,
                          },
                          Object {
                            "term": 3,
                            "year": 2019,
                          },
                          Object {
                            "term": 1,
                            "year": 2020,
                          },
                          Object {
                            "term": 2,
                            "year": 2020,
                          },
                          Object {
                            "term": 3,
                            "year": 2020,
                          },
                          Object {
                            "term": 1,
                            "year": 2021,
                          },
                          Object {
                            "term": 2,
                            "year": 2021,
                          },
                          Object {
                            "term": 3,
                            "year": 2021,
                          },
                          Object {
                            "term": 1,
                            "year": 2022,
                          },
                          Object {
                            "term": 2,
                            "year": 2022,
                          },
                          Object {
                            "term": 3,
                            "year": 2022,
                          },
                          Object {
                            "term": 1,
                            "year": 2023,
                          },
                          Object {
                            "term": 2,
                            "year": 2023,
                          },
                          Object {
                            "term": 3,
                            "year": 2023,
                          },
                          Object {
                            "term": 1,
                            "year": 2024,
                          },
                          Object {
                            "term": 2,
                            "year": 2024,
                          },
                          Object {
                            "term": 3,
                            "year": 2024,
                          },
                          Object {
                            "term": 1,
                            "year": 2025,
                          },
                          Object {
                            "term": 2,
                            "year": 2025,
                          },
                          Object {
                            "term": 3,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                      Object {
                        "code": "MATH1081",
                        "coreqs": "(DPST1013 OR MATH1131 OR MATH1141 OR MATH1151)",
                        "equivalents": "",
                        "exclusions": "MATH1090",
                        "name": "Discrete Mathematics",
                        "prereqs": "",
                        "terms": Array [
                          Object {
                            "term": 1,
                            "year": 2019,
                          },
                          Object {
                            "term": 2,
                            "year": 2019,
                          },
                          Object {
                            "term": 3,
                            "year": 2019,
                          },
                          Object {
                            "term": 1,
                            "year": 2020,
                          },
                          Object {
                            "term": 2,
                            "year": 2020,
                          },
                          Object {
                            "term": 3,
                            "year": 2020,
                          },
                          Object {
                            "term": 1,
                            "year": 2021,
                          },
                          Object {
                            "term": 2,
                            "year": 2021,
                          },
                          Object {
                            "term": 3,
                            "year": 2021,
                          },
                          Object {
                            "term": 1,
                            "year": 2022,
                          },
                          Object {
                            "term": 2,
                            "year": 2022,
                          },
                          Object {
                            "term": 3,
                            "year": 2022,
                          },
                          Object {
                            "term": 1,
                            "year": 2023,
                          },
                          Object {
                            "term": 2,
                            "year": 2023,
                          },
                          Object {
                            "term": 3,
                            "year": 2023,
                          },
                          Object {
                            "term": 1,
                            "year": 2024,
                          },
                          Object {
                            "term": 2,
                            "year": 2024,
                          },
                          Object {
                            "term": 3,
                            "year": 2024,
                          },
                          Object {
                            "term": 1,
                            "year": 2025,
                          },
                          Object {
                            "term": 2,
                            "year": 2025,
                          },
                          Object {
                            "term": 3,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                    ]
                  }
                  getError={[Function]}
                  getWarn={[Function]}
                  key="1 2019"
                  name="1 2019"
                  removeCourse={[Function]}
                />
                <Term
                  courses={
                    Array [
                      Object {
                        "code": "COMP1521",
                        "coreqs": "",
                        "equivalents": "",
                        "exclusions": "DPST1092",
                        "name": "Computer Systems Fundamentals",
                        "prereqs": "(COMP1911 OR COMP1917 OR COMP1511 OR DPST1091)",
                        "terms": Array [
                          Object {
                            "term": 2,
                            "year": 2019,
                          },
                          Object {
                            "term": 3,
                            "year": 2019,
                          },
                          Object {
                            "term": 2,
                            "year": 2020,
                          },
                          Object {
                            "term": 3,
                            "year": 2020,
                          },
                          Object {
                            "term": 2,
                            "year": 2021,
                          },
                          Object {
                            "term": 3,
                            "year": 2021,
                          },
                          Object {
                            "term": 2,
                            "year": 2022,
                          },
                          Object {
                            "term": 3,
                            "year": 2022,
                          },
                          Object {
                            "term": 2,
                            "year": 2023,
                          },
                          Object {
                            "term": 3,
                            "year": 2023,
                          },
                          Object {
                            "term": 2,
                            "year": 2024,
                          },
                          Object {
                            "term": 3,
                            "year": 2024,
                          },
                          Object {
                            "term": 2,
                            "year": 2025,
                          },
                          Object {
                            "term": 3,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                      Object {
                        "code": "MATH1231",
                        "coreqs": "",
                        "equivalents": "DPST1014",
                        "exclusions": "ECON1202
MATH1241
DPST1014",
                        "name": "Mathematics 1B",
                        "prereqs": "(DPST1013 OR MATH1131 OR MATH1141)",
                        "terms": Array [
                          Object {
                            "term": 1,
                            "year": 2019,
                          },
                          Object {
                            "term": 2,
                            "year": 2019,
                          },
                          Object {
                            "term": 3,
                            "year": 2019,
                          },
                          Object {
                            "term": 1,
                            "year": 2020,
                          },
                          Object {
                            "term": 2,
                            "year": 2020,
                          },
                          Object {
                            "term": 3,
                            "year": 2020,
                          },
                          Object {
                            "term": 1,
                            "year": 2021,
                          },
                          Object {
                            "term": 2,
                            "year": 2021,
                          },
                          Object {
                            "term": 3,
                            "year": 2021,
                          },
                          Object {
                            "term": 1,
                            "year": 2022,
                          },
                          Object {
                            "term": 2,
                            "year": 2022,
                          },
                          Object {
                            "term": 3,
                            "year": 2022,
                          },
                          Object {
                            "term": 1,
                            "year": 2023,
                          },
                          Object {
                            "term": 2,
                            "year": 2023,
                          },
                          Object {
                            "term": 3,
                            "year": 2023,
                          },
                          Object {
                            "term": 1,
                            "year": 2024,
                          },
                          Object {
                            "term": 2,
                            "year": 2024,
                          },
                          Object {
                            "term": 3,
                            "year": 2024,
                          },
                          Object {
                            "term": 1,
                            "year": 2025,
                          },
                          Object {
                            "term": 2,
                            "year": 2025,
                          },
                          Object {
                            "term": 3,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                    ]
                  }
                  getError={[Function]}
                  getWarn={[Function]}
                  key="2 2019"
                  name="2 2019"
                  removeCourse={[Function]}
                />
                <Term
                  courses={
                    Array [
                      Object {
                        "code": "COMP1531",
                        "coreqs": "",
                        "equivalents": "",
                        "exclusions": "SENG1020
SENG1031
SENG1010",
                        "name": "Software Engineering Fundamentals",
                        "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                        "terms": Array [
                          Object {
                            "term": 1,
                            "year": 2019,
                          },
                          Object {
                            "term": 3,
                            "year": 2019,
                          },
                          Object {
                            "term": 1,
                            "year": 2020,
                          },
                          Object {
                            "term": 3,
                            "year": 2020,
                          },
                          Object {
                            "term": 1,
                            "year": 2021,
                          },
                          Object {
                            "term": 3,
                            "year": 2021,
                          },
                          Object {
                            "term": 1,
                            "year": 2022,
                          },
                          Object {
                            "term": 3,
                            "year": 2022,
                          },
                          Object {
                            "term": 1,
                            "year": 2023,
                          },
                          Object {
                            "term": 3,
                            "year": 2023,
                          },
                          Object {
                            "term": 1,
                            "year": 2024,
                          },
                          Object {
                            "term": 3,
                            "year": 2024,
                          },
                          Object {
                            "term": 1,
                            "year": 2025,
                          },
                          Object {
                            "term": 3,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                      Object {
                        "code": "COMP2521",
                        "coreqs": "",
                        "equivalents": "",
                        "exclusions": "COMP1927",
                        "name": "Data Structures and Algorithms",
                        "prereqs": "(COMP1921 OR COMP1917 OR COMP1511 OR DPST1091)",
                        "terms": Array [
                          Object {
                            "term": 1,
                            "year": 2019,
                          },
                          Object {
                            "term": 3,
                            "year": 2019,
                          },
                          Object {
                            "term": 1,
                            "year": 2020,
                          },
                          Object {
                            "term": 3,
                            "year": 2020,
                          },
                          Object {
                            "term": 1,
                            "year": 2021,
                          },
                          Object {
                            "term": 3,
                            "year": 2021,
                          },
                          Object {
                            "term": 1,
                            "year": 2022,
                          },
                          Object {
                            "term": 3,
                            "year": 2022,
                          },
                          Object {
                            "term": 1,
                            "year": 2023,
                          },
                          Object {
                            "term": 3,
                            "year": 2023,
                          },
                          Object {
                            "term": 1,
                            "year": 2024,
                          },
                          Object {
                            "term": 3,
                            "year": 2024,
                          },
                          Object {
                            "term": 1,
                            "year": 2025,
                          },
                          Object {
                            "term": 3,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                    ]
                  }
                  getError={[Function]}
                  getWarn={[Function]}
                  key="3 2019"
                  name="3 2019"
                  removeCourse={[Function]}
                />
              </styled.div>
            </div>
            <div
              key="2020"
            >
              <styled.div
                key="2020"
              >
                <Term
                  courses={Array []}
                  getError={[Function]}
                  getWarn={[Function]}
                  key="1 2020"
                  name="1 2020"
                  removeCourse={[Function]}
                />
                <Term
                  courses={
                    Array [
                      Object {
                        "code": "COMP3121",
                        "coreqs": "",
                        "equivalents": "COMP3821
COMP9801
COMP3120
COMP9101",
                        "exclusions": "",
                        "name": "Algorithms and Programming Techniques",
                        "prereqs": "(COMP1927 OR COMP2521)",
                        "terms": Array [
                          Object {
                            "term": 2,
                            "year": 2019,
                          },
                          Object {
                            "term": 2,
                            "year": 2020,
                          },
                          Object {
                            "term": 2,
                            "year": 2021,
                          },
                          Object {
                            "term": 2,
                            "year": 2022,
                          },
                          Object {
                            "term": 2,
                            "year": 2023,
                          },
                          Object {
                            "term": 2,
                            "year": 2024,
                          },
                          Object {
                            "term": 2,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                      Object {
                        "code": "COMP2511",
                        "coreqs": "",
                        "equivalents": "",
                        "exclusions": "COMP2911
COMP2011",
                        "name": "Object-Oriented Design & Programming",
                        "prereqs": "COMP1531
(COMP1927 OR COMP2521)",
                        "terms": Array [
                          Object {
                            "term": 2,
                            "year": 2019,
                          },
                          Object {
                            "term": 3,
                            "year": 2019,
                          },
                          Object {
                            "term": 2,
                            "year": 2020,
                          },
                          Object {
                            "term": 3,
                            "year": 2020,
                          },
                          Object {
                            "term": 2,
                            "year": 2021,
                          },
                          Object {
                            "term": 3,
                            "year": 2021,
                          },
                          Object {
                            "term": 2,
                            "year": 2022,
                          },
                          Object {
                            "term": 3,
                            "year": 2022,
                          },
                          Object {
                            "term": 2,
                            "year": 2023,
                          },
                          Object {
                            "term": 3,
                            "year": 2023,
                          },
                          Object {
                            "term": 2,
                            "year": 2024,
                          },
                          Object {
                            "term": 3,
                            "year": 2024,
                          },
                          Object {
                            "term": 2,
                            "year": 2025,
                          },
                          Object {
                            "term": 3,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                    ]
                  }
                  getError={[Function]}
                  getWarn={[Function]}
                  key="2 2020"
                  name="2 2020"
                  removeCourse={[Function]}
                />
                <Term
                  courses={Array []}
                  getError={[Function]}
                  getWarn={[Function]}
                  key="3 2020"
                  name="3 2020"
                  removeCourse={[Function]}
                />
              </styled.div>
            </div>
            <div
              key="2021"
            >
              <styled.div
                key="2021"
              >
                <Term
                  courses={Array []}
                  getError={[Function]}
                  getWarn={[Function]}
                  key="1 2021"
                  name="1 2021"
                  removeCourse={[Function]}
                />
                <Term
                  courses={Array []}
                  getError={[Function]}
                  getWarn={[Function]}
                  key="2 2021"
                  name="2 2021"
                  removeCourse={[Function]}
                />
                <Term
                  courses={
                    Array [
                      Object {
                        "code": "COMP4920",
                        "coreqs": "",
                        "equivalents": "",
                        "exclusions": "BINF4920
SENG4920
SENG4921
COMP2920",
                        "name": "Management and Ethics",
                        "prereqs": "Enrollment in Computer Science (3778)
Final year in your degree
(COMP2511 OR COMP2911)",
                        "terms": Array [
                          Object {
                            "term": 3,
                            "year": 2019,
                          },
                          Object {
                            "term": 3,
                            "year": 2020,
                          },
                          Object {
                            "term": 3,
                            "year": 2021,
                          },
                          Object {
                            "term": 3,
                            "year": 2022,
                          },
                          Object {
                            "term": 3,
                            "year": 2023,
                          },
                          Object {
                            "term": 3,
                            "year": 2024,
                          },
                          Object {
                            "term": 3,
                            "year": 2025,
                          },
                        ],
                        "units": 6,
                      },
                    ]
                  }
                  getError={[Function]}
                  getWarn={[Function]}
                  key="3 2021"
                  name="3 2021"
                  removeCourse={[Function]}
                />
              </styled.div>
            </div>
          </div>
          <Styled(Button)
            onClick={[Function]}
            variant="info"
          >
            +
          </Styled(Button)>
          <Styled(Button)
            onClick={[Function]}
            variant="info"
          >
            -
          </Styled(Button)>
        </styled.div>
        <styled.div>
          <InfoBar
            add_event={[Function]}
            degree_id="3778"
            degree_name="Computer Science"
            degree_reqs={
              Array [
                Object {
                  "filter_type": "Required courses",
                  "info": "COMP3900",
                  "units": 6,
                },
                Object {
                  "filter_type": "Courses with options",
                  "info": "[ Field 'COMP' ] AND [ (level 3) OR (level 4) OR (level 6) OR (level 9) ]",
                  "units": 30,
                },
                Object {
                  "filter_type": "General education",
                  "info": "Any general education course",
                  "units": 12,
                },
                Object {
                  "filter_type": "Free electives",
                  "info": "Any free elective",
                  "units": 36,
                },
              ]
            }
            done_courses={Array []}
            remove_course={[Function]}
            standby_courses={Array []}
          />
        </styled.div>
      </div>
    </DragDropContext>
  </styled.div>
</div>
`;
