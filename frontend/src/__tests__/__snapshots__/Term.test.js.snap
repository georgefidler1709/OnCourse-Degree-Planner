// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Won't render correctly outside of a DragDropContext Will render correctly within a DropDropContext 1`] = `
<DragDropContext>
  <ErrorBoundary>
    <App
      contextId="0"
      liftInstruction="Draggable item. Ensure your screen reader is not in browse mode and then press space bar to lift."
      setCallbacks={[Function]}
    >
      <Provider
        context={
          Object {
            "$$typeof": Symbol(react.context),
            "Consumer": Object {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": Object {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": Object {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <Term
          courses={Array []}
          key="test"
          termId="2 2019"
        >
          <Component
            courses={Array []}
            name="Tundefined"
            termId="2 2019"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bxivhb",
                      "isStatic": false,
                      "lastClassName": "dJmCIm",
                      "rules": Array [
                        "
  margin-top: 8px;
  margin-bottom: 8px;
  border: 1px solid lightgrey;
  border-radius: 2px;
  width: 400px;
  text-align: center;
  display: flex;
  flex-direction: column;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bxivhb",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-bxivhb dJmCIm"
                >
                  <styled.h3>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-ifAKCX",
                            "isStatic": false,
                            "lastClassName": "hMawfQ",
                            "rules": Array [
                              "
  padding: 8px;
  font-family: Arial, Helvetica, sans-serif;
  border-bottom: 1px solid lightgrey;
  margin: 0px;
",
                            ],
                          },
                          "displayName": "styled.h3",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-ifAKCX",
                          "target": "h3",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <h3
                        className="sc-ifAKCX hMawfQ"
                      >
                        Tundefined
                      </h3>
                    </StyledComponent>
                  </styled.h3>
                  <ConnectFunction
                    direction="vertical"
                    getContainerForClone={[Function]}
                    ignoreContainerClipping={false}
                    isCombineEnabled={false}
                    isDropDisabled={false}
                    mode="standard"
                    renderClone={null}
                    type="DEFAULT"
                  >
                    <Droppable
                      direction="vertical"
                      getContainerForClone={[Function]}
                      ignoreContainerClipping={false}
                      isCombineEnabled={false}
                      isDropDisabled={false}
                      mode="standard"
                      placeholder={null}
                      renderClone={null}
                      shouldAnimatePlaceholder={false}
                      snapshot={
                        Object {
                          "draggingFromThisWith": null,
                          "draggingOverWith": null,
                          "isDraggingOver": false,
                          "isUsingPlaceholder": false,
                        }
                      }
                      type="DEFAULT"
                      updateViewportMaxScroll={[Function]}
                      useClone={null}
                    >
                      <styled.div
                        data-rbd-droppable-context-id="0"
                        isDraggingOver={false}
                      >
                        <StyledComponent
                          data-rbd-droppable-context-id="0"
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-htpNat",
                                "isStatic": false,
                                "lastClassName": "jgdmCx",
                                "rules": Array [
                                  "
  padding: 8px;
  flex-grow: 1;
  min-height: 100px;
  transition: background-color 0.2s ease;
  background-color: ",
                                  [Function],
                                  ";
",
                                ],
                              },
                              "displayName": "styled.div",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-htpNat",
                              "target": "div",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={[Function]}
                          isDraggingOver={false}
                        >
                          <div
                            className="sc-htpNat jgdmCx"
                            data-rbd-droppable-context-id="0"
                          >
                            <AnimateInOut
                              on={null}
                              shouldAnimate={false}
                            />
                          </div>
                        </StyledComponent>
                      </styled.div>
                    </Droppable>
                  </ConnectFunction>
                </div>
              </StyledComponent>
            </styled.div>
          </Component>
        </Term>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`Won't render correctly outside of a DragDropContext renders correctly 1`] = `
<Component
  courses={Array []}
  getError={[Function]}
  getWarn={[Function]}
  highlight={false}
  name="Tundefined"
  removeCourse={[Function]}
  termId="2 2019"
/>
`;
